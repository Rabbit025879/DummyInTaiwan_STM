
DummyInTaiwan_STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b230  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800b500  0800b500  0001b500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b540  0800b540  0001b540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b548  0800b548  0001b548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b54c  0800b54c  0001b54c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000060  24000000  0800b550  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000060  0800b5b0  00020060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000c0  0800b610  000200c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000634  24000120  0800b670  00020120  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24000754  0800b670  00020754  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b7fb  00000000  00000000  0002014e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002739  00000000  00000000  0003b949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001328  00000000  00000000  0003e088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001250  00000000  00000000  0003f3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003305f  00000000  00000000  00040600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018826  00000000  00000000  0007365f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00152835  00000000  00000000  0008be85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001de6ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005270  00000000  00000000  001de70c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000120 	.word	0x24000120
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800b4e8 	.word	0x0800b4e8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000124 	.word	0x24000124
 800030c:	0800b4e8 	.word	0x0800b4e8

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	0000      	movs	r0, r0
	...

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	ed2d 8b02 	vpush	{d8}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000620:	f002 f91a 	bl	8002858 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000624:	f000 fa8c 	bl	8000b40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000628:	f000 ff20 	bl	800146c <MX_GPIO_Init>
  MX_ETH_Init();
 800062c:	f000 fafa 	bl	8000c24 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000630:	f000 fea0 	bl	8001374 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000634:	f000 feea 	bl	800140c <MX_USB_OTG_HS_USB_Init>
  MX_TIM3_Init();
 8000638:	f000 fbee 	bl	8000e18 <MX_TIM3_Init>
  MX_TIM4_Init();
 800063c:	f000 fc3a 	bl	8000eb4 <MX_TIM4_Init>
  MX_TIM15_Init();
 8000640:	f000 fd9e 	bl	8001180 <MX_TIM15_Init>
  MX_TIM1_Init();
 8000644:	f000 fb3a 	bl	8000cbc <MX_TIM1_Init>
  MX_TIM5_Init();
 8000648:	f000 fc82 	bl	8000f50 <MX_TIM5_Init>
  MX_TIM23_Init();
 800064c:	f000 fdea 	bl	8001224 <MX_TIM23_Init>
  MX_TIM2_Init();
 8000650:	f000 fb88 	bl	8000d64 <MX_TIM2_Init>
  MX_TIM8_Init();
 8000654:	f000 fcca 	bl	8000fec <MX_TIM8_Init>
  MX_TIM24_Init();
 8000658:	f000 fe3e 	bl	80012d8 <MX_TIM24_Init>
  MX_DMA_Init();
 800065c:	f000 fede 	bl	800141c <MX_DMA_Init>
  MX_TIM12_Init();
 8000660:	f000 fd54 	bl	800110c <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000664:	48b0      	ldr	r0, [pc, #704]	; (8000928 <main+0x310>)
 8000666:	f007 fded 	bl	8008244 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 800066a:	48b0      	ldr	r0, [pc, #704]	; (800092c <main+0x314>)
 800066c:	f007 fdea 	bl	8008244 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8000670:	48af      	ldr	r0, [pc, #700]	; (8000930 <main+0x318>)
 8000672:	f007 fde7 	bl	8008244 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 8000676:	48af      	ldr	r0, [pc, #700]	; (8000934 <main+0x31c>)
 8000678:	f007 fde4 	bl	8008244 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim12);
 800067c:	48ae      	ldr	r0, [pc, #696]	; (8000938 <main+0x320>)
 800067e:	f007 fde1 	bl	8008244 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim15);
 8000682:	48ae      	ldr	r0, [pc, #696]	; (800093c <main+0x324>)
 8000684:	f007 fdde 	bl	8008244 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim24);
 8000688:	48ad      	ldr	r0, [pc, #692]	; (8000940 <main+0x328>)
 800068a:	f007 fddb 	bl	8008244 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800068e:	2100      	movs	r1, #0
 8000690:	48ac      	ldr	r0, [pc, #688]	; (8000944 <main+0x32c>)
 8000692:	f007 feb5 	bl	8008400 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim23, TIM_CHANNEL_1);
 8000696:	2100      	movs	r1, #0
 8000698:	48ab      	ldr	r0, [pc, #684]	; (8000948 <main+0x330>)
 800069a:	f007 feb1 	bl	8008400 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_GPIO_WritePin(GPIOG,GPIO_PIN_2,Switch);
 800069e:	4bab      	ldr	r3, [pc, #684]	; (800094c <main+0x334>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	461a      	mov	r2, r3
 80006a6:	2104      	movs	r1, #4
 80006a8:	48a9      	ldr	r0, [pc, #676]	; (8000950 <main+0x338>)
 80006aa:	f005 fa95 	bl	8005bd8 <HAL_GPIO_WritePin>


	/*stepper_1*/
	/*Record position & reset i (Considering the circumstances which target changed while operating)*/
	if(i >= (fabs(targeted_1-position_1)/1.8*8*2*ratio) || target_1 != targeted_1)
 80006ae:	4ba9      	ldr	r3, [pc, #676]	; (8000954 <main+0x33c>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	ee07 3a90 	vmov	s15, r3
 80006b6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80006ba:	4ba7      	ldr	r3, [pc, #668]	; (8000958 <main+0x340>)
 80006bc:	ed93 5b00 	vldr	d5, [r3]
 80006c0:	4ba6      	ldr	r3, [pc, #664]	; (800095c <main+0x344>)
 80006c2:	ed93 7b00 	vldr	d7, [r3]
 80006c6:	ee35 7b47 	vsub.f64	d7, d5, d7
 80006ca:	eeb0 5bc7 	vabs.f64	d5, d7
 80006ce:	ed9f 4b92 	vldr	d4, [pc, #584]	; 8000918 <main+0x300>
 80006d2:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80006d6:	eeb2 5b00 	vmov.f64	d5, #32	; 0x41000000  8.0
 80006da:	ee27 7b05 	vmul.f64	d7, d7, d5
 80006de:	ee37 5b07 	vadd.f64	d5, d7, d7
 80006e2:	4b9f      	ldr	r3, [pc, #636]	; (8000960 <main+0x348>)
 80006e4:	ed93 7b00 	vldr	d7, [r3]
 80006e8:	ee25 7b07 	vmul.f64	d7, d5, d7
 80006ec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80006f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006f4:	da0a      	bge.n	800070c <main+0xf4>
 80006f6:	4b9b      	ldr	r3, [pc, #620]	; (8000964 <main+0x34c>)
 80006f8:	ed93 6b00 	vldr	d6, [r3]
 80006fc:	4b96      	ldr	r3, [pc, #600]	; (8000958 <main+0x340>)
 80006fe:	ed93 7b00 	vldr	d7, [r3]
 8000702:	eeb4 6b47 	vcmp.f64	d6, d7
 8000706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800070a:	d045      	beq.n	8000798 <main+0x180>
	{
		if(direction_1 == 1)
 800070c:	4b96      	ldr	r3, [pc, #600]	; (8000968 <main+0x350>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2b01      	cmp	r3, #1
 8000712:	d11d      	bne.n	8000750 <main+0x138>
			position_1 += round(1.8/8/2/ratio*i);
 8000714:	4b92      	ldr	r3, [pc, #584]	; (8000960 <main+0x348>)
 8000716:	ed93 7b00 	vldr	d7, [r3]
 800071a:	ed9f 5b81 	vldr	d5, [pc, #516]	; 8000920 <main+0x308>
 800071e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000722:	4b8c      	ldr	r3, [pc, #560]	; (8000954 <main+0x33c>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	ee07 3a90 	vmov	s15, r3
 800072a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800072e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000732:	eeb0 0b47 	vmov.f64	d0, d7
 8000736:	f00a fe65 	bl	800b404 <round>
 800073a:	eeb0 6b40 	vmov.f64	d6, d0
 800073e:	4b87      	ldr	r3, [pc, #540]	; (800095c <main+0x344>)
 8000740:	ed93 7b00 	vldr	d7, [r3]
 8000744:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000748:	4b84      	ldr	r3, [pc, #528]	; (800095c <main+0x344>)
 800074a:	ed83 7b00 	vstr	d7, [r3]
 800074e:	e020      	b.n	8000792 <main+0x17a>
		else if(direction_1 == 0)
 8000750:	4b85      	ldr	r3, [pc, #532]	; (8000968 <main+0x350>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d11c      	bne.n	8000792 <main+0x17a>
			position_1 -= round(1.8/8/2/ratio*i);
 8000758:	4b80      	ldr	r3, [pc, #512]	; (800095c <main+0x344>)
 800075a:	ed93 8b00 	vldr	d8, [r3]
 800075e:	4b80      	ldr	r3, [pc, #512]	; (8000960 <main+0x348>)
 8000760:	ed93 7b00 	vldr	d7, [r3]
 8000764:	ed9f 5b6e 	vldr	d5, [pc, #440]	; 8000920 <main+0x308>
 8000768:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800076c:	4b79      	ldr	r3, [pc, #484]	; (8000954 <main+0x33c>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	ee07 3a90 	vmov	s15, r3
 8000774:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000778:	ee26 7b07 	vmul.f64	d7, d6, d7
 800077c:	eeb0 0b47 	vmov.f64	d0, d7
 8000780:	f00a fe40 	bl	800b404 <round>
 8000784:	eeb0 7b40 	vmov.f64	d7, d0
 8000788:	ee38 7b47 	vsub.f64	d7, d8, d7
 800078c:	4b73      	ldr	r3, [pc, #460]	; (800095c <main+0x344>)
 800078e:	ed83 7b00 	vstr	d7, [r3]

		i = 0;
 8000792:	4b70      	ldr	r3, [pc, #448]	; (8000954 <main+0x33c>)
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
	}
	/*DIR*/
	if((targeted_1-position_1)>=0)
 8000798:	4b6f      	ldr	r3, [pc, #444]	; (8000958 <main+0x340>)
 800079a:	ed93 6b00 	vldr	d6, [r3]
 800079e:	4b6f      	ldr	r3, [pc, #444]	; (800095c <main+0x344>)
 80007a0:	ed93 7b00 	vldr	d7, [r3]
 80007a4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80007a8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80007ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007b0:	db09      	blt.n	80007c6 <main+0x1ae>
	{
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,GPIO_PIN_SET);
 80007b2:	2201      	movs	r2, #1
 80007b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007b8:	486c      	ldr	r0, [pc, #432]	; (800096c <main+0x354>)
 80007ba:	f005 fa0d 	bl	8005bd8 <HAL_GPIO_WritePin>
		direction_1 = 1;
 80007be:	4b6a      	ldr	r3, [pc, #424]	; (8000968 <main+0x350>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	e008      	b.n	80007d8 <main+0x1c0>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007cc:	4867      	ldr	r0, [pc, #412]	; (800096c <main+0x354>)
 80007ce:	f005 fa03 	bl	8005bd8 <HAL_GPIO_WritePin>
		direction_1 = 0;
 80007d2:	4b65      	ldr	r3, [pc, #404]	; (8000968 <main+0x350>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
	}
	/*angle*/
	angle_1 = targeted_1-position_1;
 80007d8:	4b5f      	ldr	r3, [pc, #380]	; (8000958 <main+0x340>)
 80007da:	ed93 6b00 	vldr	d6, [r3]
 80007de:	4b5f      	ldr	r3, [pc, #380]	; (800095c <main+0x344>)
 80007e0:	ed93 7b00 	vldr	d7, [r3]
 80007e4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80007e8:	4b61      	ldr	r3, [pc, #388]	; (8000970 <main+0x358>)
 80007ea:	ed83 7b00 	vstr	d7, [r3]
	/*Record target*/
	targeted_1 = target_1;
 80007ee:	4b5d      	ldr	r3, [pc, #372]	; (8000964 <main+0x34c>)
 80007f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007f4:	4958      	ldr	r1, [pc, #352]	; (8000958 <main+0x340>)
 80007f6:	e9c1 2300 	strd	r2, r3, [r1]

	/*stepper_2*/
	/*Record position & reset j (Considering the circumstances which target changed while operating)*/
	if(j >= (fabs(target_2-position_2)/1.8*8*2*ratio) || target_2 != targeted_2)
 80007fa:	4b5e      	ldr	r3, [pc, #376]	; (8000974 <main+0x35c>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	ee07 3a90 	vmov	s15, r3
 8000802:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000806:	4b5c      	ldr	r3, [pc, #368]	; (8000978 <main+0x360>)
 8000808:	ed93 5b00 	vldr	d5, [r3]
 800080c:	4b5b      	ldr	r3, [pc, #364]	; (800097c <main+0x364>)
 800080e:	ed93 7b00 	vldr	d7, [r3]
 8000812:	ee35 7b47 	vsub.f64	d7, d5, d7
 8000816:	eeb0 5bc7 	vabs.f64	d5, d7
 800081a:	ed9f 4b3f 	vldr	d4, [pc, #252]	; 8000918 <main+0x300>
 800081e:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000822:	eeb2 5b00 	vmov.f64	d5, #32	; 0x41000000  8.0
 8000826:	ee27 7b05 	vmul.f64	d7, d7, d5
 800082a:	ee37 5b07 	vadd.f64	d5, d7, d7
 800082e:	4b4c      	ldr	r3, [pc, #304]	; (8000960 <main+0x348>)
 8000830:	ed93 7b00 	vldr	d7, [r3]
 8000834:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000838:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800083c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000840:	da0a      	bge.n	8000858 <main+0x240>
 8000842:	4b4d      	ldr	r3, [pc, #308]	; (8000978 <main+0x360>)
 8000844:	ed93 6b00 	vldr	d6, [r3]
 8000848:	4b4d      	ldr	r3, [pc, #308]	; (8000980 <main+0x368>)
 800084a:	ed93 7b00 	vldr	d7, [r3]
 800084e:	eeb4 6b47 	vcmp.f64	d6, d7
 8000852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000856:	d04a      	beq.n	80008ee <main+0x2d6>
	{
		if((target_2-position_2)>=0)
 8000858:	4b47      	ldr	r3, [pc, #284]	; (8000978 <main+0x360>)
 800085a:	ed93 6b00 	vldr	d6, [r3]
 800085e:	4b47      	ldr	r3, [pc, #284]	; (800097c <main+0x364>)
 8000860:	ed93 7b00 	vldr	d7, [r3]
 8000864:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000868:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800086c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000870:	db1d      	blt.n	80008ae <main+0x296>
			position_2 += round(1.8/8/2/ratio*j);
 8000872:	4b3b      	ldr	r3, [pc, #236]	; (8000960 <main+0x348>)
 8000874:	ed93 7b00 	vldr	d7, [r3]
 8000878:	ed9f 5b29 	vldr	d5, [pc, #164]	; 8000920 <main+0x308>
 800087c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000880:	4b3c      	ldr	r3, [pc, #240]	; (8000974 <main+0x35c>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	ee07 3a90 	vmov	s15, r3
 8000888:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800088c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000890:	eeb0 0b47 	vmov.f64	d0, d7
 8000894:	f00a fdb6 	bl	800b404 <round>
 8000898:	eeb0 6b40 	vmov.f64	d6, d0
 800089c:	4b37      	ldr	r3, [pc, #220]	; (800097c <main+0x364>)
 800089e:	ed93 7b00 	vldr	d7, [r3]
 80008a2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80008a6:	4b35      	ldr	r3, [pc, #212]	; (800097c <main+0x364>)
 80008a8:	ed83 7b00 	vstr	d7, [r3]
 80008ac:	e01c      	b.n	80008e8 <main+0x2d0>
		else
			position_2 -= round(1.8/8/2/ratio*j);
 80008ae:	4b33      	ldr	r3, [pc, #204]	; (800097c <main+0x364>)
 80008b0:	ed93 8b00 	vldr	d8, [r3]
 80008b4:	4b2a      	ldr	r3, [pc, #168]	; (8000960 <main+0x348>)
 80008b6:	ed93 7b00 	vldr	d7, [r3]
 80008ba:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8000920 <main+0x308>
 80008be:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80008c2:	4b2c      	ldr	r3, [pc, #176]	; (8000974 <main+0x35c>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	ee07 3a90 	vmov	s15, r3
 80008ca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80008ce:	ee26 7b07 	vmul.f64	d7, d6, d7
 80008d2:	eeb0 0b47 	vmov.f64	d0, d7
 80008d6:	f00a fd95 	bl	800b404 <round>
 80008da:	eeb0 7b40 	vmov.f64	d7, d0
 80008de:	ee38 7b47 	vsub.f64	d7, d8, d7
 80008e2:	4b26      	ldr	r3, [pc, #152]	; (800097c <main+0x364>)
 80008e4:	ed83 7b00 	vstr	d7, [r3]
		j = 0;
 80008e8:	4b22      	ldr	r3, [pc, #136]	; (8000974 <main+0x35c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
	}
	/*DIR*/
	if((target_2-position_2)>=0)
 80008ee:	4b22      	ldr	r3, [pc, #136]	; (8000978 <main+0x360>)
 80008f0:	ed93 6b00 	vldr	d6, [r3]
 80008f4:	4b21      	ldr	r3, [pc, #132]	; (800097c <main+0x364>)
 80008f6:	ed93 7b00 	vldr	d7, [r3]
 80008fa:	ee36 7b47 	vsub.f64	d7, d6, d7
 80008fe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000906:	db3d      	blt.n	8000984 <main+0x36c>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_11,GPIO_PIN_SET);
 8000908:	2201      	movs	r2, #1
 800090a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800090e:	4817      	ldr	r0, [pc, #92]	; (800096c <main+0x354>)
 8000910:	f005 f962 	bl	8005bd8 <HAL_GPIO_WritePin>
 8000914:	e03c      	b.n	8000990 <main+0x378>
 8000916:	bf00      	nop
 8000918:	cccccccd 	.word	0xcccccccd
 800091c:	3ffccccc 	.word	0x3ffccccc
 8000920:	cccccccd 	.word	0xcccccccd
 8000924:	3fbccccc 	.word	0x3fbccccc
 8000928:	24000224 	.word	0x24000224
 800092c:	240002bc 	.word	0x240002bc
 8000930:	24000308 	.word	0x24000308
 8000934:	24000354 	.word	0x24000354
 8000938:	240003ec 	.word	0x240003ec
 800093c:	24000438 	.word	0x24000438
 8000940:	240004d0 	.word	0x240004d0
 8000944:	24000270 	.word	0x24000270
 8000948:	24000484 	.word	0x24000484
 800094c:	24000000 	.word	0x24000000
 8000950:	58021800 	.word	0x58021800
 8000954:	24000700 	.word	0x24000700
 8000958:	240006b8 	.word	0x240006b8
 800095c:	240006d0 	.word	0x240006d0
 8000960:	24000008 	.word	0x24000008
 8000964:	240006a0 	.word	0x240006a0
 8000968:	24000018 	.word	0x24000018
 800096c:	58020800 	.word	0x58020800
 8000970:	240006e8 	.word	0x240006e8
 8000974:	24000704 	.word	0x24000704
 8000978:	240006a8 	.word	0x240006a8
 800097c:	240006d8 	.word	0x240006d8
 8000980:	240006c0 	.word	0x240006c0
	else
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_11,GPIO_PIN_RESET);
 8000984:	2200      	movs	r2, #0
 8000986:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800098a:	4861      	ldr	r0, [pc, #388]	; (8000b10 <main+0x4f8>)
 800098c:	f005 f924 	bl	8005bd8 <HAL_GPIO_WritePin>
	/*angle*/
	angle_2 = targeted_2-position_2;
 8000990:	4b60      	ldr	r3, [pc, #384]	; (8000b14 <main+0x4fc>)
 8000992:	ed93 6b00 	vldr	d6, [r3]
 8000996:	4b60      	ldr	r3, [pc, #384]	; (8000b18 <main+0x500>)
 8000998:	ed93 7b00 	vldr	d7, [r3]
 800099c:	ee36 7b47 	vsub.f64	d7, d6, d7
 80009a0:	4b5e      	ldr	r3, [pc, #376]	; (8000b1c <main+0x504>)
 80009a2:	ed83 7b00 	vstr	d7, [r3]
	/*Record target*/
	targeted_2 = target_2;
 80009a6:	4b5e      	ldr	r3, [pc, #376]	; (8000b20 <main+0x508>)
 80009a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009ac:	4959      	ldr	r1, [pc, #356]	; (8000b14 <main+0x4fc>)
 80009ae:	e9c1 2300 	strd	r2, r3, [r1]

	/*stepper_3*/
	/*Record position & reset k (Considering the circumstances which target changed while operating)*/
	if(k >= (fabs(target_3-position_3)/1.8*8*2*ratio_3) || target_3 != targeted_3)
 80009b2:	4b5c      	ldr	r3, [pc, #368]	; (8000b24 <main+0x50c>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	ee07 3a90 	vmov	s15, r3
 80009ba:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80009be:	4b5a      	ldr	r3, [pc, #360]	; (8000b28 <main+0x510>)
 80009c0:	ed93 5b00 	vldr	d5, [r3]
 80009c4:	4b59      	ldr	r3, [pc, #356]	; (8000b2c <main+0x514>)
 80009c6:	ed93 7b00 	vldr	d7, [r3]
 80009ca:	ee35 7b47 	vsub.f64	d7, d5, d7
 80009ce:	eeb0 5bc7 	vabs.f64	d5, d7
 80009d2:	ed9f 4b4b 	vldr	d4, [pc, #300]	; 8000b00 <main+0x4e8>
 80009d6:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80009da:	eeb2 5b00 	vmov.f64	d5, #32	; 0x41000000  8.0
 80009de:	ee27 7b05 	vmul.f64	d7, d7, d5
 80009e2:	ee37 5b07 	vadd.f64	d5, d7, d7
 80009e6:	4b52      	ldr	r3, [pc, #328]	; (8000b30 <main+0x518>)
 80009e8:	ed93 7b00 	vldr	d7, [r3]
 80009ec:	ee25 7b07 	vmul.f64	d7, d5, d7
 80009f0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80009f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009f8:	da0a      	bge.n	8000a10 <main+0x3f8>
 80009fa:	4b4b      	ldr	r3, [pc, #300]	; (8000b28 <main+0x510>)
 80009fc:	ed93 6b00 	vldr	d6, [r3]
 8000a00:	4b4c      	ldr	r3, [pc, #304]	; (8000b34 <main+0x51c>)
 8000a02:	ed93 7b00 	vldr	d7, [r3]
 8000a06:	eeb4 6b47 	vcmp.f64	d6, d7
 8000a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a0e:	d04a      	beq.n	8000aa6 <main+0x48e>
	{
		if((target_3-position_3)>=0)
 8000a10:	4b45      	ldr	r3, [pc, #276]	; (8000b28 <main+0x510>)
 8000a12:	ed93 6b00 	vldr	d6, [r3]
 8000a16:	4b45      	ldr	r3, [pc, #276]	; (8000b2c <main+0x514>)
 8000a18:	ed93 7b00 	vldr	d7, [r3]
 8000a1c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000a20:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a28:	db1d      	blt.n	8000a66 <main+0x44e>
			position_3 += round(1.8/8/2/ratio_3*k);
 8000a2a:	4b41      	ldr	r3, [pc, #260]	; (8000b30 <main+0x518>)
 8000a2c:	ed93 7b00 	vldr	d7, [r3]
 8000a30:	ed9f 5b35 	vldr	d5, [pc, #212]	; 8000b08 <main+0x4f0>
 8000a34:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000a38:	4b3a      	ldr	r3, [pc, #232]	; (8000b24 <main+0x50c>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	ee07 3a90 	vmov	s15, r3
 8000a40:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a44:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000a48:	eeb0 0b47 	vmov.f64	d0, d7
 8000a4c:	f00a fcda 	bl	800b404 <round>
 8000a50:	eeb0 6b40 	vmov.f64	d6, d0
 8000a54:	4b35      	ldr	r3, [pc, #212]	; (8000b2c <main+0x514>)
 8000a56:	ed93 7b00 	vldr	d7, [r3]
 8000a5a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000a5e:	4b33      	ldr	r3, [pc, #204]	; (8000b2c <main+0x514>)
 8000a60:	ed83 7b00 	vstr	d7, [r3]
 8000a64:	e01c      	b.n	8000aa0 <main+0x488>
		else
			position_3 -= round(1.8/8/2/ratio_3*k);
 8000a66:	4b31      	ldr	r3, [pc, #196]	; (8000b2c <main+0x514>)
 8000a68:	ed93 8b00 	vldr	d8, [r3]
 8000a6c:	4b30      	ldr	r3, [pc, #192]	; (8000b30 <main+0x518>)
 8000a6e:	ed93 7b00 	vldr	d7, [r3]
 8000a72:	ed9f 5b25 	vldr	d5, [pc, #148]	; 8000b08 <main+0x4f0>
 8000a76:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000a7a:	4b2a      	ldr	r3, [pc, #168]	; (8000b24 <main+0x50c>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	ee07 3a90 	vmov	s15, r3
 8000a82:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a86:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000a8a:	eeb0 0b47 	vmov.f64	d0, d7
 8000a8e:	f00a fcb9 	bl	800b404 <round>
 8000a92:	eeb0 7b40 	vmov.f64	d7, d0
 8000a96:	ee38 7b47 	vsub.f64	d7, d8, d7
 8000a9a:	4b24      	ldr	r3, [pc, #144]	; (8000b2c <main+0x514>)
 8000a9c:	ed83 7b00 	vstr	d7, [r3]
		k = 0;
 8000aa0:	4b20      	ldr	r3, [pc, #128]	; (8000b24 <main+0x50c>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
	}
	/*DIR*/
	if((target_3-position_3)<=0)
 8000aa6:	4b20      	ldr	r3, [pc, #128]	; (8000b28 <main+0x510>)
 8000aa8:	ed93 6b00 	vldr	d6, [r3]
 8000aac:	4b1f      	ldr	r3, [pc, #124]	; (8000b2c <main+0x514>)
 8000aae:	ed93 7b00 	vldr	d7, [r3]
 8000ab2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000ab6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000abe:	d805      	bhi.n	8000acc <main+0x4b4>
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_2,GPIO_PIN_SET);
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	2104      	movs	r1, #4
 8000ac4:	481c      	ldr	r0, [pc, #112]	; (8000b38 <main+0x520>)
 8000ac6:	f005 f887 	bl	8005bd8 <HAL_GPIO_WritePin>
 8000aca:	e004      	b.n	8000ad6 <main+0x4be>
	else
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_2,GPIO_PIN_RESET);
 8000acc:	2200      	movs	r2, #0
 8000ace:	2104      	movs	r1, #4
 8000ad0:	4819      	ldr	r0, [pc, #100]	; (8000b38 <main+0x520>)
 8000ad2:	f005 f881 	bl	8005bd8 <HAL_GPIO_WritePin>
	/*angle*/
	angle_3 = targeted_3-position_3;
 8000ad6:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <main+0x51c>)
 8000ad8:	ed93 6b00 	vldr	d6, [r3]
 8000adc:	4b13      	ldr	r3, [pc, #76]	; (8000b2c <main+0x514>)
 8000ade:	ed93 7b00 	vldr	d7, [r3]
 8000ae2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000ae6:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <main+0x524>)
 8000ae8:	ed83 7b00 	vstr	d7, [r3]
	/*Record target*/
	targeted_3 = target_3;
 8000aec:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <main+0x510>)
 8000aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000af2:	4910      	ldr	r1, [pc, #64]	; (8000b34 <main+0x51c>)
 8000af4:	e9c1 2300 	strd	r2, r3, [r1]
	HAL_GPIO_WritePin(GPIOG,GPIO_PIN_2,Switch);
 8000af8:	e5d1      	b.n	800069e <main+0x86>
 8000afa:	bf00      	nop
 8000afc:	f3af 8000 	nop.w
 8000b00:	cccccccd 	.word	0xcccccccd
 8000b04:	3ffccccc 	.word	0x3ffccccc
 8000b08:	cccccccd 	.word	0xcccccccd
 8000b0c:	3fbccccc 	.word	0x3fbccccc
 8000b10:	58020800 	.word	0x58020800
 8000b14:	240006c0 	.word	0x240006c0
 8000b18:	240006d8 	.word	0x240006d8
 8000b1c:	240006f0 	.word	0x240006f0
 8000b20:	240006a8 	.word	0x240006a8
 8000b24:	24000708 	.word	0x24000708
 8000b28:	240006b0 	.word	0x240006b0
 8000b2c:	240006e0 	.word	0x240006e0
 8000b30:	24000010 	.word	0x24000010
 8000b34:	240006c8 	.word	0x240006c8
 8000b38:	58020c00 	.word	0x58020c00
 8000b3c:	240006f8 	.word	0x240006f8

08000b40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b09c      	sub	sp, #112	; 0x70
 8000b44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b4a:	224c      	movs	r2, #76	; 0x4c
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f00a fcc2 	bl	800b4d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	2220      	movs	r2, #32
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f00a fcbc 	bl	800b4d8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b60:	2002      	movs	r0, #2
 8000b62:	f005 f887 	bl	8005c74 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b66:	2300      	movs	r3, #0
 8000b68:	603b      	str	r3, [r7, #0]
 8000b6a:	4b2d      	ldr	r3, [pc, #180]	; (8000c20 <SystemClock_Config+0xe0>)
 8000b6c:	699b      	ldr	r3, [r3, #24]
 8000b6e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b72:	4a2b      	ldr	r2, [pc, #172]	; (8000c20 <SystemClock_Config+0xe0>)
 8000b74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b78:	6193      	str	r3, [r2, #24]
 8000b7a:	4b29      	ldr	r3, [pc, #164]	; (8000c20 <SystemClock_Config+0xe0>)
 8000b7c:	699b      	ldr	r3, [r3, #24]
 8000b7e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b82:	603b      	str	r3, [r7, #0]
 8000b84:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b86:	bf00      	nop
 8000b88:	4b25      	ldr	r3, [pc, #148]	; (8000c20 <SystemClock_Config+0xe0>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b94:	d1f8      	bne.n	8000b88 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000b96:	2321      	movs	r3, #33	; 0x21
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b9a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b9e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000bac:	2301      	movs	r3, #1
 8000bae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 42;
 8000bb0:	232a      	movs	r3, #42	; 0x2a
 8000bb2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bb8:	2304      	movs	r3, #4
 8000bba:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000bc0:	230c      	movs	r3, #12
 8000bc2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f005 f889 	bl	8005ce8 <HAL_RCC_OscConfig>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000bdc:	f001 f938 	bl	8001e50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000be0:	233f      	movs	r3, #63	; 0x3f
 8000be2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000be4:	2303      	movs	r3, #3
 8000be6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8000be8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000bec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000bee:	2308      	movs	r3, #8
 8000bf0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000bf2:	2340      	movs	r3, #64	; 0x40
 8000bf4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000bf6:	2340      	movs	r3, #64	; 0x40
 8000bf8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000bfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bfe:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c00:	2340      	movs	r3, #64	; 0x40
 8000c02:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c04:	1d3b      	adds	r3, r7, #4
 8000c06:	2102      	movs	r1, #2
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f005 fc1b 	bl	8006444 <HAL_RCC_ClockConfig>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000c14:	f001 f91c 	bl	8001e50 <Error_Handler>
  }
}
 8000c18:	bf00      	nop
 8000c1a:	3770      	adds	r7, #112	; 0x70
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	58024800 	.word	0x58024800

08000c24 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000c28:	4b1e      	ldr	r3, [pc, #120]	; (8000ca4 <MX_ETH_Init+0x80>)
 8000c2a:	4a1f      	ldr	r2, [pc, #124]	; (8000ca8 <MX_ETH_Init+0x84>)
 8000c2c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000c2e:	4b1f      	ldr	r3, [pc, #124]	; (8000cac <MX_ETH_Init+0x88>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000c34:	4b1d      	ldr	r3, [pc, #116]	; (8000cac <MX_ETH_Init+0x88>)
 8000c36:	2280      	movs	r2, #128	; 0x80
 8000c38:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000c3a:	4b1c      	ldr	r3, [pc, #112]	; (8000cac <MX_ETH_Init+0x88>)
 8000c3c:	22e1      	movs	r2, #225	; 0xe1
 8000c3e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000c40:	4b1a      	ldr	r3, [pc, #104]	; (8000cac <MX_ETH_Init+0x88>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000c46:	4b19      	ldr	r3, [pc, #100]	; (8000cac <MX_ETH_Init+0x88>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000c4c:	4b17      	ldr	r3, [pc, #92]	; (8000cac <MX_ETH_Init+0x88>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000c52:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <MX_ETH_Init+0x80>)
 8000c54:	4a15      	ldr	r2, [pc, #84]	; (8000cac <MX_ETH_Init+0x88>)
 8000c56:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000c58:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <MX_ETH_Init+0x80>)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000c5e:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <MX_ETH_Init+0x80>)
 8000c60:	4a13      	ldr	r2, [pc, #76]	; (8000cb0 <MX_ETH_Init+0x8c>)
 8000c62:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000c64:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <MX_ETH_Init+0x80>)
 8000c66:	4a13      	ldr	r2, [pc, #76]	; (8000cb4 <MX_ETH_Init+0x90>)
 8000c68:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <MX_ETH_Init+0x80>)
 8000c6c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000c70:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000c72:	480c      	ldr	r0, [pc, #48]	; (8000ca4 <MX_ETH_Init+0x80>)
 8000c74:	f004 f9e4 	bl	8005040 <HAL_ETH_Init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000c7e:	f001 f8e7 	bl	8001e50 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000c82:	2238      	movs	r2, #56	; 0x38
 8000c84:	2100      	movs	r1, #0
 8000c86:	480c      	ldr	r0, [pc, #48]	; (8000cb8 <MX_ETH_Init+0x94>)
 8000c88:	f00a fc26 	bl	800b4d8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000c8c:	4b0a      	ldr	r3, [pc, #40]	; (8000cb8 <MX_ETH_Init+0x94>)
 8000c8e:	2221      	movs	r2, #33	; 0x21
 8000c90:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000c92:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <MX_ETH_Init+0x94>)
 8000c94:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000c98:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000c9a:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <MX_ETH_Init+0x94>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	24000174 	.word	0x24000174
 8000ca8:	40028000 	.word	0x40028000
 8000cac:	24000748 	.word	0x24000748
 8000cb0:	240000c0 	.word	0x240000c0
 8000cb4:	24000060 	.word	0x24000060
 8000cb8:	2400013c 	.word	0x2400013c

08000cbc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b088      	sub	sp, #32
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cc2:	f107 0310 	add.w	r3, r7, #16
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cda:	4b20      	ldr	r3, [pc, #128]	; (8000d5c <MX_TIM1_Init+0xa0>)
 8000cdc:	4a20      	ldr	r2, [pc, #128]	; (8000d60 <MX_TIM1_Init+0xa4>)
 8000cde:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8000ce0:	4b1e      	ldr	r3, [pc, #120]	; (8000d5c <MX_TIM1_Init+0xa0>)
 8000ce2:	2253      	movs	r2, #83	; 0x53
 8000ce4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce6:	4b1d      	ldr	r3, [pc, #116]	; (8000d5c <MX_TIM1_Init+0xa0>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8000cec:	4b1b      	ldr	r3, [pc, #108]	; (8000d5c <MX_TIM1_Init+0xa0>)
 8000cee:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000cf2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cf4:	4b19      	ldr	r3, [pc, #100]	; (8000d5c <MX_TIM1_Init+0xa0>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cfa:	4b18      	ldr	r3, [pc, #96]	; (8000d5c <MX_TIM1_Init+0xa0>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d00:	4b16      	ldr	r3, [pc, #88]	; (8000d5c <MX_TIM1_Init+0xa0>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d06:	4815      	ldr	r0, [pc, #84]	; (8000d5c <MX_TIM1_Init+0xa0>)
 8000d08:	f007 fa44 	bl	8008194 <HAL_TIM_Base_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000d12:	f001 f89d 	bl	8001e50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d1a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d1c:	f107 0310 	add.w	r3, r7, #16
 8000d20:	4619      	mov	r1, r3
 8000d22:	480e      	ldr	r0, [pc, #56]	; (8000d5c <MX_TIM1_Init+0xa0>)
 8000d24:	f007 febc 	bl	8008aa0 <HAL_TIM_ConfigClockSource>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000d2e:	f001 f88f 	bl	8001e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d32:	2300      	movs	r3, #0
 8000d34:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d36:	2300      	movs	r3, #0
 8000d38:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	4619      	mov	r1, r3
 8000d42:	4806      	ldr	r0, [pc, #24]	; (8000d5c <MX_TIM1_Init+0xa0>)
 8000d44:	f008 fc0c 	bl	8009560 <HAL_TIMEx_MasterConfigSynchronization>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000d4e:	f001 f87f 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d52:	bf00      	nop
 8000d54:	3720      	adds	r7, #32
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	24000224 	.word	0x24000224
 8000d60:	40010000 	.word	0x40010000

08000d64 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08a      	sub	sp, #40	; 0x28
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d6a:	f107 031c 	add.w	r3, r7, #28
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	605a      	str	r2, [r3, #4]
 8000d74:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d76:	463b      	mov	r3, r7
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]
 8000d84:	615a      	str	r2, [r3, #20]
 8000d86:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d88:	4b22      	ldr	r3, [pc, #136]	; (8000e14 <MX_TIM2_Init+0xb0>)
 8000d8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d8e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8000d90:	4b20      	ldr	r3, [pc, #128]	; (8000e14 <MX_TIM2_Init+0xb0>)
 8000d92:	2253      	movs	r2, #83	; 0x53
 8000d94:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d96:	4b1f      	ldr	r3, [pc, #124]	; (8000e14 <MX_TIM2_Init+0xb0>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8000d9c:	4b1d      	ldr	r3, [pc, #116]	; (8000e14 <MX_TIM2_Init+0xb0>)
 8000d9e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000da2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da4:	4b1b      	ldr	r3, [pc, #108]	; (8000e14 <MX_TIM2_Init+0xb0>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000daa:	4b1a      	ldr	r3, [pc, #104]	; (8000e14 <MX_TIM2_Init+0xb0>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000db0:	4818      	ldr	r0, [pc, #96]	; (8000e14 <MX_TIM2_Init+0xb0>)
 8000db2:	f007 facd 	bl	8008350 <HAL_TIM_PWM_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000dbc:	f001 f848 	bl	8001e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dc8:	f107 031c 	add.w	r3, r7, #28
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4811      	ldr	r0, [pc, #68]	; (8000e14 <MX_TIM2_Init+0xb0>)
 8000dd0:	f008 fbc6 	bl	8009560 <HAL_TIMEx_MasterConfigSynchronization>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000dda:	f001 f839 	bl	8001e50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dde:	2360      	movs	r3, #96	; 0x60
 8000de0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000de6:	2300      	movs	r3, #0
 8000de8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dee:	463b      	mov	r3, r7
 8000df0:	2200      	movs	r2, #0
 8000df2:	4619      	mov	r1, r3
 8000df4:	4807      	ldr	r0, [pc, #28]	; (8000e14 <MX_TIM2_Init+0xb0>)
 8000df6:	f007 fd3f 	bl	8008878 <HAL_TIM_PWM_ConfigChannel>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000e00:	f001 f826 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e04:	4803      	ldr	r0, [pc, #12]	; (8000e14 <MX_TIM2_Init+0xb0>)
 8000e06:	f001 fa65 	bl	80022d4 <HAL_TIM_MspPostInit>

}
 8000e0a:	bf00      	nop
 8000e0c:	3728      	adds	r7, #40	; 0x28
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	24000270 	.word	0x24000270

08000e18 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b088      	sub	sp, #32
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e1e:	f107 0310 	add.w	r3, r7, #16
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]
 8000e2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e2c:	1d3b      	adds	r3, r7, #4
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e36:	4b1d      	ldr	r3, [pc, #116]	; (8000eac <MX_TIM3_Init+0x94>)
 8000e38:	4a1d      	ldr	r2, [pc, #116]	; (8000eb0 <MX_TIM3_Init+0x98>)
 8000e3a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8000e3c:	4b1b      	ldr	r3, [pc, #108]	; (8000eac <MX_TIM3_Init+0x94>)
 8000e3e:	2253      	movs	r2, #83	; 0x53
 8000e40:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e42:	4b1a      	ldr	r3, [pc, #104]	; (8000eac <MX_TIM3_Init+0x94>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 8000e48:	4b18      	ldr	r3, [pc, #96]	; (8000eac <MX_TIM3_Init+0x94>)
 8000e4a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000e4e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e50:	4b16      	ldr	r3, [pc, #88]	; (8000eac <MX_TIM3_Init+0x94>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e56:	4b15      	ldr	r3, [pc, #84]	; (8000eac <MX_TIM3_Init+0x94>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e5c:	4813      	ldr	r0, [pc, #76]	; (8000eac <MX_TIM3_Init+0x94>)
 8000e5e:	f007 f999 	bl	8008194 <HAL_TIM_Base_Init>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000e68:	f000 fff2 	bl	8001e50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e70:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e72:	f107 0310 	add.w	r3, r7, #16
 8000e76:	4619      	mov	r1, r3
 8000e78:	480c      	ldr	r0, [pc, #48]	; (8000eac <MX_TIM3_Init+0x94>)
 8000e7a:	f007 fe11 	bl	8008aa0 <HAL_TIM_ConfigClockSource>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000e84:	f000 ffe4 	bl	8001e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e90:	1d3b      	adds	r3, r7, #4
 8000e92:	4619      	mov	r1, r3
 8000e94:	4805      	ldr	r0, [pc, #20]	; (8000eac <MX_TIM3_Init+0x94>)
 8000e96:	f008 fb63 	bl	8009560 <HAL_TIMEx_MasterConfigSynchronization>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000ea0:	f000 ffd6 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ea4:	bf00      	nop
 8000ea6:	3720      	adds	r7, #32
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	240002bc 	.word	0x240002bc
 8000eb0:	40000400 	.word	0x40000400

08000eb4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b088      	sub	sp, #32
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eba:	f107 0310 	add.w	r3, r7, #16
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	609a      	str	r2, [r3, #8]
 8000ec6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec8:	1d3b      	adds	r3, r7, #4
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ed2:	4b1d      	ldr	r3, [pc, #116]	; (8000f48 <MX_TIM4_Init+0x94>)
 8000ed4:	4a1d      	ldr	r2, [pc, #116]	; (8000f4c <MX_TIM4_Init+0x98>)
 8000ed6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8000ed8:	4b1b      	ldr	r3, [pc, #108]	; (8000f48 <MX_TIM4_Init+0x94>)
 8000eda:	2253      	movs	r2, #83	; 0x53
 8000edc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ede:	4b1a      	ldr	r3, [pc, #104]	; (8000f48 <MX_TIM4_Init+0x94>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000ee4:	4b18      	ldr	r3, [pc, #96]	; (8000f48 <MX_TIM4_Init+0x94>)
 8000ee6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000eea:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eec:	4b16      	ldr	r3, [pc, #88]	; (8000f48 <MX_TIM4_Init+0x94>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ef2:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <MX_TIM4_Init+0x94>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000ef8:	4813      	ldr	r0, [pc, #76]	; (8000f48 <MX_TIM4_Init+0x94>)
 8000efa:	f007 f94b 	bl	8008194 <HAL_TIM_Base_Init>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000f04:	f000 ffa4 	bl	8001e50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f0c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000f0e:	f107 0310 	add.w	r3, r7, #16
 8000f12:	4619      	mov	r1, r3
 8000f14:	480c      	ldr	r0, [pc, #48]	; (8000f48 <MX_TIM4_Init+0x94>)
 8000f16:	f007 fdc3 	bl	8008aa0 <HAL_TIM_ConfigClockSource>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000f20:	f000 ff96 	bl	8001e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f24:	2300      	movs	r3, #0
 8000f26:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f2c:	1d3b      	adds	r3, r7, #4
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4805      	ldr	r0, [pc, #20]	; (8000f48 <MX_TIM4_Init+0x94>)
 8000f32:	f008 fb15 	bl	8009560 <HAL_TIMEx_MasterConfigSynchronization>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000f3c:	f000 ff88 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000f40:	bf00      	nop
 8000f42:	3720      	adds	r7, #32
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	24000308 	.word	0x24000308
 8000f4c:	40000800 	.word	0x40000800

08000f50 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b088      	sub	sp, #32
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f56:	f107 0310 	add.w	r3, r7, #16
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]
 8000f60:	609a      	str	r2, [r3, #8]
 8000f62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f64:	1d3b      	adds	r3, r7, #4
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	605a      	str	r2, [r3, #4]
 8000f6c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f6e:	4b1d      	ldr	r3, [pc, #116]	; (8000fe4 <MX_TIM5_Init+0x94>)
 8000f70:	4a1d      	ldr	r2, [pc, #116]	; (8000fe8 <MX_TIM5_Init+0x98>)
 8000f72:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8000f74:	4b1b      	ldr	r3, [pc, #108]	; (8000fe4 <MX_TIM5_Init+0x94>)
 8000f76:	2253      	movs	r2, #83	; 0x53
 8000f78:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f7a:	4b1a      	ldr	r3, [pc, #104]	; (8000fe4 <MX_TIM5_Init+0x94>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8000f80:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <MX_TIM5_Init+0x94>)
 8000f82:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f86:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f88:	4b16      	ldr	r3, [pc, #88]	; (8000fe4 <MX_TIM5_Init+0x94>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f8e:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <MX_TIM5_Init+0x94>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000f94:	4813      	ldr	r0, [pc, #76]	; (8000fe4 <MX_TIM5_Init+0x94>)
 8000f96:	f007 f8fd 	bl	8008194 <HAL_TIM_Base_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000fa0:	f000 ff56 	bl	8001e50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fa8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000faa:	f107 0310 	add.w	r3, r7, #16
 8000fae:	4619      	mov	r1, r3
 8000fb0:	480c      	ldr	r0, [pc, #48]	; (8000fe4 <MX_TIM5_Init+0x94>)
 8000fb2:	f007 fd75 	bl	8008aa0 <HAL_TIM_ConfigClockSource>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000fbc:	f000 ff48 	bl	8001e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000fc8:	1d3b      	adds	r3, r7, #4
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4805      	ldr	r0, [pc, #20]	; (8000fe4 <MX_TIM5_Init+0x94>)
 8000fce:	f008 fac7 	bl	8009560 <HAL_TIMEx_MasterConfigSynchronization>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000fd8:	f000 ff3a 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000fdc:	bf00      	nop
 8000fde:	3720      	adds	r7, #32
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	24000354 	.word	0x24000354
 8000fe8:	40000c00 	.word	0x40000c00

08000fec <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b098      	sub	sp, #96	; 0x60
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ffe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	60da      	str	r2, [r3, #12]
 800100c:	611a      	str	r2, [r3, #16]
 800100e:	615a      	str	r2, [r3, #20]
 8001010:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001012:	1d3b      	adds	r3, r7, #4
 8001014:	2234      	movs	r2, #52	; 0x34
 8001016:	2100      	movs	r1, #0
 8001018:	4618      	mov	r0, r3
 800101a:	f00a fa5d 	bl	800b4d8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800101e:	4b39      	ldr	r3, [pc, #228]	; (8001104 <MX_TIM8_Init+0x118>)
 8001020:	4a39      	ldr	r2, [pc, #228]	; (8001108 <MX_TIM8_Init+0x11c>)
 8001022:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 83;
 8001024:	4b37      	ldr	r3, [pc, #220]	; (8001104 <MX_TIM8_Init+0x118>)
 8001026:	2253      	movs	r2, #83	; 0x53
 8001028:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800102a:	4b36      	ldr	r3, [pc, #216]	; (8001104 <MX_TIM8_Init+0x118>)
 800102c:	2200      	movs	r2, #0
 800102e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 8001030:	4b34      	ldr	r3, [pc, #208]	; (8001104 <MX_TIM8_Init+0x118>)
 8001032:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001036:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001038:	4b32      	ldr	r3, [pc, #200]	; (8001104 <MX_TIM8_Init+0x118>)
 800103a:	2200      	movs	r2, #0
 800103c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800103e:	4b31      	ldr	r3, [pc, #196]	; (8001104 <MX_TIM8_Init+0x118>)
 8001040:	2200      	movs	r2, #0
 8001042:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001044:	4b2f      	ldr	r3, [pc, #188]	; (8001104 <MX_TIM8_Init+0x118>)
 8001046:	2200      	movs	r2, #0
 8001048:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800104a:	482e      	ldr	r0, [pc, #184]	; (8001104 <MX_TIM8_Init+0x118>)
 800104c:	f007 f980 	bl	8008350 <HAL_TIM_PWM_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8001056:	f000 fefb 	bl	8001e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800105a:	2300      	movs	r3, #0
 800105c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800105e:	2300      	movs	r3, #0
 8001060:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001062:	2300      	movs	r3, #0
 8001064:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001066:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800106a:	4619      	mov	r1, r3
 800106c:	4825      	ldr	r0, [pc, #148]	; (8001104 <MX_TIM8_Init+0x118>)
 800106e:	f008 fa77 	bl	8009560 <HAL_TIMEx_MasterConfigSynchronization>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001078:	f000 feea 	bl	8001e50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800107c:	2360      	movs	r3, #96	; 0x60
 800107e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001080:	2300      	movs	r3, #0
 8001082:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001084:	2300      	movs	r3, #0
 8001086:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001088:	2300      	movs	r3, #0
 800108a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800108c:	2300      	movs	r3, #0
 800108e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001090:	2300      	movs	r3, #0
 8001092:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001094:	2300      	movs	r3, #0
 8001096:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001098:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800109c:	2200      	movs	r2, #0
 800109e:	4619      	mov	r1, r3
 80010a0:	4818      	ldr	r0, [pc, #96]	; (8001104 <MX_TIM8_Init+0x118>)
 80010a2:	f007 fbe9 	bl	8008878 <HAL_TIM_PWM_ConfigChannel>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80010ac:	f000 fed0 	bl	8001e50 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010b0:	2300      	movs	r3, #0
 80010b2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010b4:	2300      	movs	r3, #0
 80010b6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010b8:	2300      	movs	r3, #0
 80010ba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010c8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010ce:	2300      	movs	r3, #0
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010d6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010dc:	2300      	movs	r3, #0
 80010de:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80010e0:	1d3b      	adds	r3, r7, #4
 80010e2:	4619      	mov	r1, r3
 80010e4:	4807      	ldr	r0, [pc, #28]	; (8001104 <MX_TIM8_Init+0x118>)
 80010e6:	f008 fad7 	bl	8009698 <HAL_TIMEx_ConfigBreakDeadTime>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 80010f0:	f000 feae 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80010f4:	4803      	ldr	r0, [pc, #12]	; (8001104 <MX_TIM8_Init+0x118>)
 80010f6:	f001 f8ed 	bl	80022d4 <HAL_TIM_MspPostInit>

}
 80010fa:	bf00      	nop
 80010fc:	3760      	adds	r7, #96	; 0x60
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	240003a0 	.word	0x240003a0
 8001108:	40010400 	.word	0x40010400

0800110c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001112:	463b      	mov	r3, r7
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800111e:	4b16      	ldr	r3, [pc, #88]	; (8001178 <MX_TIM12_Init+0x6c>)
 8001120:	4a16      	ldr	r2, [pc, #88]	; (800117c <MX_TIM12_Init+0x70>)
 8001122:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 83;
 8001124:	4b14      	ldr	r3, [pc, #80]	; (8001178 <MX_TIM12_Init+0x6c>)
 8001126:	2253      	movs	r2, #83	; 0x53
 8001128:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800112a:	4b13      	ldr	r3, [pc, #76]	; (8001178 <MX_TIM12_Init+0x6c>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 49999;
 8001130:	4b11      	ldr	r3, [pc, #68]	; (8001178 <MX_TIM12_Init+0x6c>)
 8001132:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001136:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001138:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <MX_TIM12_Init+0x6c>)
 800113a:	2200      	movs	r2, #0
 800113c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800113e:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <MX_TIM12_Init+0x6c>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001144:	480c      	ldr	r0, [pc, #48]	; (8001178 <MX_TIM12_Init+0x6c>)
 8001146:	f007 f825 	bl	8008194 <HAL_TIM_Base_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 8001150:	f000 fe7e 	bl	8001e50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001154:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001158:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800115a:	463b      	mov	r3, r7
 800115c:	4619      	mov	r1, r3
 800115e:	4806      	ldr	r0, [pc, #24]	; (8001178 <MX_TIM12_Init+0x6c>)
 8001160:	f007 fc9e 	bl	8008aa0 <HAL_TIM_ConfigClockSource>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 800116a:	f000 fe71 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 800116e:	bf00      	nop
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	240003ec 	.word	0x240003ec
 800117c:	40001800 	.word	0x40001800

08001180 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b088      	sub	sp, #32
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001186:	f107 0310 	add.w	r3, r7, #16
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]
 8001190:	609a      	str	r2, [r3, #8]
 8001192:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800119e:	4b1f      	ldr	r3, [pc, #124]	; (800121c <MX_TIM15_Init+0x9c>)
 80011a0:	4a1f      	ldr	r2, [pc, #124]	; (8001220 <MX_TIM15_Init+0xa0>)
 80011a2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 83;
 80011a4:	4b1d      	ldr	r3, [pc, #116]	; (800121c <MX_TIM15_Init+0x9c>)
 80011a6:	2253      	movs	r2, #83	; 0x53
 80011a8:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011aa:	4b1c      	ldr	r3, [pc, #112]	; (800121c <MX_TIM15_Init+0x9c>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1999;
 80011b0:	4b1a      	ldr	r3, [pc, #104]	; (800121c <MX_TIM15_Init+0x9c>)
 80011b2:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80011b6:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b8:	4b18      	ldr	r3, [pc, #96]	; (800121c <MX_TIM15_Init+0x9c>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80011be:	4b17      	ldr	r3, [pc, #92]	; (800121c <MX_TIM15_Init+0x9c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c4:	4b15      	ldr	r3, [pc, #84]	; (800121c <MX_TIM15_Init+0x9c>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80011ca:	4814      	ldr	r0, [pc, #80]	; (800121c <MX_TIM15_Init+0x9c>)
 80011cc:	f006 ffe2 	bl	8008194 <HAL_TIM_Base_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 80011d6:	f000 fe3b 	bl	8001e50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80011e0:	f107 0310 	add.w	r3, r7, #16
 80011e4:	4619      	mov	r1, r3
 80011e6:	480d      	ldr	r0, [pc, #52]	; (800121c <MX_TIM15_Init+0x9c>)
 80011e8:	f007 fc5a 	bl	8008aa0 <HAL_TIM_ConfigClockSource>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 80011f2:	f000 fe2d 	bl	8001e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011f6:	2300      	movs	r3, #0
 80011f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011fa:	2300      	movs	r3, #0
 80011fc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80011fe:	1d3b      	adds	r3, r7, #4
 8001200:	4619      	mov	r1, r3
 8001202:	4806      	ldr	r0, [pc, #24]	; (800121c <MX_TIM15_Init+0x9c>)
 8001204:	f008 f9ac 	bl	8009560 <HAL_TIMEx_MasterConfigSynchronization>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 800120e:	f000 fe1f 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001212:	bf00      	nop
 8001214:	3720      	adds	r7, #32
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	24000438 	.word	0x24000438
 8001220:	40014000 	.word	0x40014000

08001224 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08a      	sub	sp, #40	; 0x28
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800122a:	f107 031c 	add.w	r3, r7, #28
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001236:	463b      	mov	r3, r7
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
 8001244:	615a      	str	r2, [r3, #20]
 8001246:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8001248:	4b21      	ldr	r3, [pc, #132]	; (80012d0 <MX_TIM23_Init+0xac>)
 800124a:	4a22      	ldr	r2, [pc, #136]	; (80012d4 <MX_TIM23_Init+0xb0>)
 800124c:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 83;
 800124e:	4b20      	ldr	r3, [pc, #128]	; (80012d0 <MX_TIM23_Init+0xac>)
 8001250:	2253      	movs	r2, #83	; 0x53
 8001252:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001254:	4b1e      	ldr	r3, [pc, #120]	; (80012d0 <MX_TIM23_Init+0xac>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 19999;
 800125a:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <MX_TIM23_Init+0xac>)
 800125c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001260:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001262:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <MX_TIM23_Init+0xac>)
 8001264:	2200      	movs	r2, #0
 8001266:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001268:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <MX_TIM23_Init+0xac>)
 800126a:	2200      	movs	r2, #0
 800126c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim23) != HAL_OK)
 800126e:	4818      	ldr	r0, [pc, #96]	; (80012d0 <MX_TIM23_Init+0xac>)
 8001270:	f007 f86e 	bl	8008350 <HAL_TIM_PWM_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_TIM23_Init+0x5a>
  {
    Error_Handler();
 800127a:	f000 fde9 	bl	8001e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800127e:	2300      	movs	r3, #0
 8001280:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001282:	2300      	movs	r3, #0
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8001286:	f107 031c 	add.w	r3, r7, #28
 800128a:	4619      	mov	r1, r3
 800128c:	4810      	ldr	r0, [pc, #64]	; (80012d0 <MX_TIM23_Init+0xac>)
 800128e:	f008 f967 	bl	8009560 <HAL_TIMEx_MasterConfigSynchronization>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_TIM23_Init+0x78>
  {
    Error_Handler();
 8001298:	f000 fdda 	bl	8001e50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800129c:	2360      	movs	r3, #96	; 0x60
 800129e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012a4:	2300      	movs	r3, #0
 80012a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012a8:	2300      	movs	r3, #0
 80012aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012ac:	463b      	mov	r3, r7
 80012ae:	2200      	movs	r2, #0
 80012b0:	4619      	mov	r1, r3
 80012b2:	4807      	ldr	r0, [pc, #28]	; (80012d0 <MX_TIM23_Init+0xac>)
 80012b4:	f007 fae0 	bl	8008878 <HAL_TIM_PWM_ConfigChannel>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM23_Init+0x9e>
  {
    Error_Handler();
 80012be:	f000 fdc7 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */
  HAL_TIM_MspPostInit(&htim23);
 80012c2:	4803      	ldr	r0, [pc, #12]	; (80012d0 <MX_TIM23_Init+0xac>)
 80012c4:	f001 f806 	bl	80022d4 <HAL_TIM_MspPostInit>

}
 80012c8:	bf00      	nop
 80012ca:	3728      	adds	r7, #40	; 0x28
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	24000484 	.word	0x24000484
 80012d4:	4000e000 	.word	0x4000e000

080012d8 <MX_TIM24_Init>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012de:	f107 0310 	add.w	r3, r7, #16
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ec:	1d3b      	adds	r3, r7, #4
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 80012f6:	4b1d      	ldr	r3, [pc, #116]	; (800136c <MX_TIM24_Init+0x94>)
 80012f8:	4a1d      	ldr	r2, [pc, #116]	; (8001370 <MX_TIM24_Init+0x98>)
 80012fa:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 83;
 80012fc:	4b1b      	ldr	r3, [pc, #108]	; (800136c <MX_TIM24_Init+0x94>)
 80012fe:	2253      	movs	r2, #83	; 0x53
 8001300:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001302:	4b1a      	ldr	r3, [pc, #104]	; (800136c <MX_TIM24_Init+0x94>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 999;
 8001308:	4b18      	ldr	r3, [pc, #96]	; (800136c <MX_TIM24_Init+0x94>)
 800130a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800130e:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001310:	4b16      	ldr	r3, [pc, #88]	; (800136c <MX_TIM24_Init+0x94>)
 8001312:	2200      	movs	r2, #0
 8001314:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <MX_TIM24_Init+0x94>)
 8001318:	2200      	movs	r2, #0
 800131a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim24) != HAL_OK)
 800131c:	4813      	ldr	r0, [pc, #76]	; (800136c <MX_TIM24_Init+0x94>)
 800131e:	f006 ff39 	bl	8008194 <HAL_TIM_Base_Init>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_TIM24_Init+0x54>
  {
    Error_Handler();
 8001328:	f000 fd92 	bl	8001e50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800132c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001330:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim24, &sClockSourceConfig) != HAL_OK)
 8001332:	f107 0310 	add.w	r3, r7, #16
 8001336:	4619      	mov	r1, r3
 8001338:	480c      	ldr	r0, [pc, #48]	; (800136c <MX_TIM24_Init+0x94>)
 800133a:	f007 fbb1 	bl	8008aa0 <HAL_TIM_ConfigClockSource>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM24_Init+0x70>
  {
    Error_Handler();
 8001344:	f000 fd84 	bl	8001e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001348:	2300      	movs	r3, #0
 800134a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800134c:	2300      	movs	r3, #0
 800134e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 8001350:	1d3b      	adds	r3, r7, #4
 8001352:	4619      	mov	r1, r3
 8001354:	4805      	ldr	r0, [pc, #20]	; (800136c <MX_TIM24_Init+0x94>)
 8001356:	f008 f903 	bl	8009560 <HAL_TIMEx_MasterConfigSynchronization>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM24_Init+0x8c>
  {
    Error_Handler();
 8001360:	f000 fd76 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 8001364:	bf00      	nop
 8001366:	3720      	adds	r7, #32
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	240004d0 	.word	0x240004d0
 8001370:	4000e400 	.word	0x4000e400

08001374 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001378:	4b22      	ldr	r3, [pc, #136]	; (8001404 <MX_USART3_UART_Init+0x90>)
 800137a:	4a23      	ldr	r2, [pc, #140]	; (8001408 <MX_USART3_UART_Init+0x94>)
 800137c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800137e:	4b21      	ldr	r3, [pc, #132]	; (8001404 <MX_USART3_UART_Init+0x90>)
 8001380:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001384:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001386:	4b1f      	ldr	r3, [pc, #124]	; (8001404 <MX_USART3_UART_Init+0x90>)
 8001388:	2200      	movs	r2, #0
 800138a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800138c:	4b1d      	ldr	r3, [pc, #116]	; (8001404 <MX_USART3_UART_Init+0x90>)
 800138e:	2200      	movs	r2, #0
 8001390:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001392:	4b1c      	ldr	r3, [pc, #112]	; (8001404 <MX_USART3_UART_Init+0x90>)
 8001394:	2200      	movs	r2, #0
 8001396:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001398:	4b1a      	ldr	r3, [pc, #104]	; (8001404 <MX_USART3_UART_Init+0x90>)
 800139a:	220c      	movs	r2, #12
 800139c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800139e:	4b19      	ldr	r3, [pc, #100]	; (8001404 <MX_USART3_UART_Init+0x90>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a4:	4b17      	ldr	r3, [pc, #92]	; (8001404 <MX_USART3_UART_Init+0x90>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013aa:	4b16      	ldr	r3, [pc, #88]	; (8001404 <MX_USART3_UART_Init+0x90>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013b0:	4b14      	ldr	r3, [pc, #80]	; (8001404 <MX_USART3_UART_Init+0x90>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013b6:	4b13      	ldr	r3, [pc, #76]	; (8001404 <MX_USART3_UART_Init+0x90>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013bc:	4811      	ldr	r0, [pc, #68]	; (8001404 <MX_USART3_UART_Init+0x90>)
 80013be:	f008 fa29 	bl	8009814 <HAL_UART_Init>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80013c8:	f000 fd42 	bl	8001e50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013cc:	2100      	movs	r1, #0
 80013ce:	480d      	ldr	r0, [pc, #52]	; (8001404 <MX_USART3_UART_Init+0x90>)
 80013d0:	f009 ff4e 	bl	800b270 <HAL_UARTEx_SetTxFifoThreshold>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80013da:	f000 fd39 	bl	8001e50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013de:	2100      	movs	r1, #0
 80013e0:	4808      	ldr	r0, [pc, #32]	; (8001404 <MX_USART3_UART_Init+0x90>)
 80013e2:	f009 ff83 	bl	800b2ec <HAL_UARTEx_SetRxFifoThreshold>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80013ec:	f000 fd30 	bl	8001e50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80013f0:	4804      	ldr	r0, [pc, #16]	; (8001404 <MX_USART3_UART_Init+0x90>)
 80013f2:	f009 ff04 	bl	800b1fe <HAL_UARTEx_DisableFifoMode>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80013fc:	f000 fd28 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001400:	bf00      	nop
 8001402:	bd80      	pop	{r7, pc}
 8001404:	2400051c 	.word	0x2400051c
 8001408:	40004800 	.word	0x40004800

0800140c <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
	...

0800141c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001422:	4b11      	ldr	r3, [pc, #68]	; (8001468 <MX_DMA_Init+0x4c>)
 8001424:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001428:	4a0f      	ldr	r2, [pc, #60]	; (8001468 <MX_DMA_Init+0x4c>)
 800142a:	f043 0301 	orr.w	r3, r3, #1
 800142e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001432:	4b0d      	ldr	r3, [pc, #52]	; (8001468 <MX_DMA_Init+0x4c>)
 8001434:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001438:	f003 0301 	and.w	r3, r3, #1
 800143c:	607b      	str	r3, [r7, #4]
 800143e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001440:	2200      	movs	r2, #0
 8001442:	2100      	movs	r1, #0
 8001444:	200b      	movs	r0, #11
 8001446:	f001 fb9e 	bl	8002b86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800144a:	200b      	movs	r0, #11
 800144c:	f001 fbb5 	bl	8002bba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001450:	2200      	movs	r2, #0
 8001452:	2100      	movs	r1, #0
 8001454:	200c      	movs	r0, #12
 8001456:	f001 fb96 	bl	8002b86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800145a:	200c      	movs	r0, #12
 800145c:	f001 fbad 	bl	8002bba <HAL_NVIC_EnableIRQ>

}
 8001460:	bf00      	nop
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	58024400 	.word	0x58024400

0800146c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08e      	sub	sp, #56	; 0x38
 8001470:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001472:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	609a      	str	r2, [r3, #8]
 800147e:	60da      	str	r2, [r3, #12]
 8001480:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001482:	4b9d      	ldr	r3, [pc, #628]	; (80016f8 <MX_GPIO_Init+0x28c>)
 8001484:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001488:	4a9b      	ldr	r2, [pc, #620]	; (80016f8 <MX_GPIO_Init+0x28c>)
 800148a:	f043 0310 	orr.w	r3, r3, #16
 800148e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001492:	4b99      	ldr	r3, [pc, #612]	; (80016f8 <MX_GPIO_Init+0x28c>)
 8001494:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001498:	f003 0310 	and.w	r3, r3, #16
 800149c:	623b      	str	r3, [r7, #32]
 800149e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a0:	4b95      	ldr	r3, [pc, #596]	; (80016f8 <MX_GPIO_Init+0x28c>)
 80014a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a6:	4a94      	ldr	r2, [pc, #592]	; (80016f8 <MX_GPIO_Init+0x28c>)
 80014a8:	f043 0304 	orr.w	r3, r3, #4
 80014ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014b0:	4b91      	ldr	r3, [pc, #580]	; (80016f8 <MX_GPIO_Init+0x28c>)
 80014b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b6:	f003 0304 	and.w	r3, r3, #4
 80014ba:	61fb      	str	r3, [r7, #28]
 80014bc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014be:	4b8e      	ldr	r3, [pc, #568]	; (80016f8 <MX_GPIO_Init+0x28c>)
 80014c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c4:	4a8c      	ldr	r2, [pc, #560]	; (80016f8 <MX_GPIO_Init+0x28c>)
 80014c6:	f043 0320 	orr.w	r3, r3, #32
 80014ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014ce:	4b8a      	ldr	r3, [pc, #552]	; (80016f8 <MX_GPIO_Init+0x28c>)
 80014d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d4:	f003 0320 	and.w	r3, r3, #32
 80014d8:	61bb      	str	r3, [r7, #24]
 80014da:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014dc:	4b86      	ldr	r3, [pc, #536]	; (80016f8 <MX_GPIO_Init+0x28c>)
 80014de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e2:	4a85      	ldr	r2, [pc, #532]	; (80016f8 <MX_GPIO_Init+0x28c>)
 80014e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014ec:	4b82      	ldr	r3, [pc, #520]	; (80016f8 <MX_GPIO_Init+0x28c>)
 80014ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014f6:	617b      	str	r3, [r7, #20]
 80014f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fa:	4b7f      	ldr	r3, [pc, #508]	; (80016f8 <MX_GPIO_Init+0x28c>)
 80014fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001500:	4a7d      	ldr	r2, [pc, #500]	; (80016f8 <MX_GPIO_Init+0x28c>)
 8001502:	f043 0301 	orr.w	r3, r3, #1
 8001506:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800150a:	4b7b      	ldr	r3, [pc, #492]	; (80016f8 <MX_GPIO_Init+0x28c>)
 800150c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001510:	f003 0301 	and.w	r3, r3, #1
 8001514:	613b      	str	r3, [r7, #16]
 8001516:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001518:	4b77      	ldr	r3, [pc, #476]	; (80016f8 <MX_GPIO_Init+0x28c>)
 800151a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800151e:	4a76      	ldr	r2, [pc, #472]	; (80016f8 <MX_GPIO_Init+0x28c>)
 8001520:	f043 0302 	orr.w	r3, r3, #2
 8001524:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001528:	4b73      	ldr	r3, [pc, #460]	; (80016f8 <MX_GPIO_Init+0x28c>)
 800152a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001536:	4b70      	ldr	r3, [pc, #448]	; (80016f8 <MX_GPIO_Init+0x28c>)
 8001538:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800153c:	4a6e      	ldr	r2, [pc, #440]	; (80016f8 <MX_GPIO_Init+0x28c>)
 800153e:	f043 0308 	orr.w	r3, r3, #8
 8001542:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001546:	4b6c      	ldr	r3, [pc, #432]	; (80016f8 <MX_GPIO_Init+0x28c>)
 8001548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800154c:	f003 0308 	and.w	r3, r3, #8
 8001550:	60bb      	str	r3, [r7, #8]
 8001552:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001554:	4b68      	ldr	r3, [pc, #416]	; (80016f8 <MX_GPIO_Init+0x28c>)
 8001556:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800155a:	4a67      	ldr	r2, [pc, #412]	; (80016f8 <MX_GPIO_Init+0x28c>)
 800155c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001560:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001564:	4b64      	ldr	r3, [pc, #400]	; (80016f8 <MX_GPIO_Init+0x28c>)
 8001566:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800156a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|LED_YELLOW_Pin, GPIO_PIN_RESET);
 8001572:	2200      	movs	r2, #0
 8001574:	2106      	movs	r1, #6
 8001576:	4861      	ldr	r0, [pc, #388]	; (80016fc <MX_GPIO_Init+0x290>)
 8001578:	f004 fb2e 	bl	8005bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 800157c:	2200      	movs	r2, #0
 800157e:	f244 0101 	movw	r1, #16385	; 0x4001
 8001582:	485f      	ldr	r0, [pc, #380]	; (8001700 <MX_GPIO_Init+0x294>)
 8001584:	f004 fb28 	bl	8005bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_FS_PWR_EN_Pin|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001588:	2200      	movs	r2, #0
 800158a:	f643 4104 	movw	r1, #15364	; 0x3c04
 800158e:	485d      	ldr	r0, [pc, #372]	; (8001704 <MX_GPIO_Init+0x298>)
 8001590:	f004 fb22 	bl	8005bd8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_2, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_RESET);
 8001594:	2200      	movs	r2, #0
 8001596:	2104      	movs	r1, #4
 8001598:	485b      	ldr	r0, [pc, #364]	; (8001708 <MX_GPIO_Init+0x29c>)
 800159a:	f004 fb1d 	bl	8005bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800159e:	2200      	movs	r2, #0
 80015a0:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 80015a4:	4859      	ldr	r0, [pc, #356]	; (800170c <MX_GPIO_Init+0x2a0>)
 80015a6:	f004 fb17 	bl	8005bd8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|LED_YELLOW_Pin;
 80015aa:	2306      	movs	r3, #6
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ae:	2301      	movs	r3, #1
 80015b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b6:	2300      	movs	r3, #0
 80015b8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015be:	4619      	mov	r1, r3
 80015c0:	484e      	ldr	r0, [pc, #312]	; (80016fc <MX_GPIO_Init+0x290>)
 80015c2:	f004 f961 	bl	8005888 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015c6:	2340      	movs	r3, #64	; 0x40
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015ca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d8:	4619      	mov	r1, r3
 80015da:	4848      	ldr	r0, [pc, #288]	; (80016fc <MX_GPIO_Init+0x290>)
 80015dc:	f004 f954 	bl	8005888 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e6:	2300      	movs	r3, #0
 80015e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f2:	4619      	mov	r1, r3
 80015f4:	4845      	ldr	r0, [pc, #276]	; (800170c <MX_GPIO_Init+0x2a0>)
 80015f6:	f004 f947 	bl	8005888 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 80015fa:	f244 0301 	movw	r3, #16385	; 0x4001
 80015fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001600:	2301      	movs	r3, #1
 8001602:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001608:	2300      	movs	r3, #0
 800160a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001610:	4619      	mov	r1, r3
 8001612:	483b      	ldr	r0, [pc, #236]	; (8001700 <MX_GPIO_Init+0x294>)
 8001614:	f004 f938 	bl	8005888 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE10 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001618:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800161c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800161e:	2300      	movs	r3, #0
 8001620:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001626:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800162a:	4619      	mov	r1, r3
 800162c:	4833      	ldr	r0, [pc, #204]	; (80016fc <MX_GPIO_Init+0x290>)
 800162e:	f004 f92b 	bl	8005888 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_PWR_EN_Pin PD11 PD12 PD13
                           PD2 */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001632:	f643 4304 	movw	r3, #15364	; 0x3c04
 8001636:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001638:	2301      	movs	r3, #1
 800163a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001640:	2300      	movs	r3, #0
 8001642:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001644:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001648:	4619      	mov	r1, r3
 800164a:	482e      	ldr	r0, [pc, #184]	; (8001704 <MX_GPIO_Init+0x298>)
 800164c:	f004 f91c 	bl	8005888 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001650:	2304      	movs	r3, #4
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001654:	2301      	movs	r3, #1
 8001656:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165c:	2300      	movs	r3, #0
 800165e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001660:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001664:	4619      	mov	r1, r3
 8001666:	4828      	ldr	r0, [pc, #160]	; (8001708 <MX_GPIO_Init+0x29c>)
 8001668:	f004 f90e 	bl	8005888 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 800166c:	2380      	movs	r3, #128	; 0x80
 800166e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001670:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001674:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800167a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167e:	4619      	mov	r1, r3
 8001680:	4821      	ldr	r0, [pc, #132]	; (8001708 <MX_GPIO_Init+0x29c>)
 8001682:	f004 f901 	bl	8005888 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001686:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800168a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168c:	2301      	movs	r3, #1
 800168e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001694:	2300      	movs	r3, #0
 8001696:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001698:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800169c:	4619      	mov	r1, r3
 800169e:	481b      	ldr	r0, [pc, #108]	; (800170c <MX_GPIO_Init+0x2a0>)
 80016a0:	f004 f8f2 	bl	8005888 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80016a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016aa:	2300      	movs	r3, #0
 80016ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80016b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b6:	4619      	mov	r1, r3
 80016b8:	4815      	ldr	r0, [pc, #84]	; (8001710 <MX_GPIO_Init+0x2a4>)
 80016ba:	f004 f8e5 	bl	8005888 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80016be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c4:	2302      	movs	r3, #2
 80016c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016cc:	2300      	movs	r3, #0
 80016ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80016d0:	230a      	movs	r3, #10
 80016d2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80016d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016d8:	4619      	mov	r1, r3
 80016da:	480d      	ldr	r0, [pc, #52]	; (8001710 <MX_GPIO_Init+0x2a4>)
 80016dc:	f004 f8d4 	bl	8005888 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80016e0:	2200      	movs	r2, #0
 80016e2:	2100      	movs	r1, #0
 80016e4:	2017      	movs	r0, #23
 80016e6:	f001 fa4e 	bl	8002b86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80016ea:	2017      	movs	r0, #23
 80016ec:	f001 fa65 	bl	8002bba <HAL_NVIC_EnableIRQ>

}
 80016f0:	bf00      	nop
 80016f2:	3738      	adds	r7, #56	; 0x38
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	58024400 	.word	0x58024400
 80016fc:	58021000 	.word	0x58021000
 8001700:	58020400 	.word	0x58020400
 8001704:	58020c00 	.word	0x58020c00
 8001708:	58021800 	.word	0x58021800
 800170c:	58020800 	.word	0x58020800
 8001710:	58020000 	.word	0x58020000

08001714 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_6)
 800171e:	88fb      	ldrh	r3, [r7, #6]
 8001720:	2b40      	cmp	r3, #64	; 0x40
 8001722:	d101      	bne.n	8001728 <HAL_GPIO_EXTI_Callback+0x14>
	{
		HAL_NVIC_SystemReset();
 8001724:	f001 fa57 	bl	8002bd6 <HAL_NVIC_SystemReset>
	}
}
 8001728:	bf00      	nop
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
	/*Stepper step control*/
	/*Stepper_1*/
	if(htim->Instance == TIM3)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4ab4      	ldr	r2, [pc, #720]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d128      	bne.n	8001794 <HAL_TIM_PeriodElapsedCallback+0x64>
	{
		/*STEP*/
		if(i < (fabs(angle_1)/1.8*8*2*ratio))
 8001742:	4bb4      	ldr	r3, [pc, #720]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	ee07 3a90 	vmov	s15, r3
 800174a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800174e:	4bb2      	ldr	r3, [pc, #712]	; (8001a18 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001750:	ed93 7b00 	vldr	d7, [r3]
 8001754:	eeb0 5bc7 	vabs.f64	d5, d7
 8001758:	ed9f 4bab 	vldr	d4, [pc, #684]	; 8001a08 <HAL_TIM_PeriodElapsedCallback+0x2d8>
 800175c:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8001760:	eeb2 5b00 	vmov.f64	d5, #32	; 0x41000000  8.0
 8001764:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001768:	ee37 5b07 	vadd.f64	d5, d7, d7
 800176c:	4bab      	ldr	r3, [pc, #684]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800176e:	ed93 7b00 	vldr	d7, [r3]
 8001772:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001776:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800177a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800177e:	d509      	bpl.n	8001794 <HAL_TIM_PeriodElapsedCallback+0x64>
		{
			HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_8);
 8001780:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001784:	48a6      	ldr	r0, [pc, #664]	; (8001a20 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001786:	f004 fa40 	bl	8005c0a <HAL_GPIO_TogglePin>
			i++;
 800178a:	4ba2      	ldr	r3, [pc, #648]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	3301      	adds	r3, #1
 8001790:	4aa0      	ldr	r2, [pc, #640]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001792:	6013      	str	r3, [r2, #0]
		}
	}
	/*Stepper_2*/
	if(htim->Instance == TIM15)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4aa2      	ldr	r2, [pc, #648]	; (8001a24 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d128      	bne.n	80017f0 <HAL_TIM_PeriodElapsedCallback+0xc0>
	{
		/*STEP*/
		if(j < (fabs(angle_2)/1.8*8*2*ratio))
 800179e:	4ba2      	ldr	r3, [pc, #648]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	ee07 3a90 	vmov	s15, r3
 80017a6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80017aa:	4ba0      	ldr	r3, [pc, #640]	; (8001a2c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80017ac:	ed93 7b00 	vldr	d7, [r3]
 80017b0:	eeb0 5bc7 	vabs.f64	d5, d7
 80017b4:	ed9f 4b94 	vldr	d4, [pc, #592]	; 8001a08 <HAL_TIM_PeriodElapsedCallback+0x2d8>
 80017b8:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80017bc:	eeb2 5b00 	vmov.f64	d5, #32	; 0x41000000  8.0
 80017c0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80017c4:	ee37 5b07 	vadd.f64	d5, d7, d7
 80017c8:	4b94      	ldr	r3, [pc, #592]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80017ca:	ed93 7b00 	vldr	d7, [r3]
 80017ce:	ee25 7b07 	vmul.f64	d7, d5, d7
 80017d2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80017d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017da:	d509      	bpl.n	80017f0 <HAL_TIM_PeriodElapsedCallback+0xc0>
		{
			HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_10);
 80017dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017e0:	488f      	ldr	r0, [pc, #572]	; (8001a20 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80017e2:	f004 fa12 	bl	8005c0a <HAL_GPIO_TogglePin>
			j++;
 80017e6:	4b90      	ldr	r3, [pc, #576]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	3301      	adds	r3, #1
 80017ec:	4a8e      	ldr	r2, [pc, #568]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80017ee:	6013      	str	r3, [r2, #0]
		}
	}
	/*Stepper_3*/
	if(htim->Instance == TIM1)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a8e      	ldr	r2, [pc, #568]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d128      	bne.n	800184c <HAL_TIM_PeriodElapsedCallback+0x11c>
	{
		/*STEP*/
		if(k < (fabs(angle_3)/1.8*8*2*ratio_3))
 80017fa:	4b8e      	ldr	r3, [pc, #568]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x304>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	ee07 3a90 	vmov	s15, r3
 8001802:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001806:	4b8c      	ldr	r3, [pc, #560]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001808:	ed93 7b00 	vldr	d7, [r3]
 800180c:	eeb0 5bc7 	vabs.f64	d5, d7
 8001810:	ed9f 4b7d 	vldr	d4, [pc, #500]	; 8001a08 <HAL_TIM_PeriodElapsedCallback+0x2d8>
 8001814:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8001818:	eeb2 5b00 	vmov.f64	d5, #32	; 0x41000000  8.0
 800181c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001820:	ee37 5b07 	vadd.f64	d5, d7, d7
 8001824:	4b85      	ldr	r3, [pc, #532]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8001826:	ed93 7b00 	vldr	d7, [r3]
 800182a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800182e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001836:	d509      	bpl.n	800184c <HAL_TIM_PeriodElapsedCallback+0x11c>
		{
			HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_12);
 8001838:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800183c:	4878      	ldr	r0, [pc, #480]	; (8001a20 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800183e:	f004 f9e4 	bl	8005c0a <HAL_GPIO_TogglePin>
			k++;
 8001842:	4b7c      	ldr	r3, [pc, #496]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	3301      	adds	r3, #1
 8001848:	4a7a      	ldr	r2, [pc, #488]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x304>)
 800184a:	6013      	str	r3, [r2, #0]
		}
	}
	/*Stepper velocity control*/
	/*Grab*/
	if(htim->Instance == TIM4)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a7b      	ldr	r2, [pc, #492]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8001852:	4293      	cmp	r3, r2
 8001854:	f040 80a2 	bne.w	800199c <HAL_TIM_PeriodElapsedCallback+0x26c>
	{
		/*Stepper_1*/
		if(i < (fabs(target_1-position_1)/1.8*8*2*ratio)*percent)
 8001858:	4b6e      	ldr	r3, [pc, #440]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	ee07 3a90 	vmov	s15, r3
 8001860:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001864:	4b77      	ldr	r3, [pc, #476]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8001866:	ed93 5b00 	vldr	d5, [r3]
 800186a:	4b77      	ldr	r3, [pc, #476]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800186c:	ed93 7b00 	vldr	d7, [r3]
 8001870:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001874:	eeb0 5bc7 	vabs.f64	d5, d7
 8001878:	ed9f 4b63 	vldr	d4, [pc, #396]	; 8001a08 <HAL_TIM_PeriodElapsedCallback+0x2d8>
 800187c:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8001880:	eeb2 5b00 	vmov.f64	d5, #32	; 0x41000000  8.0
 8001884:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001888:	ee37 5b07 	vadd.f64	d5, d7, d7
 800188c:	4b63      	ldr	r3, [pc, #396]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800188e:	ed93 7b00 	vldr	d7, [r3]
 8001892:	ee25 5b07 	vmul.f64	d5, d5, d7
 8001896:	4b6d      	ldr	r3, [pc, #436]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001898:	ed93 7b00 	vldr	d7, [r3]
 800189c:	ee25 7b07 	vmul.f64	d7, d5, d7
 80018a0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80018a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a8:	d51e      	bpl.n	80018e8 <HAL_TIM_PeriodElapsedCallback+0x1b8>
 		{
			if(ARR_1>max_speed_1)
 80018aa:	4b69      	ldr	r3, [pc, #420]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	4b69      	ldr	r3, [pc, #420]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	dd0e      	ble.n	80018d4 <HAL_TIM_PeriodElapsedCallback+0x1a4>
			{
				ARR_1-=5;
 80018b6:	4b66      	ldr	r3, [pc, #408]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	3b05      	subs	r3, #5
 80018bc:	4a64      	ldr	r2, [pc, #400]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80018be:	6013      	str	r3, [r2, #0]
				if(ARR_1<=max_speed_1)
 80018c0:	4b63      	ldr	r3, [pc, #396]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	4b63      	ldr	r3, [pc, #396]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	dc03      	bgt.n	80018d4 <HAL_TIM_PeriodElapsedCallback+0x1a4>
				{
					CNT_1 = i;
 80018cc:	4b51      	ldr	r3, [pc, #324]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a61      	ldr	r2, [pc, #388]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80018d2:	6013      	str	r3, [r2, #0]
				}
			}
			__HAL_TIM_SET_AUTORELOAD(&htim3,ARR_1);
 80018d4:	4b5e      	ldr	r3, [pc, #376]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	4b60      	ldr	r3, [pc, #384]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80018de:	4b5c      	ldr	r3, [pc, #368]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	461a      	mov	r2, r3
 80018e4:	4b5d      	ldr	r3, [pc, #372]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80018e6:	60da      	str	r2, [r3, #12]
		}
		if(i > (fabs(target_1-position_1)/1.8*8*2*ratio)-(CNT_1+error_1) && (target_1-position_1)!=0)
 80018e8:	4b4a      	ldr	r3, [pc, #296]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	ee07 3a90 	vmov	s15, r3
 80018f0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80018f4:	4b53      	ldr	r3, [pc, #332]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x314>)
 80018f6:	ed93 5b00 	vldr	d5, [r3]
 80018fa:	4b53      	ldr	r3, [pc, #332]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x318>)
 80018fc:	ed93 7b00 	vldr	d7, [r3]
 8001900:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001904:	eeb0 5bc7 	vabs.f64	d5, d7
 8001908:	ed9f 4b3f 	vldr	d4, [pc, #252]	; 8001a08 <HAL_TIM_PeriodElapsedCallback+0x2d8>
 800190c:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8001910:	eeb2 5b00 	vmov.f64	d5, #32	; 0x41000000  8.0
 8001914:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001918:	ee37 5b07 	vadd.f64	d5, d7, d7
 800191c:	4b3f      	ldr	r3, [pc, #252]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800191e:	ed93 7b00 	vldr	d7, [r3]
 8001922:	ee25 5b07 	vmul.f64	d5, d5, d7
 8001926:	4b4c      	ldr	r3, [pc, #304]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	4b4d      	ldr	r3, [pc, #308]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4413      	add	r3, r2
 8001930:	ee07 3a90 	vmov	s15, r3
 8001934:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001938:	ee35 7b47 	vsub.f64	d7, d5, d7
 800193c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001944:	dd2a      	ble.n	800199c <HAL_TIM_PeriodElapsedCallback+0x26c>
 8001946:	4b3f      	ldr	r3, [pc, #252]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8001948:	ed93 6b00 	vldr	d6, [r3]
 800194c:	4b3e      	ldr	r3, [pc, #248]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800194e:	ed93 7b00 	vldr	d7, [r3]
 8001952:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001956:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800195a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800195e:	d01d      	beq.n	800199c <HAL_TIM_PeriodElapsedCallback+0x26c>
		{
			if(ARR_1<initial_speed)
 8001960:	4b3b      	ldr	r3, [pc, #236]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	4b3f      	ldr	r3, [pc, #252]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	429a      	cmp	r2, r3
 800196a:	da0d      	bge.n	8001988 <HAL_TIM_PeriodElapsedCallback+0x258>
			{
				ARR_1+=5;
 800196c:	4b38      	ldr	r3, [pc, #224]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x320>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	3305      	adds	r3, #5
 8001972:	4a37      	ldr	r2, [pc, #220]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8001974:	6013      	str	r3, [r2, #0]
				if(ARR_1>=initial_speed)
 8001976:	4b36      	ldr	r3, [pc, #216]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	4b3a      	ldr	r3, [pc, #232]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x334>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	429a      	cmp	r2, r3
 8001980:	db02      	blt.n	8001988 <HAL_TIM_PeriodElapsedCallback+0x258>
				{
					CNT_1 = 0;
 8001982:	4b35      	ldr	r3, [pc, #212]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
				}
			}
			__HAL_TIM_SET_AUTORELOAD(&htim3,ARR_1);
 8001988:	4b31      	ldr	r3, [pc, #196]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x320>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	4b33      	ldr	r3, [pc, #204]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	62da      	str	r2, [r3, #44]	; 0x2c
 8001992:	4b2f      	ldr	r3, [pc, #188]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	461a      	mov	r2, r3
 8001998:	4b30      	ldr	r3, [pc, #192]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800199a:	60da      	str	r2, [r3, #12]
		}
	}
	if(htim->Instance == TIM5)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a31      	ldr	r2, [pc, #196]	; (8001a68 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	f040 80de 	bne.w	8001b64 <HAL_TIM_PeriodElapsedCallback+0x434>
	{
		/*Stepper_2*/
		if(j < (fabs(target_2-position_2)/1.8*8*2*ratio)*percent)
 80019a8:	4b1f      	ldr	r3, [pc, #124]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	ee07 3a90 	vmov	s15, r3
 80019b0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80019b4:	4b2d      	ldr	r3, [pc, #180]	; (8001a6c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80019b6:	ed93 5b00 	vldr	d5, [r3]
 80019ba:	4b2d      	ldr	r3, [pc, #180]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80019bc:	ed93 7b00 	vldr	d7, [r3]
 80019c0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80019c4:	eeb0 5bc7 	vabs.f64	d5, d7
 80019c8:	ed9f 4b0f 	vldr	d4, [pc, #60]	; 8001a08 <HAL_TIM_PeriodElapsedCallback+0x2d8>
 80019cc:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80019d0:	eeb2 5b00 	vmov.f64	d5, #32	; 0x41000000  8.0
 80019d4:	ee27 7b05 	vmul.f64	d7, d7, d5
 80019d8:	ee37 5b07 	vadd.f64	d5, d7, d7
 80019dc:	4b0f      	ldr	r3, [pc, #60]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80019de:	ed93 7b00 	vldr	d7, [r3]
 80019e2:	ee25 5b07 	vmul.f64	d5, d5, d7
 80019e6:	4b19      	ldr	r3, [pc, #100]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 80019e8:	ed93 7b00 	vldr	d7, [r3]
 80019ec:	ee25 7b07 	vmul.f64	d7, d5, d7
 80019f0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80019f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f8:	d55a      	bpl.n	8001ab0 <HAL_TIM_PeriodElapsedCallback+0x380>
		{
			if(ARR_2>max_speed_2)
 80019fa:	4b1e      	ldr	r3, [pc, #120]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x344>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	4b1e      	ldr	r3, [pc, #120]	; (8001a78 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	e03a      	b.n	8001a7c <HAL_TIM_PeriodElapsedCallback+0x34c>
 8001a06:	bf00      	nop
 8001a08:	cccccccd 	.word	0xcccccccd
 8001a0c:	3ffccccc 	.word	0x3ffccccc
 8001a10:	40000400 	.word	0x40000400
 8001a14:	24000700 	.word	0x24000700
 8001a18:	240006e8 	.word	0x240006e8
 8001a1c:	24000008 	.word	0x24000008
 8001a20:	58020800 	.word	0x58020800
 8001a24:	40014000 	.word	0x40014000
 8001a28:	24000704 	.word	0x24000704
 8001a2c:	240006f0 	.word	0x240006f0
 8001a30:	40010000 	.word	0x40010000
 8001a34:	24000708 	.word	0x24000708
 8001a38:	240006f8 	.word	0x240006f8
 8001a3c:	24000010 	.word	0x24000010
 8001a40:	40000800 	.word	0x40000800
 8001a44:	240006a0 	.word	0x240006a0
 8001a48:	240006d0 	.word	0x240006d0
 8001a4c:	24000048 	.word	0x24000048
 8001a50:	2400002c 	.word	0x2400002c
 8001a54:	2400001c 	.word	0x2400001c
 8001a58:	2400070c 	.word	0x2400070c
 8001a5c:	240002bc 	.word	0x240002bc
 8001a60:	24000038 	.word	0x24000038
 8001a64:	24000028 	.word	0x24000028
 8001a68:	40000c00 	.word	0x40000c00
 8001a6c:	240006a8 	.word	0x240006a8
 8001a70:	240006d8 	.word	0x240006d8
 8001a74:	24000030 	.word	0x24000030
 8001a78:	24000020 	.word	0x24000020
 8001a7c:	dd0e      	ble.n	8001a9c <HAL_TIM_PeriodElapsedCallback+0x36c>
			{
				ARR_2-=5;
 8001a7e:	4b98      	ldr	r3, [pc, #608]	; (8001ce0 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	3b05      	subs	r3, #5
 8001a84:	4a96      	ldr	r2, [pc, #600]	; (8001ce0 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8001a86:	6013      	str	r3, [r2, #0]
				if(ARR_2<=max_speed_2)
 8001a88:	4b95      	ldr	r3, [pc, #596]	; (8001ce0 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	4b95      	ldr	r3, [pc, #596]	; (8001ce4 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	dc03      	bgt.n	8001a9c <HAL_TIM_PeriodElapsedCallback+0x36c>
				{
					CNT_2 = j;
 8001a94:	4b94      	ldr	r3, [pc, #592]	; (8001ce8 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a94      	ldr	r2, [pc, #592]	; (8001cec <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8001a9a:	6013      	str	r3, [r2, #0]
				}
			}
			__HAL_TIM_SET_AUTORELOAD(&htim15,ARR_2);
 8001a9c:	4b90      	ldr	r3, [pc, #576]	; (8001ce0 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	4b93      	ldr	r3, [pc, #588]	; (8001cf0 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	62da      	str	r2, [r3, #44]	; 0x2c
 8001aa6:	4b8e      	ldr	r3, [pc, #568]	; (8001ce0 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	461a      	mov	r2, r3
 8001aac:	4b90      	ldr	r3, [pc, #576]	; (8001cf0 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 8001aae:	60da      	str	r2, [r3, #12]
		}
		if(j > (fabs(target_2-position_2)/1.8*8*2*ratio)-(CNT_2+error_2) && (target_2-position_2)!=0)
 8001ab0:	4b8d      	ldr	r3, [pc, #564]	; (8001ce8 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	ee07 3a90 	vmov	s15, r3
 8001ab8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001abc:	4b8d      	ldr	r3, [pc, #564]	; (8001cf4 <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 8001abe:	ed93 5b00 	vldr	d5, [r3]
 8001ac2:	4b8d      	ldr	r3, [pc, #564]	; (8001cf8 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8001ac4:	ed93 7b00 	vldr	d7, [r3]
 8001ac8:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001acc:	eeb0 5bc7 	vabs.f64	d5, d7
 8001ad0:	ed9f 4b81 	vldr	d4, [pc, #516]	; 8001cd8 <HAL_TIM_PeriodElapsedCallback+0x5a8>
 8001ad4:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8001ad8:	eeb2 5b00 	vmov.f64	d5, #32	; 0x41000000  8.0
 8001adc:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001ae0:	ee37 5b07 	vadd.f64	d5, d7, d7
 8001ae4:	4b85      	ldr	r3, [pc, #532]	; (8001cfc <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 8001ae6:	ed93 7b00 	vldr	d7, [r3]
 8001aea:	ee25 5b07 	vmul.f64	d5, d5, d7
 8001aee:	4b7f      	ldr	r3, [pc, #508]	; (8001cec <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	4b83      	ldr	r3, [pc, #524]	; (8001d00 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4413      	add	r3, r2
 8001af8:	ee07 3a90 	vmov	s15, r3
 8001afc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001b00:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001b04:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b0c:	dd2a      	ble.n	8001b64 <HAL_TIM_PeriodElapsedCallback+0x434>
 8001b0e:	4b79      	ldr	r3, [pc, #484]	; (8001cf4 <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 8001b10:	ed93 6b00 	vldr	d6, [r3]
 8001b14:	4b78      	ldr	r3, [pc, #480]	; (8001cf8 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8001b16:	ed93 7b00 	vldr	d7, [r3]
 8001b1a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001b1e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b26:	d01d      	beq.n	8001b64 <HAL_TIM_PeriodElapsedCallback+0x434>
		{
			if(ARR_2<initial_speed)
 8001b28:	4b6d      	ldr	r3, [pc, #436]	; (8001ce0 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	4b75      	ldr	r3, [pc, #468]	; (8001d04 <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	da0d      	bge.n	8001b50 <HAL_TIM_PeriodElapsedCallback+0x420>
			{
				ARR_2+=5;
 8001b34:	4b6a      	ldr	r3, [pc, #424]	; (8001ce0 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	3305      	adds	r3, #5
 8001b3a:	4a69      	ldr	r2, [pc, #420]	; (8001ce0 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8001b3c:	6013      	str	r3, [r2, #0]
				if(ARR_2>=initial_speed)
 8001b3e:	4b68      	ldr	r3, [pc, #416]	; (8001ce0 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	4b70      	ldr	r3, [pc, #448]	; (8001d04 <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	db02      	blt.n	8001b50 <HAL_TIM_PeriodElapsedCallback+0x420>
				{
					CNT_2 = 0;
 8001b4a:	4b68      	ldr	r3, [pc, #416]	; (8001cec <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
				}
			}
			__HAL_TIM_SET_AUTORELOAD(&htim15,ARR_2);
 8001b50:	4b63      	ldr	r3, [pc, #396]	; (8001ce0 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	4b66      	ldr	r3, [pc, #408]	; (8001cf0 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b5a:	4b61      	ldr	r3, [pc, #388]	; (8001ce0 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	4b63      	ldr	r3, [pc, #396]	; (8001cf0 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 8001b62:	60da      	str	r2, [r3, #12]
		}
	}
	if(htim->Instance == TIM24)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a67      	ldr	r2, [pc, #412]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	f040 80a2 	bne.w	8001cb4 <HAL_TIM_PeriodElapsedCallback+0x584>
	{
		/*Stepper_3*/
		if(k < (fabs(target_3-position_3)/1.8*8*2*ratio_3)*percent)
 8001b70:	4b66      	ldr	r3, [pc, #408]	; (8001d0c <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	ee07 3a90 	vmov	s15, r3
 8001b78:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001b7c:	4b64      	ldr	r3, [pc, #400]	; (8001d10 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8001b7e:	ed93 5b00 	vldr	d5, [r3]
 8001b82:	4b64      	ldr	r3, [pc, #400]	; (8001d14 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 8001b84:	ed93 7b00 	vldr	d7, [r3]
 8001b88:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001b8c:	eeb0 5bc7 	vabs.f64	d5, d7
 8001b90:	ed9f 4b51 	vldr	d4, [pc, #324]	; 8001cd8 <HAL_TIM_PeriodElapsedCallback+0x5a8>
 8001b94:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8001b98:	eeb2 5b00 	vmov.f64	d5, #32	; 0x41000000  8.0
 8001b9c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001ba0:	ee37 5b07 	vadd.f64	d5, d7, d7
 8001ba4:	4b5c      	ldr	r3, [pc, #368]	; (8001d18 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8001ba6:	ed93 7b00 	vldr	d7, [r3]
 8001baa:	ee25 5b07 	vmul.f64	d5, d5, d7
 8001bae:	4b5b      	ldr	r3, [pc, #364]	; (8001d1c <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 8001bb0:	ed93 7b00 	vldr	d7, [r3]
 8001bb4:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001bb8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc0:	d51e      	bpl.n	8001c00 <HAL_TIM_PeriodElapsedCallback+0x4d0>
		{
			if(ARR_3>max_speed_3)
 8001bc2:	4b57      	ldr	r3, [pc, #348]	; (8001d20 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	4b57      	ldr	r3, [pc, #348]	; (8001d24 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	dd0e      	ble.n	8001bec <HAL_TIM_PeriodElapsedCallback+0x4bc>
			{
				ARR_3-=5;
 8001bce:	4b54      	ldr	r3, [pc, #336]	; (8001d20 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	3b05      	subs	r3, #5
 8001bd4:	4a52      	ldr	r2, [pc, #328]	; (8001d20 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 8001bd6:	6013      	str	r3, [r2, #0]
				if(ARR_3<=max_speed_3)
 8001bd8:	4b51      	ldr	r3, [pc, #324]	; (8001d20 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	4b51      	ldr	r3, [pc, #324]	; (8001d24 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	dc03      	bgt.n	8001bec <HAL_TIM_PeriodElapsedCallback+0x4bc>
				{
					CNT_3 = k;
 8001be4:	4b49      	ldr	r3, [pc, #292]	; (8001d0c <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a4f      	ldr	r2, [pc, #316]	; (8001d28 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 8001bea:	6013      	str	r3, [r2, #0]
				}
			}
			__HAL_TIM_SET_AUTORELOAD(&htim1,ARR_3);
 8001bec:	4b4c      	ldr	r3, [pc, #304]	; (8001d20 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	4b4e      	ldr	r3, [pc, #312]	; (8001d2c <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	62da      	str	r2, [r3, #44]	; 0x2c
 8001bf6:	4b4a      	ldr	r3, [pc, #296]	; (8001d20 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	4b4b      	ldr	r3, [pc, #300]	; (8001d2c <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001bfe:	60da      	str	r2, [r3, #12]
		}
		if(k > (fabs(target_3-position_3)/1.8*8*2*ratio_3)-(CNT_3+error_3) && (target_3-position_3)!=0)
 8001c00:	4b42      	ldr	r3, [pc, #264]	; (8001d0c <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	ee07 3a90 	vmov	s15, r3
 8001c08:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001c0c:	4b40      	ldr	r3, [pc, #256]	; (8001d10 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8001c0e:	ed93 5b00 	vldr	d5, [r3]
 8001c12:	4b40      	ldr	r3, [pc, #256]	; (8001d14 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 8001c14:	ed93 7b00 	vldr	d7, [r3]
 8001c18:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001c1c:	eeb0 5bc7 	vabs.f64	d5, d7
 8001c20:	ed9f 4b2d 	vldr	d4, [pc, #180]	; 8001cd8 <HAL_TIM_PeriodElapsedCallback+0x5a8>
 8001c24:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8001c28:	eeb2 5b00 	vmov.f64	d5, #32	; 0x41000000  8.0
 8001c2c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001c30:	ee37 5b07 	vadd.f64	d5, d7, d7
 8001c34:	4b38      	ldr	r3, [pc, #224]	; (8001d18 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8001c36:	ed93 7b00 	vldr	d7, [r3]
 8001c3a:	ee25 5b07 	vmul.f64	d5, d5, d7
 8001c3e:	4b3a      	ldr	r3, [pc, #232]	; (8001d28 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	4b3b      	ldr	r3, [pc, #236]	; (8001d30 <HAL_TIM_PeriodElapsedCallback+0x600>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4413      	add	r3, r2
 8001c48:	ee07 3a90 	vmov	s15, r3
 8001c4c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001c50:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001c54:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c5c:	dd2a      	ble.n	8001cb4 <HAL_TIM_PeriodElapsedCallback+0x584>
 8001c5e:	4b2c      	ldr	r3, [pc, #176]	; (8001d10 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8001c60:	ed93 6b00 	vldr	d6, [r3]
 8001c64:	4b2b      	ldr	r3, [pc, #172]	; (8001d14 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 8001c66:	ed93 7b00 	vldr	d7, [r3]
 8001c6a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001c6e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c76:	d01d      	beq.n	8001cb4 <HAL_TIM_PeriodElapsedCallback+0x584>
		{
			if(ARR_3<initial_speed)
 8001c78:	4b29      	ldr	r3, [pc, #164]	; (8001d20 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	4b21      	ldr	r3, [pc, #132]	; (8001d04 <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	da0d      	bge.n	8001ca0 <HAL_TIM_PeriodElapsedCallback+0x570>
			{
				ARR_3+=5;
 8001c84:	4b26      	ldr	r3, [pc, #152]	; (8001d20 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	3305      	adds	r3, #5
 8001c8a:	4a25      	ldr	r2, [pc, #148]	; (8001d20 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 8001c8c:	6013      	str	r3, [r2, #0]
				if(ARR_3>=initial_speed)
 8001c8e:	4b24      	ldr	r3, [pc, #144]	; (8001d20 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	4b1c      	ldr	r3, [pc, #112]	; (8001d04 <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	db02      	blt.n	8001ca0 <HAL_TIM_PeriodElapsedCallback+0x570>
				{
					CNT_3 = 0;
 8001c9a:	4b23      	ldr	r3, [pc, #140]	; (8001d28 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
				}
			}
			__HAL_TIM_SET_AUTORELOAD(&htim1,ARR_3);
 8001ca0:	4b1f      	ldr	r3, [pc, #124]	; (8001d20 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4b21      	ldr	r3, [pc, #132]	; (8001d2c <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	62da      	str	r2, [r3, #44]	; 0x2c
 8001caa:	4b1d      	ldr	r3, [pc, #116]	; (8001d20 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	4b1e      	ldr	r3, [pc, #120]	; (8001d2c <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001cb2:	60da      	str	r2, [r3, #12]
		}
	}
	/*Servo Control*/
	if(htim->Instance == TIM12)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a1e      	ldr	r2, [pc, #120]	; (8001d34 <HAL_TIM_PeriodElapsedCallback+0x604>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	f040 80aa 	bne.w	8001e14 <HAL_TIM_PeriodElapsedCallback+0x6e4>
	{
		if (a < 500) a+=15;
 8001cc0:	4b1d      	ldr	r3, [pc, #116]	; (8001d38 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001cc8:	da38      	bge.n	8001d3c <HAL_TIM_PeriodElapsedCallback+0x60c>
 8001cca:	4b1b      	ldr	r3, [pc, #108]	; (8001d38 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	330f      	adds	r3, #15
 8001cd0:	4a19      	ldr	r2, [pc, #100]	; (8001d38 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8001cd2:	6013      	str	r3, [r2, #0]
 8001cd4:	e035      	b.n	8001d42 <HAL_TIM_PeriodElapsedCallback+0x612>
 8001cd6:	bf00      	nop
 8001cd8:	cccccccd 	.word	0xcccccccd
 8001cdc:	3ffccccc 	.word	0x3ffccccc
 8001ce0:	24000030 	.word	0x24000030
 8001ce4:	24000020 	.word	0x24000020
 8001ce8:	24000704 	.word	0x24000704
 8001cec:	24000710 	.word	0x24000710
 8001cf0:	24000438 	.word	0x24000438
 8001cf4:	240006a8 	.word	0x240006a8
 8001cf8:	240006d8 	.word	0x240006d8
 8001cfc:	24000008 	.word	0x24000008
 8001d00:	2400003c 	.word	0x2400003c
 8001d04:	24000028 	.word	0x24000028
 8001d08:	4000e400 	.word	0x4000e400
 8001d0c:	24000708 	.word	0x24000708
 8001d10:	240006b0 	.word	0x240006b0
 8001d14:	240006e0 	.word	0x240006e0
 8001d18:	24000010 	.word	0x24000010
 8001d1c:	24000048 	.word	0x24000048
 8001d20:	24000034 	.word	0x24000034
 8001d24:	24000024 	.word	0x24000024
 8001d28:	24000714 	.word	0x24000714
 8001d2c:	24000224 	.word	0x24000224
 8001d30:	24000040 	.word	0x24000040
 8001d34:	40001800 	.word	0x40001800
 8001d38:	24000738 	.word	0x24000738
		else a = 0;
 8001d3c:	4b3a      	ldr	r3, [pc, #232]	; (8001e28 <HAL_TIM_PeriodElapsedCallback+0x6f8>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
		if(degree_1 != temp)
 8001d42:	4b3a      	ldr	r3, [pc, #232]	; (8001e2c <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8001d44:	ed93 6b00 	vldr	d6, [r3]
 8001d48:	4b39      	ldr	r3, [pc, #228]	; (8001e30 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8001d4a:	ed93 7b00 	vldr	d7, [r3]
 8001d4e:	eeb4 6b47 	vcmp.f64	d6, d7
 8001d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d56:	d026      	beq.n	8001da6 <HAL_TIM_PeriodElapsedCallback+0x676>
		{
			if((degree_1-temp)>=0)
 8001d58:	4b34      	ldr	r3, [pc, #208]	; (8001e2c <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8001d5a:	ed93 6b00 	vldr	d6, [r3]
 8001d5e:	4b34      	ldr	r3, [pc, #208]	; (8001e30 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8001d60:	ed93 7b00 	vldr	d7, [r3]
 8001d64:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001d68:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d70:	db06      	blt.n	8001d80 <HAL_TIM_PeriodElapsedCallback+0x650>
				pulse_1 = 2000;
 8001d72:	4930      	ldr	r1, [pc, #192]	; (8001e34 <HAL_TIM_PeriodElapsedCallback+0x704>)
 8001d74:	f04f 0200 	mov.w	r2, #0
 8001d78:	4b2f      	ldr	r3, [pc, #188]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0x708>)
 8001d7a:	e9c1 2300 	strd	r2, r3, [r1]
 8001d7e:	e005      	b.n	8001d8c <HAL_TIM_PeriodElapsedCallback+0x65c>
			else
				pulse_1 = 1000;
 8001d80:	492c      	ldr	r1, [pc, #176]	; (8001e34 <HAL_TIM_PeriodElapsedCallback+0x704>)
 8001d82:	f04f 0200 	mov.w	r2, #0
 8001d86:	4b2d      	ldr	r3, [pc, #180]	; (8001e3c <HAL_TIM_PeriodElapsedCallback+0x70c>)
 8001d88:	e9c1 2300 	strd	r2, r3, [r1]
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse_1);
 8001d8c:	4b29      	ldr	r3, [pc, #164]	; (8001e34 <HAL_TIM_PeriodElapsedCallback+0x704>)
 8001d8e:	ed93 7b00 	vldr	d7, [r3]
 8001d92:	4b2b      	ldr	r3, [pc, #172]	; (8001e40 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d9a:	ee17 2a90 	vmov	r2, s15
 8001d9e:	635a      	str	r2, [r3, #52]	; 0x34
			a = 0;
 8001da0:	4b21      	ldr	r3, [pc, #132]	; (8001e28 <HAL_TIM_PeriodElapsedCallback+0x6f8>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
		}
		if(a > fabs(degree_1-Deg))
 8001da6:	4b20      	ldr	r3, [pc, #128]	; (8001e28 <HAL_TIM_PeriodElapsedCallback+0x6f8>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	ee07 3a90 	vmov	s15, r3
 8001dae:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001db2:	4b1e      	ldr	r3, [pc, #120]	; (8001e2c <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8001db4:	ed93 5b00 	vldr	d5, [r3]
 8001db8:	4b22      	ldr	r3, [pc, #136]	; (8001e44 <HAL_TIM_PeriodElapsedCallback+0x714>)
 8001dba:	ed93 7b00 	vldr	d7, [r3]
 8001dbe:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001dc2:	eeb0 7bc7 	vabs.f64	d7, d7
 8001dc6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dce:	dd09      	ble.n	8001de4 <HAL_TIM_PeriodElapsedCallback+0x6b4>
		{
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001dd0:	4b1b      	ldr	r3, [pc, #108]	; (8001e40 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	635a      	str	r2, [r3, #52]	; 0x34
			Deg = degree_1;
 8001dd8:	4b14      	ldr	r3, [pc, #80]	; (8001e2c <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8001dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dde:	4919      	ldr	r1, [pc, #100]	; (8001e44 <HAL_TIM_PeriodElapsedCallback+0x714>)
 8001de0:	e9c1 2300 	strd	r2, r3, [r1]
		}

		__HAL_TIM_SET_COMPARE(&htim23, TIM_CHANNEL_1, 570+5*degree_2);
 8001de4:	4b18      	ldr	r3, [pc, #96]	; (8001e48 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8001de6:	ed93 7b00 	vldr	d7, [r3]
 8001dea:	eeb1 6b04 	vmov.f64	d6, #20	; 0x40a00000  5.0
 8001dee:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001df2:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8001e20 <HAL_TIM_PeriodElapsedCallback+0x6f0>
 8001df6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001dfa:	4b14      	ldr	r3, [pc, #80]	; (8001e4c <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e02:	ee17 2a90 	vmov	r2, s15
 8001e06:	635a      	str	r2, [r3, #52]	; 0x34
		temp = degree_1;
 8001e08:	4b08      	ldr	r3, [pc, #32]	; (8001e2c <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8001e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0e:	4908      	ldr	r1, [pc, #32]	; (8001e30 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8001e10:	e9c1 2300 	strd	r2, r3, [r1]
	}

}
 8001e14:	bf00      	nop
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	f3af 8000 	nop.w
 8001e20:	00000000 	.word	0x00000000
 8001e24:	4081d000 	.word	0x4081d000
 8001e28:	24000738 	.word	0x24000738
 8001e2c:	24000718 	.word	0x24000718
 8001e30:	24000740 	.word	0x24000740
 8001e34:	24000728 	.word	0x24000728
 8001e38:	409f4000 	.word	0x409f4000
 8001e3c:	408f4000 	.word	0x408f4000
 8001e40:	24000270 	.word	0x24000270
 8001e44:	24000730 	.word	0x24000730
 8001e48:	24000720 	.word	0x24000720
 8001e4c:	24000484 	.word	0x24000484

08001e50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e54:	b672      	cpsid	i
}
 8001e56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e58:	e7fe      	b.n	8001e58 <Error_Handler+0x8>
	...

08001e5c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e62:	4b0d      	ldr	r3, [pc, #52]	; (8001e98 <HAL_MspInit+0x3c>)
 8001e64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e68:	4a0b      	ldr	r2, [pc, #44]	; (8001e98 <HAL_MspInit+0x3c>)
 8001e6a:	f043 0302 	orr.w	r3, r3, #2
 8001e6e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001e72:	4b09      	ldr	r3, [pc, #36]	; (8001e98 <HAL_MspInit+0x3c>)
 8001e74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	607b      	str	r3, [r7, #4]
 8001e7e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001e80:	2200      	movs	r2, #0
 8001e82:	2100      	movs	r1, #0
 8001e84:	2005      	movs	r0, #5
 8001e86:	f000 fe7e 	bl	8002b86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001e8a:	2005      	movs	r0, #5
 8001e8c:	f000 fe95 	bl	8002bba <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e90:	bf00      	nop
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	58024400 	.word	0x58024400

08001e9c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b08e      	sub	sp, #56	; 0x38
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	605a      	str	r2, [r3, #4]
 8001eae:	609a      	str	r2, [r3, #8]
 8001eb0:	60da      	str	r2, [r3, #12]
 8001eb2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a59      	ldr	r2, [pc, #356]	; (8002020 <HAL_ETH_MspInit+0x184>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	f040 80ab 	bne.w	8002016 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001ec0:	4b58      	ldr	r3, [pc, #352]	; (8002024 <HAL_ETH_MspInit+0x188>)
 8001ec2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ec6:	4a57      	ldr	r2, [pc, #348]	; (8002024 <HAL_ETH_MspInit+0x188>)
 8001ec8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ecc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001ed0:	4b54      	ldr	r3, [pc, #336]	; (8002024 <HAL_ETH_MspInit+0x188>)
 8001ed2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ed6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001eda:	623b      	str	r3, [r7, #32]
 8001edc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001ede:	4b51      	ldr	r3, [pc, #324]	; (8002024 <HAL_ETH_MspInit+0x188>)
 8001ee0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ee4:	4a4f      	ldr	r2, [pc, #316]	; (8002024 <HAL_ETH_MspInit+0x188>)
 8001ee6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eea:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001eee:	4b4d      	ldr	r3, [pc, #308]	; (8002024 <HAL_ETH_MspInit+0x188>)
 8001ef0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ef4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef8:	61fb      	str	r3, [r7, #28]
 8001efa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001efc:	4b49      	ldr	r3, [pc, #292]	; (8002024 <HAL_ETH_MspInit+0x188>)
 8001efe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f02:	4a48      	ldr	r2, [pc, #288]	; (8002024 <HAL_ETH_MspInit+0x188>)
 8001f04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f08:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001f0c:	4b45      	ldr	r3, [pc, #276]	; (8002024 <HAL_ETH_MspInit+0x188>)
 8001f0e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f16:	61bb      	str	r3, [r7, #24]
 8001f18:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f1a:	4b42      	ldr	r3, [pc, #264]	; (8002024 <HAL_ETH_MspInit+0x188>)
 8001f1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f20:	4a40      	ldr	r2, [pc, #256]	; (8002024 <HAL_ETH_MspInit+0x188>)
 8001f22:	f043 0304 	orr.w	r3, r3, #4
 8001f26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f2a:	4b3e      	ldr	r3, [pc, #248]	; (8002024 <HAL_ETH_MspInit+0x188>)
 8001f2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f30:	f003 0304 	and.w	r3, r3, #4
 8001f34:	617b      	str	r3, [r7, #20]
 8001f36:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f38:	4b3a      	ldr	r3, [pc, #232]	; (8002024 <HAL_ETH_MspInit+0x188>)
 8001f3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f3e:	4a39      	ldr	r2, [pc, #228]	; (8002024 <HAL_ETH_MspInit+0x188>)
 8001f40:	f043 0301 	orr.w	r3, r3, #1
 8001f44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f48:	4b36      	ldr	r3, [pc, #216]	; (8002024 <HAL_ETH_MspInit+0x188>)
 8001f4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	613b      	str	r3, [r7, #16]
 8001f54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f56:	4b33      	ldr	r3, [pc, #204]	; (8002024 <HAL_ETH_MspInit+0x188>)
 8001f58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f5c:	4a31      	ldr	r2, [pc, #196]	; (8002024 <HAL_ETH_MspInit+0x188>)
 8001f5e:	f043 0302 	orr.w	r3, r3, #2
 8001f62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f66:	4b2f      	ldr	r3, [pc, #188]	; (8002024 <HAL_ETH_MspInit+0x188>)
 8001f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f74:	4b2b      	ldr	r3, [pc, #172]	; (8002024 <HAL_ETH_MspInit+0x188>)
 8001f76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f7a:	4a2a      	ldr	r2, [pc, #168]	; (8002024 <HAL_ETH_MspInit+0x188>)
 8001f7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f84:	4b27      	ldr	r3, [pc, #156]	; (8002024 <HAL_ETH_MspInit+0x188>)
 8001f86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f8e:	60bb      	str	r3, [r7, #8]
 8001f90:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001f92:	2332      	movs	r3, #50	; 0x32
 8001f94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f96:	2302      	movs	r3, #2
 8001f98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001fa2:	230b      	movs	r3, #11
 8001fa4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001faa:	4619      	mov	r1, r3
 8001fac:	481e      	ldr	r0, [pc, #120]	; (8002028 <HAL_ETH_MspInit+0x18c>)
 8001fae:	f003 fc6b 	bl	8005888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001fb2:	2386      	movs	r3, #134	; 0x86
 8001fb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001fc2:	230b      	movs	r3, #11
 8001fc4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4817      	ldr	r0, [pc, #92]	; (800202c <HAL_ETH_MspInit+0x190>)
 8001fce:	f003 fc5b 	bl	8005888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001fd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd8:	2302      	movs	r3, #2
 8001fda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001fe4:	230b      	movs	r3, #11
 8001fe6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001fe8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fec:	4619      	mov	r1, r3
 8001fee:	4810      	ldr	r0, [pc, #64]	; (8002030 <HAL_ETH_MspInit+0x194>)
 8001ff0:	f003 fc4a 	bl	8005888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001ff4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001ff8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002002:	2300      	movs	r3, #0
 8002004:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002006:	230b      	movs	r3, #11
 8002008:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800200a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800200e:	4619      	mov	r1, r3
 8002010:	4808      	ldr	r0, [pc, #32]	; (8002034 <HAL_ETH_MspInit+0x198>)
 8002012:	f003 fc39 	bl	8005888 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002016:	bf00      	nop
 8002018:	3738      	adds	r7, #56	; 0x38
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40028000 	.word	0x40028000
 8002024:	58024400 	.word	0x58024400
 8002028:	58020800 	.word	0x58020800
 800202c:	58020000 	.word	0x58020000
 8002030:	58020400 	.word	0x58020400
 8002034:	58021800 	.word	0x58021800

08002038 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b08a      	sub	sp, #40	; 0x28
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a71      	ldr	r2, [pc, #452]	; (800220c <HAL_TIM_Base_MspInit+0x1d4>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d12f      	bne.n	80020aa <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800204a:	4b71      	ldr	r3, [pc, #452]	; (8002210 <HAL_TIM_Base_MspInit+0x1d8>)
 800204c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002050:	4a6f      	ldr	r2, [pc, #444]	; (8002210 <HAL_TIM_Base_MspInit+0x1d8>)
 8002052:	f043 0301 	orr.w	r3, r3, #1
 8002056:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800205a:	4b6d      	ldr	r3, [pc, #436]	; (8002210 <HAL_TIM_Base_MspInit+0x1d8>)
 800205c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002060:	f003 0301 	and.w	r3, r3, #1
 8002064:	627b      	str	r3, [r7, #36]	; 0x24
 8002066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8002068:	2200      	movs	r2, #0
 800206a:	2100      	movs	r1, #0
 800206c:	2018      	movs	r0, #24
 800206e:	f000 fd8a 	bl	8002b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8002072:	2018      	movs	r0, #24
 8002074:	f000 fda1 	bl	8002bba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002078:	2200      	movs	r2, #0
 800207a:	2100      	movs	r1, #0
 800207c:	2019      	movs	r0, #25
 800207e:	f000 fd82 	bl	8002b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002082:	2019      	movs	r0, #25
 8002084:	f000 fd99 	bl	8002bba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8002088:	2200      	movs	r2, #0
 800208a:	2100      	movs	r1, #0
 800208c:	201a      	movs	r0, #26
 800208e:	f000 fd7a 	bl	8002b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8002092:	201a      	movs	r0, #26
 8002094:	f000 fd91 	bl	8002bba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002098:	2200      	movs	r2, #0
 800209a:	2100      	movs	r1, #0
 800209c:	201b      	movs	r0, #27
 800209e:	f000 fd72 	bl	8002b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80020a2:	201b      	movs	r0, #27
 80020a4:	f000 fd89 	bl	8002bba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }

}
 80020a8:	e0ac      	b.n	8002204 <HAL_TIM_Base_MspInit+0x1cc>
  else if(htim_base->Instance==TIM3)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a59      	ldr	r2, [pc, #356]	; (8002214 <HAL_TIM_Base_MspInit+0x1dc>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d117      	bne.n	80020e4 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020b4:	4b56      	ldr	r3, [pc, #344]	; (8002210 <HAL_TIM_Base_MspInit+0x1d8>)
 80020b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020ba:	4a55      	ldr	r2, [pc, #340]	; (8002210 <HAL_TIM_Base_MspInit+0x1d8>)
 80020bc:	f043 0302 	orr.w	r3, r3, #2
 80020c0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80020c4:	4b52      	ldr	r3, [pc, #328]	; (8002210 <HAL_TIM_Base_MspInit+0x1d8>)
 80020c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	623b      	str	r3, [r7, #32]
 80020d0:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80020d2:	2200      	movs	r2, #0
 80020d4:	2100      	movs	r1, #0
 80020d6:	201d      	movs	r0, #29
 80020d8:	f000 fd55 	bl	8002b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80020dc:	201d      	movs	r0, #29
 80020de:	f000 fd6c 	bl	8002bba <HAL_NVIC_EnableIRQ>
}
 80020e2:	e08f      	b.n	8002204 <HAL_TIM_Base_MspInit+0x1cc>
  else if(htim_base->Instance==TIM4)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a4b      	ldr	r2, [pc, #300]	; (8002218 <HAL_TIM_Base_MspInit+0x1e0>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d117      	bne.n	800211e <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80020ee:	4b48      	ldr	r3, [pc, #288]	; (8002210 <HAL_TIM_Base_MspInit+0x1d8>)
 80020f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020f4:	4a46      	ldr	r2, [pc, #280]	; (8002210 <HAL_TIM_Base_MspInit+0x1d8>)
 80020f6:	f043 0304 	orr.w	r3, r3, #4
 80020fa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80020fe:	4b44      	ldr	r3, [pc, #272]	; (8002210 <HAL_TIM_Base_MspInit+0x1d8>)
 8002100:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	61fb      	str	r3, [r7, #28]
 800210a:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800210c:	2200      	movs	r2, #0
 800210e:	2100      	movs	r1, #0
 8002110:	201e      	movs	r0, #30
 8002112:	f000 fd38 	bl	8002b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002116:	201e      	movs	r0, #30
 8002118:	f000 fd4f 	bl	8002bba <HAL_NVIC_EnableIRQ>
}
 800211c:	e072      	b.n	8002204 <HAL_TIM_Base_MspInit+0x1cc>
  else if(htim_base->Instance==TIM5)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a3e      	ldr	r2, [pc, #248]	; (800221c <HAL_TIM_Base_MspInit+0x1e4>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d117      	bne.n	8002158 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002128:	4b39      	ldr	r3, [pc, #228]	; (8002210 <HAL_TIM_Base_MspInit+0x1d8>)
 800212a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800212e:	4a38      	ldr	r2, [pc, #224]	; (8002210 <HAL_TIM_Base_MspInit+0x1d8>)
 8002130:	f043 0308 	orr.w	r3, r3, #8
 8002134:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002138:	4b35      	ldr	r3, [pc, #212]	; (8002210 <HAL_TIM_Base_MspInit+0x1d8>)
 800213a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800213e:	f003 0308 	and.w	r3, r3, #8
 8002142:	61bb      	str	r3, [r7, #24]
 8002144:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002146:	2200      	movs	r2, #0
 8002148:	2100      	movs	r1, #0
 800214a:	2032      	movs	r0, #50	; 0x32
 800214c:	f000 fd1b 	bl	8002b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002150:	2032      	movs	r0, #50	; 0x32
 8002152:	f000 fd32 	bl	8002bba <HAL_NVIC_EnableIRQ>
}
 8002156:	e055      	b.n	8002204 <HAL_TIM_Base_MspInit+0x1cc>
  else if(htim_base->Instance==TIM12)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a30      	ldr	r2, [pc, #192]	; (8002220 <HAL_TIM_Base_MspInit+0x1e8>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d117      	bne.n	8002192 <HAL_TIM_Base_MspInit+0x15a>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002162:	4b2b      	ldr	r3, [pc, #172]	; (8002210 <HAL_TIM_Base_MspInit+0x1d8>)
 8002164:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002168:	4a29      	ldr	r2, [pc, #164]	; (8002210 <HAL_TIM_Base_MspInit+0x1d8>)
 800216a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800216e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002172:	4b27      	ldr	r3, [pc, #156]	; (8002210 <HAL_TIM_Base_MspInit+0x1d8>)
 8002174:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800217c:	617b      	str	r3, [r7, #20]
 800217e:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8002180:	2200      	movs	r2, #0
 8002182:	2100      	movs	r1, #0
 8002184:	202b      	movs	r0, #43	; 0x2b
 8002186:	f000 fcfe 	bl	8002b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800218a:	202b      	movs	r0, #43	; 0x2b
 800218c:	f000 fd15 	bl	8002bba <HAL_NVIC_EnableIRQ>
}
 8002190:	e038      	b.n	8002204 <HAL_TIM_Base_MspInit+0x1cc>
  else if(htim_base->Instance==TIM15)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a23      	ldr	r2, [pc, #140]	; (8002224 <HAL_TIM_Base_MspInit+0x1ec>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d117      	bne.n	80021cc <HAL_TIM_Base_MspInit+0x194>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800219c:	4b1c      	ldr	r3, [pc, #112]	; (8002210 <HAL_TIM_Base_MspInit+0x1d8>)
 800219e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021a2:	4a1b      	ldr	r2, [pc, #108]	; (8002210 <HAL_TIM_Base_MspInit+0x1d8>)
 80021a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80021ac:	4b18      	ldr	r3, [pc, #96]	; (8002210 <HAL_TIM_Base_MspInit+0x1d8>)
 80021ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021b6:	613b      	str	r3, [r7, #16]
 80021b8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 80021ba:	2200      	movs	r2, #0
 80021bc:	2100      	movs	r1, #0
 80021be:	2074      	movs	r0, #116	; 0x74
 80021c0:	f000 fce1 	bl	8002b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 80021c4:	2074      	movs	r0, #116	; 0x74
 80021c6:	f000 fcf8 	bl	8002bba <HAL_NVIC_EnableIRQ>
}
 80021ca:	e01b      	b.n	8002204 <HAL_TIM_Base_MspInit+0x1cc>
  else if(htim_base->Instance==TIM24)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a15      	ldr	r2, [pc, #84]	; (8002228 <HAL_TIM_Base_MspInit+0x1f0>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d116      	bne.n	8002204 <HAL_TIM_Base_MspInit+0x1cc>
    __HAL_RCC_TIM24_CLK_ENABLE();
 80021d6:	4b0e      	ldr	r3, [pc, #56]	; (8002210 <HAL_TIM_Base_MspInit+0x1d8>)
 80021d8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80021dc:	4a0c      	ldr	r2, [pc, #48]	; (8002210 <HAL_TIM_Base_MspInit+0x1d8>)
 80021de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021e2:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80021e6:	4b0a      	ldr	r3, [pc, #40]	; (8002210 <HAL_TIM_Base_MspInit+0x1d8>)
 80021e8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80021ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM24_IRQn, 0, 0);
 80021f4:	2200      	movs	r2, #0
 80021f6:	2100      	movs	r1, #0
 80021f8:	20a2      	movs	r0, #162	; 0xa2
 80021fa:	f000 fcc4 	bl	8002b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM24_IRQn);
 80021fe:	20a2      	movs	r0, #162	; 0xa2
 8002200:	f000 fcdb 	bl	8002bba <HAL_NVIC_EnableIRQ>
}
 8002204:	bf00      	nop
 8002206:	3728      	adds	r7, #40	; 0x28
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40010000 	.word	0x40010000
 8002210:	58024400 	.word	0x58024400
 8002214:	40000400 	.word	0x40000400
 8002218:	40000800 	.word	0x40000800
 800221c:	40000c00 	.word	0x40000c00
 8002220:	40001800 	.word	0x40001800
 8002224:	40014000 	.word	0x40014000
 8002228:	4000e400 	.word	0x4000e400

0800222c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800223c:	d10f      	bne.n	800225e <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800223e:	4b22      	ldr	r3, [pc, #136]	; (80022c8 <HAL_TIM_PWM_MspInit+0x9c>)
 8002240:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002244:	4a20      	ldr	r2, [pc, #128]	; (80022c8 <HAL_TIM_PWM_MspInit+0x9c>)
 8002246:	f043 0301 	orr.w	r3, r3, #1
 800224a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800224e:	4b1e      	ldr	r3, [pc, #120]	; (80022c8 <HAL_TIM_PWM_MspInit+0x9c>)
 8002250:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002254:	f003 0301 	and.w	r3, r3, #1
 8002258:	617b      	str	r3, [r7, #20]
 800225a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM23_MspInit 1 */

  /* USER CODE END TIM23_MspInit 1 */
  }

}
 800225c:	e030      	b.n	80022c0 <HAL_TIM_PWM_MspInit+0x94>
  else if(htim_pwm->Instance==TIM8)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a1a      	ldr	r2, [pc, #104]	; (80022cc <HAL_TIM_PWM_MspInit+0xa0>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d117      	bne.n	8002298 <HAL_TIM_PWM_MspInit+0x6c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002268:	4b17      	ldr	r3, [pc, #92]	; (80022c8 <HAL_TIM_PWM_MspInit+0x9c>)
 800226a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800226e:	4a16      	ldr	r2, [pc, #88]	; (80022c8 <HAL_TIM_PWM_MspInit+0x9c>)
 8002270:	f043 0302 	orr.w	r3, r3, #2
 8002274:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002278:	4b13      	ldr	r3, [pc, #76]	; (80022c8 <HAL_TIM_PWM_MspInit+0x9c>)
 800227a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	613b      	str	r3, [r7, #16]
 8002284:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8002286:	2200      	movs	r2, #0
 8002288:	2100      	movs	r1, #0
 800228a:	202b      	movs	r0, #43	; 0x2b
 800228c:	f000 fc7b 	bl	8002b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002290:	202b      	movs	r0, #43	; 0x2b
 8002292:	f000 fc92 	bl	8002bba <HAL_NVIC_EnableIRQ>
}
 8002296:	e013      	b.n	80022c0 <HAL_TIM_PWM_MspInit+0x94>
  else if(htim_pwm->Instance==TIM23)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a0c      	ldr	r2, [pc, #48]	; (80022d0 <HAL_TIM_PWM_MspInit+0xa4>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d10e      	bne.n	80022c0 <HAL_TIM_PWM_MspInit+0x94>
    __HAL_RCC_TIM23_CLK_ENABLE();
 80022a2:	4b09      	ldr	r3, [pc, #36]	; (80022c8 <HAL_TIM_PWM_MspInit+0x9c>)
 80022a4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80022a8:	4a07      	ldr	r2, [pc, #28]	; (80022c8 <HAL_TIM_PWM_MspInit+0x9c>)
 80022aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022ae:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80022b2:	4b05      	ldr	r3, [pc, #20]	; (80022c8 <HAL_TIM_PWM_MspInit+0x9c>)
 80022b4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80022b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022bc:	60fb      	str	r3, [r7, #12]
 80022be:	68fb      	ldr	r3, [r7, #12]
}
 80022c0:	bf00      	nop
 80022c2:	3718      	adds	r7, #24
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	58024400 	.word	0x58024400
 80022cc:	40010400 	.word	0x40010400
 80022d0:	4000e000 	.word	0x4000e000

080022d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b08a      	sub	sp, #40	; 0x28
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022dc:	f107 0314 	add.w	r3, r7, #20
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	605a      	str	r2, [r3, #4]
 80022e6:	609a      	str	r2, [r3, #8]
 80022e8:	60da      	str	r2, [r3, #12]
 80022ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022f4:	d11f      	bne.n	8002336 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f6:	4b36      	ldr	r3, [pc, #216]	; (80023d0 <HAL_TIM_MspPostInit+0xfc>)
 80022f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022fc:	4a34      	ldr	r2, [pc, #208]	; (80023d0 <HAL_TIM_MspPostInit+0xfc>)
 80022fe:	f043 0301 	orr.w	r3, r3, #1
 8002302:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002306:	4b32      	ldr	r3, [pc, #200]	; (80023d0 <HAL_TIM_MspPostInit+0xfc>)
 8002308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	613b      	str	r3, [r7, #16]
 8002312:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002314:	2301      	movs	r3, #1
 8002316:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002318:	2302      	movs	r3, #2
 800231a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231c:	2300      	movs	r3, #0
 800231e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002320:	2300      	movs	r3, #0
 8002322:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002324:	2301      	movs	r3, #1
 8002326:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002328:	f107 0314 	add.w	r3, r7, #20
 800232c:	4619      	mov	r1, r3
 800232e:	4829      	ldr	r0, [pc, #164]	; (80023d4 <HAL_TIM_MspPostInit+0x100>)
 8002330:	f003 faaa 	bl	8005888 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM23_MspPostInit 1 */

  /* USER CODE END TIM23_MspPostInit 1 */
  }

}
 8002334:	e048      	b.n	80023c8 <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM8)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a27      	ldr	r2, [pc, #156]	; (80023d8 <HAL_TIM_MspPostInit+0x104>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d11f      	bne.n	8002380 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002340:	4b23      	ldr	r3, [pc, #140]	; (80023d0 <HAL_TIM_MspPostInit+0xfc>)
 8002342:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002346:	4a22      	ldr	r2, [pc, #136]	; (80023d0 <HAL_TIM_MspPostInit+0xfc>)
 8002348:	f043 0304 	orr.w	r3, r3, #4
 800234c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002350:	4b1f      	ldr	r3, [pc, #124]	; (80023d0 <HAL_TIM_MspPostInit+0xfc>)
 8002352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002356:	f003 0304 	and.w	r3, r3, #4
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800235e:	2340      	movs	r3, #64	; 0x40
 8002360:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002362:	2302      	movs	r3, #2
 8002364:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002366:	2300      	movs	r3, #0
 8002368:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236a:	2300      	movs	r3, #0
 800236c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800236e:	2303      	movs	r3, #3
 8002370:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002372:	f107 0314 	add.w	r3, r7, #20
 8002376:	4619      	mov	r1, r3
 8002378:	4818      	ldr	r0, [pc, #96]	; (80023dc <HAL_TIM_MspPostInit+0x108>)
 800237a:	f003 fa85 	bl	8005888 <HAL_GPIO_Init>
}
 800237e:	e023      	b.n	80023c8 <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM23)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a16      	ldr	r2, [pc, #88]	; (80023e0 <HAL_TIM_MspPostInit+0x10c>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d11e      	bne.n	80023c8 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800238a:	4b11      	ldr	r3, [pc, #68]	; (80023d0 <HAL_TIM_MspPostInit+0xfc>)
 800238c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002390:	4a0f      	ldr	r2, [pc, #60]	; (80023d0 <HAL_TIM_MspPostInit+0xfc>)
 8002392:	f043 0320 	orr.w	r3, r3, #32
 8002396:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800239a:	4b0d      	ldr	r3, [pc, #52]	; (80023d0 <HAL_TIM_MspPostInit+0xfc>)
 800239c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023a0:	f003 0320 	and.w	r3, r3, #32
 80023a4:	60bb      	str	r3, [r7, #8]
 80023a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80023a8:	2301      	movs	r3, #1
 80023aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ac:	2302      	movs	r3, #2
 80023ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b0:	2300      	movs	r3, #0
 80023b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b4:	2300      	movs	r3, #0
 80023b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 80023b8:	230d      	movs	r3, #13
 80023ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80023bc:	f107 0314 	add.w	r3, r7, #20
 80023c0:	4619      	mov	r1, r3
 80023c2:	4808      	ldr	r0, [pc, #32]	; (80023e4 <HAL_TIM_MspPostInit+0x110>)
 80023c4:	f003 fa60 	bl	8005888 <HAL_GPIO_Init>
}
 80023c8:	bf00      	nop
 80023ca:	3728      	adds	r7, #40	; 0x28
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	58024400 	.word	0x58024400
 80023d4:	58020000 	.word	0x58020000
 80023d8:	40010400 	.word	0x40010400
 80023dc:	58020800 	.word	0x58020800
 80023e0:	4000e000 	.word	0x4000e000
 80023e4:	58021400 	.word	0x58021400

080023e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b0b6      	sub	sp, #216	; 0xd8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	605a      	str	r2, [r3, #4]
 80023fa:	609a      	str	r2, [r3, #8]
 80023fc:	60da      	str	r2, [r3, #12]
 80023fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002400:	f107 0310 	add.w	r3, r7, #16
 8002404:	22b4      	movs	r2, #180	; 0xb4
 8002406:	2100      	movs	r1, #0
 8002408:	4618      	mov	r0, r3
 800240a:	f009 f865 	bl	800b4d8 <memset>
  if(huart->Instance==USART3)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a58      	ldr	r2, [pc, #352]	; (8002574 <HAL_UART_MspInit+0x18c>)
 8002414:	4293      	cmp	r3, r2
 8002416:	f040 80a8 	bne.w	800256a <HAL_UART_MspInit+0x182>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800241a:	2302      	movs	r3, #2
 800241c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800241e:	2300      	movs	r3, #0
 8002420:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002424:	f107 0310 	add.w	r3, r7, #16
 8002428:	4618      	mov	r0, r3
 800242a:	f004 fb97 	bl	8006b5c <HAL_RCCEx_PeriphCLKConfig>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8002434:	f7ff fd0c 	bl	8001e50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002438:	4b4f      	ldr	r3, [pc, #316]	; (8002578 <HAL_UART_MspInit+0x190>)
 800243a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800243e:	4a4e      	ldr	r2, [pc, #312]	; (8002578 <HAL_UART_MspInit+0x190>)
 8002440:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002444:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002448:	4b4b      	ldr	r3, [pc, #300]	; (8002578 <HAL_UART_MspInit+0x190>)
 800244a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800244e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002456:	4b48      	ldr	r3, [pc, #288]	; (8002578 <HAL_UART_MspInit+0x190>)
 8002458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800245c:	4a46      	ldr	r2, [pc, #280]	; (8002578 <HAL_UART_MspInit+0x190>)
 800245e:	f043 0308 	orr.w	r3, r3, #8
 8002462:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002466:	4b44      	ldr	r3, [pc, #272]	; (8002578 <HAL_UART_MspInit+0x190>)
 8002468:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800246c:	f003 0308 	and.w	r3, r3, #8
 8002470:	60bb      	str	r3, [r7, #8]
 8002472:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8002474:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002478:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247c:	2302      	movs	r3, #2
 800247e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002482:	2300      	movs	r3, #0
 8002484:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002488:	2300      	movs	r3, #0
 800248a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800248e:	2307      	movs	r3, #7
 8002490:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002494:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002498:	4619      	mov	r1, r3
 800249a:	4838      	ldr	r0, [pc, #224]	; (800257c <HAL_UART_MspInit+0x194>)
 800249c:	f003 f9f4 	bl	8005888 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 80024a0:	4b37      	ldr	r3, [pc, #220]	; (8002580 <HAL_UART_MspInit+0x198>)
 80024a2:	4a38      	ldr	r2, [pc, #224]	; (8002584 <HAL_UART_MspInit+0x19c>)
 80024a4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80024a6:	4b36      	ldr	r3, [pc, #216]	; (8002580 <HAL_UART_MspInit+0x198>)
 80024a8:	222d      	movs	r2, #45	; 0x2d
 80024aa:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024ac:	4b34      	ldr	r3, [pc, #208]	; (8002580 <HAL_UART_MspInit+0x198>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024b2:	4b33      	ldr	r3, [pc, #204]	; (8002580 <HAL_UART_MspInit+0x198>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024b8:	4b31      	ldr	r3, [pc, #196]	; (8002580 <HAL_UART_MspInit+0x198>)
 80024ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024be:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024c0:	4b2f      	ldr	r3, [pc, #188]	; (8002580 <HAL_UART_MspInit+0x198>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024c6:	4b2e      	ldr	r3, [pc, #184]	; (8002580 <HAL_UART_MspInit+0x198>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80024cc:	4b2c      	ldr	r3, [pc, #176]	; (8002580 <HAL_UART_MspInit+0x198>)
 80024ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024d2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80024d4:	4b2a      	ldr	r3, [pc, #168]	; (8002580 <HAL_UART_MspInit+0x198>)
 80024d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024da:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024dc:	4b28      	ldr	r3, [pc, #160]	; (8002580 <HAL_UART_MspInit+0x198>)
 80024de:	2200      	movs	r2, #0
 80024e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80024e2:	4827      	ldr	r0, [pc, #156]	; (8002580 <HAL_UART_MspInit+0x198>)
 80024e4:	f000 fb88 	bl	8002bf8 <HAL_DMA_Init>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 80024ee:	f7ff fcaf 	bl	8001e50 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a22      	ldr	r2, [pc, #136]	; (8002580 <HAL_UART_MspInit+0x198>)
 80024f6:	67da      	str	r2, [r3, #124]	; 0x7c
 80024f8:	4a21      	ldr	r2, [pc, #132]	; (8002580 <HAL_UART_MspInit+0x198>)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 80024fe:	4b22      	ldr	r3, [pc, #136]	; (8002588 <HAL_UART_MspInit+0x1a0>)
 8002500:	4a22      	ldr	r2, [pc, #136]	; (800258c <HAL_UART_MspInit+0x1a4>)
 8002502:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002504:	4b20      	ldr	r3, [pc, #128]	; (8002588 <HAL_UART_MspInit+0x1a0>)
 8002506:	222e      	movs	r2, #46	; 0x2e
 8002508:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800250a:	4b1f      	ldr	r3, [pc, #124]	; (8002588 <HAL_UART_MspInit+0x1a0>)
 800250c:	2240      	movs	r2, #64	; 0x40
 800250e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002510:	4b1d      	ldr	r3, [pc, #116]	; (8002588 <HAL_UART_MspInit+0x1a0>)
 8002512:	2200      	movs	r2, #0
 8002514:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002516:	4b1c      	ldr	r3, [pc, #112]	; (8002588 <HAL_UART_MspInit+0x1a0>)
 8002518:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800251c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800251e:	4b1a      	ldr	r3, [pc, #104]	; (8002588 <HAL_UART_MspInit+0x1a0>)
 8002520:	2200      	movs	r2, #0
 8002522:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002524:	4b18      	ldr	r3, [pc, #96]	; (8002588 <HAL_UART_MspInit+0x1a0>)
 8002526:	2200      	movs	r2, #0
 8002528:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800252a:	4b17      	ldr	r3, [pc, #92]	; (8002588 <HAL_UART_MspInit+0x1a0>)
 800252c:	2200      	movs	r2, #0
 800252e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002530:	4b15      	ldr	r3, [pc, #84]	; (8002588 <HAL_UART_MspInit+0x1a0>)
 8002532:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002536:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002538:	4b13      	ldr	r3, [pc, #76]	; (8002588 <HAL_UART_MspInit+0x1a0>)
 800253a:	2200      	movs	r2, #0
 800253c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800253e:	4812      	ldr	r0, [pc, #72]	; (8002588 <HAL_UART_MspInit+0x1a0>)
 8002540:	f000 fb5a 	bl	8002bf8 <HAL_DMA_Init>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 800254a:	f7ff fc81 	bl	8001e50 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a0d      	ldr	r2, [pc, #52]	; (8002588 <HAL_UART_MspInit+0x1a0>)
 8002552:	679a      	str	r2, [r3, #120]	; 0x78
 8002554:	4a0c      	ldr	r2, [pc, #48]	; (8002588 <HAL_UART_MspInit+0x1a0>)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800255a:	2200      	movs	r2, #0
 800255c:	2100      	movs	r1, #0
 800255e:	2027      	movs	r0, #39	; 0x27
 8002560:	f000 fb11 	bl	8002b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002564:	2027      	movs	r0, #39	; 0x27
 8002566:	f000 fb28 	bl	8002bba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800256a:	bf00      	nop
 800256c:	37d8      	adds	r7, #216	; 0xd8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	40004800 	.word	0x40004800
 8002578:	58024400 	.word	0x58024400
 800257c:	58020c00 	.word	0x58020c00
 8002580:	240005ac 	.word	0x240005ac
 8002584:	40020010 	.word	0x40020010
 8002588:	24000624 	.word	0x24000624
 800258c:	40020028 	.word	0x40020028

08002590 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002594:	e7fe      	b.n	8002594 <NMI_Handler+0x4>

08002596 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002596:	b480      	push	{r7}
 8002598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800259a:	e7fe      	b.n	800259a <HardFault_Handler+0x4>

0800259c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025a0:	e7fe      	b.n	80025a0 <MemManage_Handler+0x4>

080025a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025a2:	b480      	push	{r7}
 80025a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025a6:	e7fe      	b.n	80025a6 <BusFault_Handler+0x4>

080025a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025ac:	e7fe      	b.n	80025ac <UsageFault_Handler+0x4>

080025ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025ae:	b480      	push	{r7}
 80025b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025b2:	bf00      	nop
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025c0:	bf00      	nop
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr

080025ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025ca:	b480      	push	{r7}
 80025cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025ce:	bf00      	nop
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025dc:	f000 f9ae 	bl	800293c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025e0:	bf00      	nop
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80025e8:	bf00      	nop
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
	...

080025f4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80025f8:	4802      	ldr	r0, [pc, #8]	; (8002604 <DMA1_Stream0_IRQHandler+0x10>)
 80025fa:	f001 fbbb 	bl	8003d74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80025fe:	bf00      	nop
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	240005ac 	.word	0x240005ac

08002608 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800260c:	4802      	ldr	r0, [pc, #8]	; (8002618 <DMA1_Stream1_IRQHandler+0x10>)
 800260e:	f001 fbb1 	bl	8003d74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002612:	bf00      	nop
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	24000624 	.word	0x24000624

0800261c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002620:	2040      	movs	r0, #64	; 0x40
 8002622:	f003 fb0c 	bl	8005c3e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_FS_OVCR_Pin);
 8002626:	2080      	movs	r0, #128	; 0x80
 8002628:	f003 fb09 	bl	8005c3e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800262c:	bf00      	nop
 800262e:	bd80      	pop	{r7, pc}

08002630 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002634:	4802      	ldr	r0, [pc, #8]	; (8002640 <TIM1_BRK_IRQHandler+0x10>)
 8002636:	f005 ffff 	bl	8008638 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800263a:	bf00      	nop
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	24000224 	.word	0x24000224

08002644 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002648:	4802      	ldr	r0, [pc, #8]	; (8002654 <TIM1_UP_IRQHandler+0x10>)
 800264a:	f005 fff5 	bl	8008638 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800264e:	bf00      	nop
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	24000224 	.word	0x24000224

08002658 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800265c:	4802      	ldr	r0, [pc, #8]	; (8002668 <TIM1_TRG_COM_IRQHandler+0x10>)
 800265e:	f005 ffeb 	bl	8008638 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8002662:	bf00      	nop
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	24000224 	.word	0x24000224

0800266c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002670:	4802      	ldr	r0, [pc, #8]	; (800267c <TIM1_CC_IRQHandler+0x10>)
 8002672:	f005 ffe1 	bl	8008638 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002676:	bf00      	nop
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	24000224 	.word	0x24000224

08002680 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002684:	4802      	ldr	r0, [pc, #8]	; (8002690 <TIM3_IRQHandler+0x10>)
 8002686:	f005 ffd7 	bl	8008638 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800268a:	bf00      	nop
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	240002bc 	.word	0x240002bc

08002694 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002698:	4802      	ldr	r0, [pc, #8]	; (80026a4 <TIM4_IRQHandler+0x10>)
 800269a:	f005 ffcd 	bl	8008638 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800269e:	bf00      	nop
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	24000308 	.word	0x24000308

080026a8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80026ac:	4802      	ldr	r0, [pc, #8]	; (80026b8 <USART3_IRQHandler+0x10>)
 80026ae:	f007 f901 	bl	80098b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80026b2:	bf00      	nop
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	2400051c 	.word	0x2400051c

080026bc <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80026c0:	4803      	ldr	r0, [pc, #12]	; (80026d0 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 80026c2:	f005 ffb9 	bl	8008638 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 80026c6:	4803      	ldr	r0, [pc, #12]	; (80026d4 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 80026c8:	f005 ffb6 	bl	8008638 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80026cc:	bf00      	nop
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	240003a0 	.word	0x240003a0
 80026d4:	240003ec 	.word	0x240003ec

080026d8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80026dc:	4802      	ldr	r0, [pc, #8]	; (80026e8 <TIM5_IRQHandler+0x10>)
 80026de:	f005 ffab 	bl	8008638 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80026e2:	bf00      	nop
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	24000354 	.word	0x24000354

080026ec <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80026f0:	4802      	ldr	r0, [pc, #8]	; (80026fc <TIM15_IRQHandler+0x10>)
 80026f2:	f005 ffa1 	bl	8008638 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 80026f6:	bf00      	nop
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	24000438 	.word	0x24000438

08002700 <TIM24_IRQHandler>:

/**
  * @brief This function handles TIM24 global interrupt.
  */
void TIM24_IRQHandler(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM24_IRQn 0 */

  /* USER CODE END TIM24_IRQn 0 */
  HAL_TIM_IRQHandler(&htim24);
 8002704:	4802      	ldr	r0, [pc, #8]	; (8002710 <TIM24_IRQHandler+0x10>)
 8002706:	f005 ff97 	bl	8008638 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM24_IRQn 1 */

  /* USER CODE END TIM24_IRQn 1 */
}
 800270a:	bf00      	nop
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	240004d0 	.word	0x240004d0

08002714 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002718:	4b32      	ldr	r3, [pc, #200]	; (80027e4 <SystemInit+0xd0>)
 800271a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271e:	4a31      	ldr	r2, [pc, #196]	; (80027e4 <SystemInit+0xd0>)
 8002720:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002724:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002728:	4b2f      	ldr	r3, [pc, #188]	; (80027e8 <SystemInit+0xd4>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 030f 	and.w	r3, r3, #15
 8002730:	2b06      	cmp	r3, #6
 8002732:	d807      	bhi.n	8002744 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002734:	4b2c      	ldr	r3, [pc, #176]	; (80027e8 <SystemInit+0xd4>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f023 030f 	bic.w	r3, r3, #15
 800273c:	4a2a      	ldr	r2, [pc, #168]	; (80027e8 <SystemInit+0xd4>)
 800273e:	f043 0307 	orr.w	r3, r3, #7
 8002742:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002744:	4b29      	ldr	r3, [pc, #164]	; (80027ec <SystemInit+0xd8>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a28      	ldr	r2, [pc, #160]	; (80027ec <SystemInit+0xd8>)
 800274a:	f043 0301 	orr.w	r3, r3, #1
 800274e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002750:	4b26      	ldr	r3, [pc, #152]	; (80027ec <SystemInit+0xd8>)
 8002752:	2200      	movs	r2, #0
 8002754:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002756:	4b25      	ldr	r3, [pc, #148]	; (80027ec <SystemInit+0xd8>)
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	4924      	ldr	r1, [pc, #144]	; (80027ec <SystemInit+0xd8>)
 800275c:	4b24      	ldr	r3, [pc, #144]	; (80027f0 <SystemInit+0xdc>)
 800275e:	4013      	ands	r3, r2
 8002760:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002762:	4b21      	ldr	r3, [pc, #132]	; (80027e8 <SystemInit+0xd4>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0308 	and.w	r3, r3, #8
 800276a:	2b00      	cmp	r3, #0
 800276c:	d007      	beq.n	800277e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800276e:	4b1e      	ldr	r3, [pc, #120]	; (80027e8 <SystemInit+0xd4>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f023 030f 	bic.w	r3, r3, #15
 8002776:	4a1c      	ldr	r2, [pc, #112]	; (80027e8 <SystemInit+0xd4>)
 8002778:	f043 0307 	orr.w	r3, r3, #7
 800277c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800277e:	4b1b      	ldr	r3, [pc, #108]	; (80027ec <SystemInit+0xd8>)
 8002780:	2200      	movs	r2, #0
 8002782:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002784:	4b19      	ldr	r3, [pc, #100]	; (80027ec <SystemInit+0xd8>)
 8002786:	2200      	movs	r2, #0
 8002788:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800278a:	4b18      	ldr	r3, [pc, #96]	; (80027ec <SystemInit+0xd8>)
 800278c:	2200      	movs	r2, #0
 800278e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002790:	4b16      	ldr	r3, [pc, #88]	; (80027ec <SystemInit+0xd8>)
 8002792:	4a18      	ldr	r2, [pc, #96]	; (80027f4 <SystemInit+0xe0>)
 8002794:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002796:	4b15      	ldr	r3, [pc, #84]	; (80027ec <SystemInit+0xd8>)
 8002798:	4a17      	ldr	r2, [pc, #92]	; (80027f8 <SystemInit+0xe4>)
 800279a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800279c:	4b13      	ldr	r3, [pc, #76]	; (80027ec <SystemInit+0xd8>)
 800279e:	4a17      	ldr	r2, [pc, #92]	; (80027fc <SystemInit+0xe8>)
 80027a0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80027a2:	4b12      	ldr	r3, [pc, #72]	; (80027ec <SystemInit+0xd8>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80027a8:	4b10      	ldr	r3, [pc, #64]	; (80027ec <SystemInit+0xd8>)
 80027aa:	4a14      	ldr	r2, [pc, #80]	; (80027fc <SystemInit+0xe8>)
 80027ac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80027ae:	4b0f      	ldr	r3, [pc, #60]	; (80027ec <SystemInit+0xd8>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80027b4:	4b0d      	ldr	r3, [pc, #52]	; (80027ec <SystemInit+0xd8>)
 80027b6:	4a11      	ldr	r2, [pc, #68]	; (80027fc <SystemInit+0xe8>)
 80027b8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80027ba:	4b0c      	ldr	r3, [pc, #48]	; (80027ec <SystemInit+0xd8>)
 80027bc:	2200      	movs	r2, #0
 80027be:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80027c0:	4b0a      	ldr	r3, [pc, #40]	; (80027ec <SystemInit+0xd8>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a09      	ldr	r2, [pc, #36]	; (80027ec <SystemInit+0xd8>)
 80027c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027ca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80027cc:	4b07      	ldr	r3, [pc, #28]	; (80027ec <SystemInit+0xd8>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80027d2:	4b0b      	ldr	r3, [pc, #44]	; (8002800 <SystemInit+0xec>)
 80027d4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80027d8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80027da:	bf00      	nop
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	e000ed00 	.word	0xe000ed00
 80027e8:	52002000 	.word	0x52002000
 80027ec:	58024400 	.word	0x58024400
 80027f0:	eaf6ed7f 	.word	0xeaf6ed7f
 80027f4:	02020200 	.word	0x02020200
 80027f8:	01ff0000 	.word	0x01ff0000
 80027fc:	01010280 	.word	0x01010280
 8002800:	52004000 	.word	0x52004000

08002804 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002804:	f8df d034 	ldr.w	sp, [pc, #52]	; 800283c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002808:	f7ff ff84 	bl	8002714 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800280c:	480c      	ldr	r0, [pc, #48]	; (8002840 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800280e:	490d      	ldr	r1, [pc, #52]	; (8002844 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002810:	4a0d      	ldr	r2, [pc, #52]	; (8002848 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002812:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002814:	e002      	b.n	800281c <LoopCopyDataInit>

08002816 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002816:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002818:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800281a:	3304      	adds	r3, #4

0800281c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800281c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800281e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002820:	d3f9      	bcc.n	8002816 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002822:	4a0a      	ldr	r2, [pc, #40]	; (800284c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002824:	4c0a      	ldr	r4, [pc, #40]	; (8002850 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002826:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002828:	e001      	b.n	800282e <LoopFillZerobss>

0800282a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800282a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800282c:	3204      	adds	r2, #4

0800282e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800282e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002830:	d3fb      	bcc.n	800282a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002832:	f008 fe2d 	bl	800b490 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002836:	f7fd feef 	bl	8000618 <main>
  bx  lr
 800283a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800283c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002840:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002844:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8002848:	0800b550 	.word	0x0800b550
  ldr r2, =_sbss
 800284c:	24000120 	.word	0x24000120
  ldr r4, =_ebss
 8002850:	24000754 	.word	0x24000754

08002854 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002854:	e7fe      	b.n	8002854 <ADC3_IRQHandler>
	...

08002858 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800285e:	2003      	movs	r0, #3
 8002860:	f000 f986 	bl	8002b70 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002864:	f003 ffa4 	bl	80067b0 <HAL_RCC_GetSysClockFreq>
 8002868:	4602      	mov	r2, r0
 800286a:	4b15      	ldr	r3, [pc, #84]	; (80028c0 <HAL_Init+0x68>)
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	0a1b      	lsrs	r3, r3, #8
 8002870:	f003 030f 	and.w	r3, r3, #15
 8002874:	4913      	ldr	r1, [pc, #76]	; (80028c4 <HAL_Init+0x6c>)
 8002876:	5ccb      	ldrb	r3, [r1, r3]
 8002878:	f003 031f 	and.w	r3, r3, #31
 800287c:	fa22 f303 	lsr.w	r3, r2, r3
 8002880:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002882:	4b0f      	ldr	r3, [pc, #60]	; (80028c0 <HAL_Init+0x68>)
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	f003 030f 	and.w	r3, r3, #15
 800288a:	4a0e      	ldr	r2, [pc, #56]	; (80028c4 <HAL_Init+0x6c>)
 800288c:	5cd3      	ldrb	r3, [r2, r3]
 800288e:	f003 031f 	and.w	r3, r3, #31
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	fa22 f303 	lsr.w	r3, r2, r3
 8002898:	4a0b      	ldr	r2, [pc, #44]	; (80028c8 <HAL_Init+0x70>)
 800289a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800289c:	4a0b      	ldr	r2, [pc, #44]	; (80028cc <HAL_Init+0x74>)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028a2:	2000      	movs	r0, #0
 80028a4:	f000 f814 	bl	80028d0 <HAL_InitTick>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e002      	b.n	80028b8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80028b2:	f7ff fad3 	bl	8001e5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	58024400 	.word	0x58024400
 80028c4:	0800b500 	.word	0x0800b500
 80028c8:	24000054 	.word	0x24000054
 80028cc:	24000050 	.word	0x24000050

080028d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80028d8:	4b15      	ldr	r3, [pc, #84]	; (8002930 <HAL_InitTick+0x60>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d101      	bne.n	80028e4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e021      	b.n	8002928 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80028e4:	4b13      	ldr	r3, [pc, #76]	; (8002934 <HAL_InitTick+0x64>)
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	4b11      	ldr	r3, [pc, #68]	; (8002930 <HAL_InitTick+0x60>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	4619      	mov	r1, r3
 80028ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80028f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028fa:	4618      	mov	r0, r3
 80028fc:	f000 f96f 	bl	8002bde <HAL_SYSTICK_Config>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e00e      	b.n	8002928 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2b0f      	cmp	r3, #15
 800290e:	d80a      	bhi.n	8002926 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002910:	2200      	movs	r2, #0
 8002912:	6879      	ldr	r1, [r7, #4]
 8002914:	f04f 30ff 	mov.w	r0, #4294967295
 8002918:	f000 f935 	bl	8002b86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800291c:	4a06      	ldr	r2, [pc, #24]	; (8002938 <HAL_InitTick+0x68>)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002922:	2300      	movs	r3, #0
 8002924:	e000      	b.n	8002928 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
}
 8002928:	4618      	mov	r0, r3
 800292a:	3708      	adds	r7, #8
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	2400005c 	.word	0x2400005c
 8002934:	24000050 	.word	0x24000050
 8002938:	24000058 	.word	0x24000058

0800293c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002940:	4b06      	ldr	r3, [pc, #24]	; (800295c <HAL_IncTick+0x20>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	461a      	mov	r2, r3
 8002946:	4b06      	ldr	r3, [pc, #24]	; (8002960 <HAL_IncTick+0x24>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4413      	add	r3, r2
 800294c:	4a04      	ldr	r2, [pc, #16]	; (8002960 <HAL_IncTick+0x24>)
 800294e:	6013      	str	r3, [r2, #0]
}
 8002950:	bf00      	nop
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	2400005c 	.word	0x2400005c
 8002960:	24000750 	.word	0x24000750

08002964 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  return uwTick;
 8002968:	4b03      	ldr	r3, [pc, #12]	; (8002978 <HAL_GetTick+0x14>)
 800296a:	681b      	ldr	r3, [r3, #0]
}
 800296c:	4618      	mov	r0, r3
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	24000750 	.word	0x24000750

0800297c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002984:	4b06      	ldr	r3, [pc, #24]	; (80029a0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800298c:	4904      	ldr	r1, [pc, #16]	; (80029a0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4313      	orrs	r3, r2
 8002992:	604b      	str	r3, [r1, #4]
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr
 80029a0:	58000400 	.word	0x58000400

080029a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f003 0307 	and.w	r3, r3, #7
 80029b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029b4:	4b0b      	ldr	r3, [pc, #44]	; (80029e4 <__NVIC_SetPriorityGrouping+0x40>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029ba:	68ba      	ldr	r2, [r7, #8]
 80029bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029c0:	4013      	ands	r3, r2
 80029c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80029cc:	4b06      	ldr	r3, [pc, #24]	; (80029e8 <__NVIC_SetPriorityGrouping+0x44>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029d2:	4a04      	ldr	r2, [pc, #16]	; (80029e4 <__NVIC_SetPriorityGrouping+0x40>)
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	60d3      	str	r3, [r2, #12]
}
 80029d8:	bf00      	nop
 80029da:	3714      	adds	r7, #20
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr
 80029e4:	e000ed00 	.word	0xe000ed00
 80029e8:	05fa0000 	.word	0x05fa0000

080029ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029f0:	4b04      	ldr	r3, [pc, #16]	; (8002a04 <__NVIC_GetPriorityGrouping+0x18>)
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	0a1b      	lsrs	r3, r3, #8
 80029f6:	f003 0307 	and.w	r3, r3, #7
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	e000ed00 	.word	0xe000ed00

08002a08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	4603      	mov	r3, r0
 8002a10:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	db0b      	blt.n	8002a32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a1a:	88fb      	ldrh	r3, [r7, #6]
 8002a1c:	f003 021f 	and.w	r2, r3, #31
 8002a20:	4907      	ldr	r1, [pc, #28]	; (8002a40 <__NVIC_EnableIRQ+0x38>)
 8002a22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a26:	095b      	lsrs	r3, r3, #5
 8002a28:	2001      	movs	r0, #1
 8002a2a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	e000e100 	.word	0xe000e100

08002a44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	6039      	str	r1, [r7, #0]
 8002a4e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	db0a      	blt.n	8002a6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	b2da      	uxtb	r2, r3
 8002a5c:	490c      	ldr	r1, [pc, #48]	; (8002a90 <__NVIC_SetPriority+0x4c>)
 8002a5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a62:	0112      	lsls	r2, r2, #4
 8002a64:	b2d2      	uxtb	r2, r2
 8002a66:	440b      	add	r3, r1
 8002a68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a6c:	e00a      	b.n	8002a84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	b2da      	uxtb	r2, r3
 8002a72:	4908      	ldr	r1, [pc, #32]	; (8002a94 <__NVIC_SetPriority+0x50>)
 8002a74:	88fb      	ldrh	r3, [r7, #6]
 8002a76:	f003 030f 	and.w	r3, r3, #15
 8002a7a:	3b04      	subs	r3, #4
 8002a7c:	0112      	lsls	r2, r2, #4
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	440b      	add	r3, r1
 8002a82:	761a      	strb	r2, [r3, #24]
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	e000e100 	.word	0xe000e100
 8002a94:	e000ed00 	.word	0xe000ed00

08002a98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b089      	sub	sp, #36	; 0x24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f003 0307 	and.w	r3, r3, #7
 8002aaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	f1c3 0307 	rsb	r3, r3, #7
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	bf28      	it	cs
 8002ab6:	2304      	movcs	r3, #4
 8002ab8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	3304      	adds	r3, #4
 8002abe:	2b06      	cmp	r3, #6
 8002ac0:	d902      	bls.n	8002ac8 <NVIC_EncodePriority+0x30>
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	3b03      	subs	r3, #3
 8002ac6:	e000      	b.n	8002aca <NVIC_EncodePriority+0x32>
 8002ac8:	2300      	movs	r3, #0
 8002aca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002acc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	43da      	mvns	r2, r3
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	401a      	ands	r2, r3
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aea:	43d9      	mvns	r1, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002af0:	4313      	orrs	r3, r2
         );
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3724      	adds	r7, #36	; 0x24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
	...

08002b00 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002b04:	f3bf 8f4f 	dsb	sy
}
 8002b08:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002b0a:	4b06      	ldr	r3, [pc, #24]	; (8002b24 <__NVIC_SystemReset+0x24>)
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002b12:	4904      	ldr	r1, [pc, #16]	; (8002b24 <__NVIC_SystemReset+0x24>)
 8002b14:	4b04      	ldr	r3, [pc, #16]	; (8002b28 <__NVIC_SystemReset+0x28>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002b1a:	f3bf 8f4f 	dsb	sy
}
 8002b1e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002b20:	bf00      	nop
 8002b22:	e7fd      	b.n	8002b20 <__NVIC_SystemReset+0x20>
 8002b24:	e000ed00 	.word	0xe000ed00
 8002b28:	05fa0004 	.word	0x05fa0004

08002b2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	3b01      	subs	r3, #1
 8002b38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b3c:	d301      	bcc.n	8002b42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e00f      	b.n	8002b62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b42:	4a0a      	ldr	r2, [pc, #40]	; (8002b6c <SysTick_Config+0x40>)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	3b01      	subs	r3, #1
 8002b48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b4a:	210f      	movs	r1, #15
 8002b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b50:	f7ff ff78 	bl	8002a44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b54:	4b05      	ldr	r3, [pc, #20]	; (8002b6c <SysTick_Config+0x40>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b5a:	4b04      	ldr	r3, [pc, #16]	; (8002b6c <SysTick_Config+0x40>)
 8002b5c:	2207      	movs	r2, #7
 8002b5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	e000e010 	.word	0xe000e010

08002b70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f7ff ff13 	bl	80029a4 <__NVIC_SetPriorityGrouping>
}
 8002b7e:	bf00      	nop
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b086      	sub	sp, #24
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	60b9      	str	r1, [r7, #8]
 8002b90:	607a      	str	r2, [r7, #4]
 8002b92:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b94:	f7ff ff2a 	bl	80029ec <__NVIC_GetPriorityGrouping>
 8002b98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	68b9      	ldr	r1, [r7, #8]
 8002b9e:	6978      	ldr	r0, [r7, #20]
 8002ba0:	f7ff ff7a 	bl	8002a98 <NVIC_EncodePriority>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002baa:	4611      	mov	r1, r2
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff ff49 	bl	8002a44 <__NVIC_SetPriority>
}
 8002bb2:	bf00      	nop
 8002bb4:	3718      	adds	r7, #24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b082      	sub	sp, #8
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff ff1d 	bl	8002a08 <__NVIC_EnableIRQ>
}
 8002bce:	bf00      	nop
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8002bda:	f7ff ff91 	bl	8002b00 <__NVIC_SystemReset>

08002bde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b082      	sub	sp, #8
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7ff ffa0 	bl	8002b2c <SysTick_Config>
 8002bec:	4603      	mov	r3, r0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
	...

08002bf8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002c00:	f7ff feb0 	bl	8002964 <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d101      	bne.n	8002c10 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e314      	b.n	800323a <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a66      	ldr	r2, [pc, #408]	; (8002db0 <HAL_DMA_Init+0x1b8>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d04a      	beq.n	8002cb0 <HAL_DMA_Init+0xb8>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a65      	ldr	r2, [pc, #404]	; (8002db4 <HAL_DMA_Init+0x1bc>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d045      	beq.n	8002cb0 <HAL_DMA_Init+0xb8>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a63      	ldr	r2, [pc, #396]	; (8002db8 <HAL_DMA_Init+0x1c0>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d040      	beq.n	8002cb0 <HAL_DMA_Init+0xb8>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a62      	ldr	r2, [pc, #392]	; (8002dbc <HAL_DMA_Init+0x1c4>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d03b      	beq.n	8002cb0 <HAL_DMA_Init+0xb8>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a60      	ldr	r2, [pc, #384]	; (8002dc0 <HAL_DMA_Init+0x1c8>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d036      	beq.n	8002cb0 <HAL_DMA_Init+0xb8>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a5f      	ldr	r2, [pc, #380]	; (8002dc4 <HAL_DMA_Init+0x1cc>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d031      	beq.n	8002cb0 <HAL_DMA_Init+0xb8>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a5d      	ldr	r2, [pc, #372]	; (8002dc8 <HAL_DMA_Init+0x1d0>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d02c      	beq.n	8002cb0 <HAL_DMA_Init+0xb8>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a5c      	ldr	r2, [pc, #368]	; (8002dcc <HAL_DMA_Init+0x1d4>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d027      	beq.n	8002cb0 <HAL_DMA_Init+0xb8>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a5a      	ldr	r2, [pc, #360]	; (8002dd0 <HAL_DMA_Init+0x1d8>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d022      	beq.n	8002cb0 <HAL_DMA_Init+0xb8>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a59      	ldr	r2, [pc, #356]	; (8002dd4 <HAL_DMA_Init+0x1dc>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d01d      	beq.n	8002cb0 <HAL_DMA_Init+0xb8>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a57      	ldr	r2, [pc, #348]	; (8002dd8 <HAL_DMA_Init+0x1e0>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d018      	beq.n	8002cb0 <HAL_DMA_Init+0xb8>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a56      	ldr	r2, [pc, #344]	; (8002ddc <HAL_DMA_Init+0x1e4>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d013      	beq.n	8002cb0 <HAL_DMA_Init+0xb8>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a54      	ldr	r2, [pc, #336]	; (8002de0 <HAL_DMA_Init+0x1e8>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d00e      	beq.n	8002cb0 <HAL_DMA_Init+0xb8>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a53      	ldr	r2, [pc, #332]	; (8002de4 <HAL_DMA_Init+0x1ec>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d009      	beq.n	8002cb0 <HAL_DMA_Init+0xb8>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a51      	ldr	r2, [pc, #324]	; (8002de8 <HAL_DMA_Init+0x1f0>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d004      	beq.n	8002cb0 <HAL_DMA_Init+0xb8>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a50      	ldr	r2, [pc, #320]	; (8002dec <HAL_DMA_Init+0x1f4>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d101      	bne.n	8002cb4 <HAL_DMA_Init+0xbc>
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e000      	b.n	8002cb6 <HAL_DMA_Init+0xbe>
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f000 813c 	beq.w	8002f34 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2202      	movs	r2, #2
 8002cc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a37      	ldr	r2, [pc, #220]	; (8002db0 <HAL_DMA_Init+0x1b8>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d04a      	beq.n	8002d6c <HAL_DMA_Init+0x174>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a36      	ldr	r2, [pc, #216]	; (8002db4 <HAL_DMA_Init+0x1bc>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d045      	beq.n	8002d6c <HAL_DMA_Init+0x174>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a34      	ldr	r2, [pc, #208]	; (8002db8 <HAL_DMA_Init+0x1c0>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d040      	beq.n	8002d6c <HAL_DMA_Init+0x174>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a33      	ldr	r2, [pc, #204]	; (8002dbc <HAL_DMA_Init+0x1c4>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d03b      	beq.n	8002d6c <HAL_DMA_Init+0x174>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a31      	ldr	r2, [pc, #196]	; (8002dc0 <HAL_DMA_Init+0x1c8>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d036      	beq.n	8002d6c <HAL_DMA_Init+0x174>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a30      	ldr	r2, [pc, #192]	; (8002dc4 <HAL_DMA_Init+0x1cc>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d031      	beq.n	8002d6c <HAL_DMA_Init+0x174>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a2e      	ldr	r2, [pc, #184]	; (8002dc8 <HAL_DMA_Init+0x1d0>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d02c      	beq.n	8002d6c <HAL_DMA_Init+0x174>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a2d      	ldr	r2, [pc, #180]	; (8002dcc <HAL_DMA_Init+0x1d4>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d027      	beq.n	8002d6c <HAL_DMA_Init+0x174>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a2b      	ldr	r2, [pc, #172]	; (8002dd0 <HAL_DMA_Init+0x1d8>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d022      	beq.n	8002d6c <HAL_DMA_Init+0x174>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a2a      	ldr	r2, [pc, #168]	; (8002dd4 <HAL_DMA_Init+0x1dc>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d01d      	beq.n	8002d6c <HAL_DMA_Init+0x174>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a28      	ldr	r2, [pc, #160]	; (8002dd8 <HAL_DMA_Init+0x1e0>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d018      	beq.n	8002d6c <HAL_DMA_Init+0x174>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a27      	ldr	r2, [pc, #156]	; (8002ddc <HAL_DMA_Init+0x1e4>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d013      	beq.n	8002d6c <HAL_DMA_Init+0x174>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a25      	ldr	r2, [pc, #148]	; (8002de0 <HAL_DMA_Init+0x1e8>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d00e      	beq.n	8002d6c <HAL_DMA_Init+0x174>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a24      	ldr	r2, [pc, #144]	; (8002de4 <HAL_DMA_Init+0x1ec>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d009      	beq.n	8002d6c <HAL_DMA_Init+0x174>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a22      	ldr	r2, [pc, #136]	; (8002de8 <HAL_DMA_Init+0x1f0>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d004      	beq.n	8002d6c <HAL_DMA_Init+0x174>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a21      	ldr	r2, [pc, #132]	; (8002dec <HAL_DMA_Init+0x1f4>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d108      	bne.n	8002d7e <HAL_DMA_Init+0x186>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f022 0201 	bic.w	r2, r2, #1
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	e007      	b.n	8002d8e <HAL_DMA_Init+0x196>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f022 0201 	bic.w	r2, r2, #1
 8002d8c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002d8e:	e02f      	b.n	8002df0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d90:	f7ff fde8 	bl	8002964 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b05      	cmp	r3, #5
 8002d9c:	d928      	bls.n	8002df0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2220      	movs	r2, #32
 8002da2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2203      	movs	r2, #3
 8002da8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e244      	b.n	800323a <HAL_DMA_Init+0x642>
 8002db0:	40020010 	.word	0x40020010
 8002db4:	40020028 	.word	0x40020028
 8002db8:	40020040 	.word	0x40020040
 8002dbc:	40020058 	.word	0x40020058
 8002dc0:	40020070 	.word	0x40020070
 8002dc4:	40020088 	.word	0x40020088
 8002dc8:	400200a0 	.word	0x400200a0
 8002dcc:	400200b8 	.word	0x400200b8
 8002dd0:	40020410 	.word	0x40020410
 8002dd4:	40020428 	.word	0x40020428
 8002dd8:	40020440 	.word	0x40020440
 8002ddc:	40020458 	.word	0x40020458
 8002de0:	40020470 	.word	0x40020470
 8002de4:	40020488 	.word	0x40020488
 8002de8:	400204a0 	.word	0x400204a0
 8002dec:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1c8      	bne.n	8002d90 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	4b84      	ldr	r3, [pc, #528]	; (800301c <HAL_DMA_Init+0x424>)
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002e16:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e22:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e2e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002e36:	697a      	ldr	r2, [r7, #20]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e40:	2b04      	cmp	r3, #4
 8002e42:	d107      	bne.n	8002e54 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	2b28      	cmp	r3, #40	; 0x28
 8002e5a:	d903      	bls.n	8002e64 <HAL_DMA_Init+0x26c>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	2b2e      	cmp	r3, #46	; 0x2e
 8002e62:	d91f      	bls.n	8002ea4 <HAL_DMA_Init+0x2ac>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	2b3e      	cmp	r3, #62	; 0x3e
 8002e6a:	d903      	bls.n	8002e74 <HAL_DMA_Init+0x27c>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	2b42      	cmp	r3, #66	; 0x42
 8002e72:	d917      	bls.n	8002ea4 <HAL_DMA_Init+0x2ac>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	2b46      	cmp	r3, #70	; 0x46
 8002e7a:	d903      	bls.n	8002e84 <HAL_DMA_Init+0x28c>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	2b48      	cmp	r3, #72	; 0x48
 8002e82:	d90f      	bls.n	8002ea4 <HAL_DMA_Init+0x2ac>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	2b4e      	cmp	r3, #78	; 0x4e
 8002e8a:	d903      	bls.n	8002e94 <HAL_DMA_Init+0x29c>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	2b52      	cmp	r3, #82	; 0x52
 8002e92:	d907      	bls.n	8002ea4 <HAL_DMA_Init+0x2ac>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	2b73      	cmp	r3, #115	; 0x73
 8002e9a:	d905      	bls.n	8002ea8 <HAL_DMA_Init+0x2b0>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	2b77      	cmp	r3, #119	; 0x77
 8002ea2:	d801      	bhi.n	8002ea8 <HAL_DMA_Init+0x2b0>
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e000      	b.n	8002eaa <HAL_DMA_Init+0x2b2>
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002eb4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	697a      	ldr	r2, [r7, #20]
 8002ebc:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	f023 0307 	bic.w	r3, r3, #7
 8002ecc:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002edc:	2b04      	cmp	r3, #4
 8002ede:	d117      	bne.n	8002f10 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee4:	697a      	ldr	r2, [r7, #20]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00e      	beq.n	8002f10 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f001 ff1a 	bl	8004d2c <DMA_CheckFifoParam>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d008      	beq.n	8002f10 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2240      	movs	r2, #64	; 0x40
 8002f02:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e194      	b.n	800323a <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f001 fe55 	bl	8004bc8 <DMA_CalcBaseAndBitshift>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f26:	f003 031f 	and.w	r3, r3, #31
 8002f2a:	223f      	movs	r2, #63	; 0x3f
 8002f2c:	409a      	lsls	r2, r3
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	609a      	str	r2, [r3, #8]
 8002f32:	e0ca      	b.n	80030ca <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a39      	ldr	r2, [pc, #228]	; (8003020 <HAL_DMA_Init+0x428>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d022      	beq.n	8002f84 <HAL_DMA_Init+0x38c>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a38      	ldr	r2, [pc, #224]	; (8003024 <HAL_DMA_Init+0x42c>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d01d      	beq.n	8002f84 <HAL_DMA_Init+0x38c>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a36      	ldr	r2, [pc, #216]	; (8003028 <HAL_DMA_Init+0x430>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d018      	beq.n	8002f84 <HAL_DMA_Init+0x38c>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a35      	ldr	r2, [pc, #212]	; (800302c <HAL_DMA_Init+0x434>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d013      	beq.n	8002f84 <HAL_DMA_Init+0x38c>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a33      	ldr	r2, [pc, #204]	; (8003030 <HAL_DMA_Init+0x438>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d00e      	beq.n	8002f84 <HAL_DMA_Init+0x38c>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a32      	ldr	r2, [pc, #200]	; (8003034 <HAL_DMA_Init+0x43c>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d009      	beq.n	8002f84 <HAL_DMA_Init+0x38c>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a30      	ldr	r2, [pc, #192]	; (8003038 <HAL_DMA_Init+0x440>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d004      	beq.n	8002f84 <HAL_DMA_Init+0x38c>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a2f      	ldr	r2, [pc, #188]	; (800303c <HAL_DMA_Init+0x444>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d101      	bne.n	8002f88 <HAL_DMA_Init+0x390>
 8002f84:	2301      	movs	r3, #1
 8002f86:	e000      	b.n	8002f8a <HAL_DMA_Init+0x392>
 8002f88:	2300      	movs	r3, #0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f000 8094 	beq.w	80030b8 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a22      	ldr	r2, [pc, #136]	; (8003020 <HAL_DMA_Init+0x428>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d021      	beq.n	8002fde <HAL_DMA_Init+0x3e6>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a21      	ldr	r2, [pc, #132]	; (8003024 <HAL_DMA_Init+0x42c>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d01c      	beq.n	8002fde <HAL_DMA_Init+0x3e6>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a1f      	ldr	r2, [pc, #124]	; (8003028 <HAL_DMA_Init+0x430>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d017      	beq.n	8002fde <HAL_DMA_Init+0x3e6>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a1e      	ldr	r2, [pc, #120]	; (800302c <HAL_DMA_Init+0x434>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d012      	beq.n	8002fde <HAL_DMA_Init+0x3e6>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a1c      	ldr	r2, [pc, #112]	; (8003030 <HAL_DMA_Init+0x438>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d00d      	beq.n	8002fde <HAL_DMA_Init+0x3e6>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a1b      	ldr	r2, [pc, #108]	; (8003034 <HAL_DMA_Init+0x43c>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d008      	beq.n	8002fde <HAL_DMA_Init+0x3e6>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a19      	ldr	r2, [pc, #100]	; (8003038 <HAL_DMA_Init+0x440>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d003      	beq.n	8002fde <HAL_DMA_Init+0x3e6>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a18      	ldr	r2, [pc, #96]	; (800303c <HAL_DMA_Init+0x444>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	4b11      	ldr	r3, [pc, #68]	; (8003040 <HAL_DMA_Init+0x448>)
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	2b40      	cmp	r3, #64	; 0x40
 8003006:	d01d      	beq.n	8003044 <HAL_DMA_Init+0x44c>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	2b80      	cmp	r3, #128	; 0x80
 800300e:	d102      	bne.n	8003016 <HAL_DMA_Init+0x41e>
 8003010:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003014:	e017      	b.n	8003046 <HAL_DMA_Init+0x44e>
 8003016:	2300      	movs	r3, #0
 8003018:	e015      	b.n	8003046 <HAL_DMA_Init+0x44e>
 800301a:	bf00      	nop
 800301c:	fe10803f 	.word	0xfe10803f
 8003020:	58025408 	.word	0x58025408
 8003024:	5802541c 	.word	0x5802541c
 8003028:	58025430 	.word	0x58025430
 800302c:	58025444 	.word	0x58025444
 8003030:	58025458 	.word	0x58025458
 8003034:	5802546c 	.word	0x5802546c
 8003038:	58025480 	.word	0x58025480
 800303c:	58025494 	.word	0x58025494
 8003040:	fffe000f 	.word	0xfffe000f
 8003044:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	68d2      	ldr	r2, [r2, #12]
 800304a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800304c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003054:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800305c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003064:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800306c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003074:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	4313      	orrs	r3, r2
 800307a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	697a      	ldr	r2, [r7, #20]
 8003082:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	461a      	mov	r2, r3
 800308a:	4b6e      	ldr	r3, [pc, #440]	; (8003244 <HAL_DMA_Init+0x64c>)
 800308c:	4413      	add	r3, r2
 800308e:	4a6e      	ldr	r2, [pc, #440]	; (8003248 <HAL_DMA_Init+0x650>)
 8003090:	fba2 2303 	umull	r2, r3, r2, r3
 8003094:	091b      	lsrs	r3, r3, #4
 8003096:	009a      	lsls	r2, r3, #2
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f001 fd93 	bl	8004bc8 <DMA_CalcBaseAndBitshift>
 80030a2:	4603      	mov	r3, r0
 80030a4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030aa:	f003 031f 	and.w	r3, r3, #31
 80030ae:	2201      	movs	r2, #1
 80030b0:	409a      	lsls	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	605a      	str	r2, [r3, #4]
 80030b6:	e008      	b.n	80030ca <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2240      	movs	r2, #64	; 0x40
 80030bc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2203      	movs	r2, #3
 80030c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e0b7      	b.n	800323a <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a5f      	ldr	r2, [pc, #380]	; (800324c <HAL_DMA_Init+0x654>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d072      	beq.n	80031ba <HAL_DMA_Init+0x5c2>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a5d      	ldr	r2, [pc, #372]	; (8003250 <HAL_DMA_Init+0x658>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d06d      	beq.n	80031ba <HAL_DMA_Init+0x5c2>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a5c      	ldr	r2, [pc, #368]	; (8003254 <HAL_DMA_Init+0x65c>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d068      	beq.n	80031ba <HAL_DMA_Init+0x5c2>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a5a      	ldr	r2, [pc, #360]	; (8003258 <HAL_DMA_Init+0x660>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d063      	beq.n	80031ba <HAL_DMA_Init+0x5c2>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a59      	ldr	r2, [pc, #356]	; (800325c <HAL_DMA_Init+0x664>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d05e      	beq.n	80031ba <HAL_DMA_Init+0x5c2>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a57      	ldr	r2, [pc, #348]	; (8003260 <HAL_DMA_Init+0x668>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d059      	beq.n	80031ba <HAL_DMA_Init+0x5c2>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a56      	ldr	r2, [pc, #344]	; (8003264 <HAL_DMA_Init+0x66c>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d054      	beq.n	80031ba <HAL_DMA_Init+0x5c2>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a54      	ldr	r2, [pc, #336]	; (8003268 <HAL_DMA_Init+0x670>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d04f      	beq.n	80031ba <HAL_DMA_Init+0x5c2>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a53      	ldr	r2, [pc, #332]	; (800326c <HAL_DMA_Init+0x674>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d04a      	beq.n	80031ba <HAL_DMA_Init+0x5c2>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a51      	ldr	r2, [pc, #324]	; (8003270 <HAL_DMA_Init+0x678>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d045      	beq.n	80031ba <HAL_DMA_Init+0x5c2>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a50      	ldr	r2, [pc, #320]	; (8003274 <HAL_DMA_Init+0x67c>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d040      	beq.n	80031ba <HAL_DMA_Init+0x5c2>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a4e      	ldr	r2, [pc, #312]	; (8003278 <HAL_DMA_Init+0x680>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d03b      	beq.n	80031ba <HAL_DMA_Init+0x5c2>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a4d      	ldr	r2, [pc, #308]	; (800327c <HAL_DMA_Init+0x684>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d036      	beq.n	80031ba <HAL_DMA_Init+0x5c2>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a4b      	ldr	r2, [pc, #300]	; (8003280 <HAL_DMA_Init+0x688>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d031      	beq.n	80031ba <HAL_DMA_Init+0x5c2>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a4a      	ldr	r2, [pc, #296]	; (8003284 <HAL_DMA_Init+0x68c>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d02c      	beq.n	80031ba <HAL_DMA_Init+0x5c2>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a48      	ldr	r2, [pc, #288]	; (8003288 <HAL_DMA_Init+0x690>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d027      	beq.n	80031ba <HAL_DMA_Init+0x5c2>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a47      	ldr	r2, [pc, #284]	; (800328c <HAL_DMA_Init+0x694>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d022      	beq.n	80031ba <HAL_DMA_Init+0x5c2>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a45      	ldr	r2, [pc, #276]	; (8003290 <HAL_DMA_Init+0x698>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d01d      	beq.n	80031ba <HAL_DMA_Init+0x5c2>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a44      	ldr	r2, [pc, #272]	; (8003294 <HAL_DMA_Init+0x69c>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d018      	beq.n	80031ba <HAL_DMA_Init+0x5c2>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a42      	ldr	r2, [pc, #264]	; (8003298 <HAL_DMA_Init+0x6a0>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d013      	beq.n	80031ba <HAL_DMA_Init+0x5c2>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a41      	ldr	r2, [pc, #260]	; (800329c <HAL_DMA_Init+0x6a4>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d00e      	beq.n	80031ba <HAL_DMA_Init+0x5c2>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a3f      	ldr	r2, [pc, #252]	; (80032a0 <HAL_DMA_Init+0x6a8>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d009      	beq.n	80031ba <HAL_DMA_Init+0x5c2>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a3e      	ldr	r2, [pc, #248]	; (80032a4 <HAL_DMA_Init+0x6ac>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d004      	beq.n	80031ba <HAL_DMA_Init+0x5c2>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a3c      	ldr	r2, [pc, #240]	; (80032a8 <HAL_DMA_Init+0x6b0>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d101      	bne.n	80031be <HAL_DMA_Init+0x5c6>
 80031ba:	2301      	movs	r3, #1
 80031bc:	e000      	b.n	80031c0 <HAL_DMA_Init+0x5c8>
 80031be:	2300      	movs	r3, #0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d032      	beq.n	800322a <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f001 fe2d 	bl	8004e24 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	2b80      	cmp	r3, #128	; 0x80
 80031d0:	d102      	bne.n	80031d8 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685a      	ldr	r2, [r3, #4]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031e0:	b2d2      	uxtb	r2, r2
 80031e2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80031ec:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d010      	beq.n	8003218 <HAL_DMA_Init+0x620>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	2b08      	cmp	r3, #8
 80031fc:	d80c      	bhi.n	8003218 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f001 feaa 	bl	8004f58 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003208:	2200      	movs	r2, #0
 800320a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003214:	605a      	str	r2, [r3, #4]
 8003216:	e008      	b.n	800322a <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3718      	adds	r7, #24
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	a7fdabf8 	.word	0xa7fdabf8
 8003248:	cccccccd 	.word	0xcccccccd
 800324c:	40020010 	.word	0x40020010
 8003250:	40020028 	.word	0x40020028
 8003254:	40020040 	.word	0x40020040
 8003258:	40020058 	.word	0x40020058
 800325c:	40020070 	.word	0x40020070
 8003260:	40020088 	.word	0x40020088
 8003264:	400200a0 	.word	0x400200a0
 8003268:	400200b8 	.word	0x400200b8
 800326c:	40020410 	.word	0x40020410
 8003270:	40020428 	.word	0x40020428
 8003274:	40020440 	.word	0x40020440
 8003278:	40020458 	.word	0x40020458
 800327c:	40020470 	.word	0x40020470
 8003280:	40020488 	.word	0x40020488
 8003284:	400204a0 	.word	0x400204a0
 8003288:	400204b8 	.word	0x400204b8
 800328c:	58025408 	.word	0x58025408
 8003290:	5802541c 	.word	0x5802541c
 8003294:	58025430 	.word	0x58025430
 8003298:	58025444 	.word	0x58025444
 800329c:	58025458 	.word	0x58025458
 80032a0:	5802546c 	.word	0x5802546c
 80032a4:	58025480 	.word	0x58025480
 80032a8:	58025494 	.word	0x58025494

080032ac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80032b4:	f7ff fb56 	bl	8002964 <HAL_GetTick>
 80032b8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d101      	bne.n	80032c4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e2dc      	b.n	800387e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d008      	beq.n	80032e2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2280      	movs	r2, #128	; 0x80
 80032d4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e2cd      	b.n	800387e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a76      	ldr	r2, [pc, #472]	; (80034c0 <HAL_DMA_Abort+0x214>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d04a      	beq.n	8003382 <HAL_DMA_Abort+0xd6>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a74      	ldr	r2, [pc, #464]	; (80034c4 <HAL_DMA_Abort+0x218>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d045      	beq.n	8003382 <HAL_DMA_Abort+0xd6>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a73      	ldr	r2, [pc, #460]	; (80034c8 <HAL_DMA_Abort+0x21c>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d040      	beq.n	8003382 <HAL_DMA_Abort+0xd6>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a71      	ldr	r2, [pc, #452]	; (80034cc <HAL_DMA_Abort+0x220>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d03b      	beq.n	8003382 <HAL_DMA_Abort+0xd6>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a70      	ldr	r2, [pc, #448]	; (80034d0 <HAL_DMA_Abort+0x224>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d036      	beq.n	8003382 <HAL_DMA_Abort+0xd6>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a6e      	ldr	r2, [pc, #440]	; (80034d4 <HAL_DMA_Abort+0x228>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d031      	beq.n	8003382 <HAL_DMA_Abort+0xd6>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a6d      	ldr	r2, [pc, #436]	; (80034d8 <HAL_DMA_Abort+0x22c>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d02c      	beq.n	8003382 <HAL_DMA_Abort+0xd6>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a6b      	ldr	r2, [pc, #428]	; (80034dc <HAL_DMA_Abort+0x230>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d027      	beq.n	8003382 <HAL_DMA_Abort+0xd6>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a6a      	ldr	r2, [pc, #424]	; (80034e0 <HAL_DMA_Abort+0x234>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d022      	beq.n	8003382 <HAL_DMA_Abort+0xd6>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a68      	ldr	r2, [pc, #416]	; (80034e4 <HAL_DMA_Abort+0x238>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d01d      	beq.n	8003382 <HAL_DMA_Abort+0xd6>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a67      	ldr	r2, [pc, #412]	; (80034e8 <HAL_DMA_Abort+0x23c>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d018      	beq.n	8003382 <HAL_DMA_Abort+0xd6>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a65      	ldr	r2, [pc, #404]	; (80034ec <HAL_DMA_Abort+0x240>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d013      	beq.n	8003382 <HAL_DMA_Abort+0xd6>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a64      	ldr	r2, [pc, #400]	; (80034f0 <HAL_DMA_Abort+0x244>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d00e      	beq.n	8003382 <HAL_DMA_Abort+0xd6>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a62      	ldr	r2, [pc, #392]	; (80034f4 <HAL_DMA_Abort+0x248>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d009      	beq.n	8003382 <HAL_DMA_Abort+0xd6>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a61      	ldr	r2, [pc, #388]	; (80034f8 <HAL_DMA_Abort+0x24c>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d004      	beq.n	8003382 <HAL_DMA_Abort+0xd6>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a5f      	ldr	r2, [pc, #380]	; (80034fc <HAL_DMA_Abort+0x250>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d101      	bne.n	8003386 <HAL_DMA_Abort+0xda>
 8003382:	2301      	movs	r3, #1
 8003384:	e000      	b.n	8003388 <HAL_DMA_Abort+0xdc>
 8003386:	2300      	movs	r3, #0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d013      	beq.n	80033b4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f022 021e 	bic.w	r2, r2, #30
 800339a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	695a      	ldr	r2, [r3, #20]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033aa:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	617b      	str	r3, [r7, #20]
 80033b2:	e00a      	b.n	80033ca <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f022 020e 	bic.w	r2, r2, #14
 80033c2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a3c      	ldr	r2, [pc, #240]	; (80034c0 <HAL_DMA_Abort+0x214>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d072      	beq.n	80034ba <HAL_DMA_Abort+0x20e>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a3a      	ldr	r2, [pc, #232]	; (80034c4 <HAL_DMA_Abort+0x218>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d06d      	beq.n	80034ba <HAL_DMA_Abort+0x20e>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a39      	ldr	r2, [pc, #228]	; (80034c8 <HAL_DMA_Abort+0x21c>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d068      	beq.n	80034ba <HAL_DMA_Abort+0x20e>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a37      	ldr	r2, [pc, #220]	; (80034cc <HAL_DMA_Abort+0x220>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d063      	beq.n	80034ba <HAL_DMA_Abort+0x20e>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a36      	ldr	r2, [pc, #216]	; (80034d0 <HAL_DMA_Abort+0x224>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d05e      	beq.n	80034ba <HAL_DMA_Abort+0x20e>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a34      	ldr	r2, [pc, #208]	; (80034d4 <HAL_DMA_Abort+0x228>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d059      	beq.n	80034ba <HAL_DMA_Abort+0x20e>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a33      	ldr	r2, [pc, #204]	; (80034d8 <HAL_DMA_Abort+0x22c>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d054      	beq.n	80034ba <HAL_DMA_Abort+0x20e>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a31      	ldr	r2, [pc, #196]	; (80034dc <HAL_DMA_Abort+0x230>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d04f      	beq.n	80034ba <HAL_DMA_Abort+0x20e>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a30      	ldr	r2, [pc, #192]	; (80034e0 <HAL_DMA_Abort+0x234>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d04a      	beq.n	80034ba <HAL_DMA_Abort+0x20e>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a2e      	ldr	r2, [pc, #184]	; (80034e4 <HAL_DMA_Abort+0x238>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d045      	beq.n	80034ba <HAL_DMA_Abort+0x20e>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a2d      	ldr	r2, [pc, #180]	; (80034e8 <HAL_DMA_Abort+0x23c>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d040      	beq.n	80034ba <HAL_DMA_Abort+0x20e>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a2b      	ldr	r2, [pc, #172]	; (80034ec <HAL_DMA_Abort+0x240>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d03b      	beq.n	80034ba <HAL_DMA_Abort+0x20e>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a2a      	ldr	r2, [pc, #168]	; (80034f0 <HAL_DMA_Abort+0x244>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d036      	beq.n	80034ba <HAL_DMA_Abort+0x20e>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a28      	ldr	r2, [pc, #160]	; (80034f4 <HAL_DMA_Abort+0x248>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d031      	beq.n	80034ba <HAL_DMA_Abort+0x20e>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a27      	ldr	r2, [pc, #156]	; (80034f8 <HAL_DMA_Abort+0x24c>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d02c      	beq.n	80034ba <HAL_DMA_Abort+0x20e>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a25      	ldr	r2, [pc, #148]	; (80034fc <HAL_DMA_Abort+0x250>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d027      	beq.n	80034ba <HAL_DMA_Abort+0x20e>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a24      	ldr	r2, [pc, #144]	; (8003500 <HAL_DMA_Abort+0x254>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d022      	beq.n	80034ba <HAL_DMA_Abort+0x20e>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a22      	ldr	r2, [pc, #136]	; (8003504 <HAL_DMA_Abort+0x258>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d01d      	beq.n	80034ba <HAL_DMA_Abort+0x20e>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a21      	ldr	r2, [pc, #132]	; (8003508 <HAL_DMA_Abort+0x25c>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d018      	beq.n	80034ba <HAL_DMA_Abort+0x20e>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a1f      	ldr	r2, [pc, #124]	; (800350c <HAL_DMA_Abort+0x260>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d013      	beq.n	80034ba <HAL_DMA_Abort+0x20e>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a1e      	ldr	r2, [pc, #120]	; (8003510 <HAL_DMA_Abort+0x264>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d00e      	beq.n	80034ba <HAL_DMA_Abort+0x20e>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a1c      	ldr	r2, [pc, #112]	; (8003514 <HAL_DMA_Abort+0x268>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d009      	beq.n	80034ba <HAL_DMA_Abort+0x20e>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a1b      	ldr	r2, [pc, #108]	; (8003518 <HAL_DMA_Abort+0x26c>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d004      	beq.n	80034ba <HAL_DMA_Abort+0x20e>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a19      	ldr	r2, [pc, #100]	; (800351c <HAL_DMA_Abort+0x270>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d132      	bne.n	8003520 <HAL_DMA_Abort+0x274>
 80034ba:	2301      	movs	r3, #1
 80034bc:	e031      	b.n	8003522 <HAL_DMA_Abort+0x276>
 80034be:	bf00      	nop
 80034c0:	40020010 	.word	0x40020010
 80034c4:	40020028 	.word	0x40020028
 80034c8:	40020040 	.word	0x40020040
 80034cc:	40020058 	.word	0x40020058
 80034d0:	40020070 	.word	0x40020070
 80034d4:	40020088 	.word	0x40020088
 80034d8:	400200a0 	.word	0x400200a0
 80034dc:	400200b8 	.word	0x400200b8
 80034e0:	40020410 	.word	0x40020410
 80034e4:	40020428 	.word	0x40020428
 80034e8:	40020440 	.word	0x40020440
 80034ec:	40020458 	.word	0x40020458
 80034f0:	40020470 	.word	0x40020470
 80034f4:	40020488 	.word	0x40020488
 80034f8:	400204a0 	.word	0x400204a0
 80034fc:	400204b8 	.word	0x400204b8
 8003500:	58025408 	.word	0x58025408
 8003504:	5802541c 	.word	0x5802541c
 8003508:	58025430 	.word	0x58025430
 800350c:	58025444 	.word	0x58025444
 8003510:	58025458 	.word	0x58025458
 8003514:	5802546c 	.word	0x5802546c
 8003518:	58025480 	.word	0x58025480
 800351c:	58025494 	.word	0x58025494
 8003520:	2300      	movs	r3, #0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d007      	beq.n	8003536 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003530:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003534:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a6d      	ldr	r2, [pc, #436]	; (80036f0 <HAL_DMA_Abort+0x444>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d04a      	beq.n	80035d6 <HAL_DMA_Abort+0x32a>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a6b      	ldr	r2, [pc, #428]	; (80036f4 <HAL_DMA_Abort+0x448>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d045      	beq.n	80035d6 <HAL_DMA_Abort+0x32a>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a6a      	ldr	r2, [pc, #424]	; (80036f8 <HAL_DMA_Abort+0x44c>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d040      	beq.n	80035d6 <HAL_DMA_Abort+0x32a>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a68      	ldr	r2, [pc, #416]	; (80036fc <HAL_DMA_Abort+0x450>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d03b      	beq.n	80035d6 <HAL_DMA_Abort+0x32a>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a67      	ldr	r2, [pc, #412]	; (8003700 <HAL_DMA_Abort+0x454>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d036      	beq.n	80035d6 <HAL_DMA_Abort+0x32a>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a65      	ldr	r2, [pc, #404]	; (8003704 <HAL_DMA_Abort+0x458>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d031      	beq.n	80035d6 <HAL_DMA_Abort+0x32a>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a64      	ldr	r2, [pc, #400]	; (8003708 <HAL_DMA_Abort+0x45c>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d02c      	beq.n	80035d6 <HAL_DMA_Abort+0x32a>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a62      	ldr	r2, [pc, #392]	; (800370c <HAL_DMA_Abort+0x460>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d027      	beq.n	80035d6 <HAL_DMA_Abort+0x32a>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a61      	ldr	r2, [pc, #388]	; (8003710 <HAL_DMA_Abort+0x464>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d022      	beq.n	80035d6 <HAL_DMA_Abort+0x32a>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a5f      	ldr	r2, [pc, #380]	; (8003714 <HAL_DMA_Abort+0x468>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d01d      	beq.n	80035d6 <HAL_DMA_Abort+0x32a>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a5e      	ldr	r2, [pc, #376]	; (8003718 <HAL_DMA_Abort+0x46c>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d018      	beq.n	80035d6 <HAL_DMA_Abort+0x32a>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a5c      	ldr	r2, [pc, #368]	; (800371c <HAL_DMA_Abort+0x470>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d013      	beq.n	80035d6 <HAL_DMA_Abort+0x32a>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a5b      	ldr	r2, [pc, #364]	; (8003720 <HAL_DMA_Abort+0x474>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d00e      	beq.n	80035d6 <HAL_DMA_Abort+0x32a>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a59      	ldr	r2, [pc, #356]	; (8003724 <HAL_DMA_Abort+0x478>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d009      	beq.n	80035d6 <HAL_DMA_Abort+0x32a>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a58      	ldr	r2, [pc, #352]	; (8003728 <HAL_DMA_Abort+0x47c>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d004      	beq.n	80035d6 <HAL_DMA_Abort+0x32a>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a56      	ldr	r2, [pc, #344]	; (800372c <HAL_DMA_Abort+0x480>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d108      	bne.n	80035e8 <HAL_DMA_Abort+0x33c>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 0201 	bic.w	r2, r2, #1
 80035e4:	601a      	str	r2, [r3, #0]
 80035e6:	e007      	b.n	80035f8 <HAL_DMA_Abort+0x34c>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 0201 	bic.w	r2, r2, #1
 80035f6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80035f8:	e013      	b.n	8003622 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035fa:	f7ff f9b3 	bl	8002964 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	2b05      	cmp	r3, #5
 8003606:	d90c      	bls.n	8003622 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2220      	movs	r2, #32
 800360c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2203      	movs	r2, #3
 8003612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e12d      	b.n	800387e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1e5      	bne.n	80035fa <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a2f      	ldr	r2, [pc, #188]	; (80036f0 <HAL_DMA_Abort+0x444>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d04a      	beq.n	80036ce <HAL_DMA_Abort+0x422>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a2d      	ldr	r2, [pc, #180]	; (80036f4 <HAL_DMA_Abort+0x448>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d045      	beq.n	80036ce <HAL_DMA_Abort+0x422>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a2c      	ldr	r2, [pc, #176]	; (80036f8 <HAL_DMA_Abort+0x44c>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d040      	beq.n	80036ce <HAL_DMA_Abort+0x422>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a2a      	ldr	r2, [pc, #168]	; (80036fc <HAL_DMA_Abort+0x450>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d03b      	beq.n	80036ce <HAL_DMA_Abort+0x422>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a29      	ldr	r2, [pc, #164]	; (8003700 <HAL_DMA_Abort+0x454>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d036      	beq.n	80036ce <HAL_DMA_Abort+0x422>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a27      	ldr	r2, [pc, #156]	; (8003704 <HAL_DMA_Abort+0x458>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d031      	beq.n	80036ce <HAL_DMA_Abort+0x422>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a26      	ldr	r2, [pc, #152]	; (8003708 <HAL_DMA_Abort+0x45c>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d02c      	beq.n	80036ce <HAL_DMA_Abort+0x422>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a24      	ldr	r2, [pc, #144]	; (800370c <HAL_DMA_Abort+0x460>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d027      	beq.n	80036ce <HAL_DMA_Abort+0x422>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a23      	ldr	r2, [pc, #140]	; (8003710 <HAL_DMA_Abort+0x464>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d022      	beq.n	80036ce <HAL_DMA_Abort+0x422>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a21      	ldr	r2, [pc, #132]	; (8003714 <HAL_DMA_Abort+0x468>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d01d      	beq.n	80036ce <HAL_DMA_Abort+0x422>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a20      	ldr	r2, [pc, #128]	; (8003718 <HAL_DMA_Abort+0x46c>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d018      	beq.n	80036ce <HAL_DMA_Abort+0x422>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a1e      	ldr	r2, [pc, #120]	; (800371c <HAL_DMA_Abort+0x470>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d013      	beq.n	80036ce <HAL_DMA_Abort+0x422>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a1d      	ldr	r2, [pc, #116]	; (8003720 <HAL_DMA_Abort+0x474>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d00e      	beq.n	80036ce <HAL_DMA_Abort+0x422>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a1b      	ldr	r2, [pc, #108]	; (8003724 <HAL_DMA_Abort+0x478>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d009      	beq.n	80036ce <HAL_DMA_Abort+0x422>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a1a      	ldr	r2, [pc, #104]	; (8003728 <HAL_DMA_Abort+0x47c>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d004      	beq.n	80036ce <HAL_DMA_Abort+0x422>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a18      	ldr	r2, [pc, #96]	; (800372c <HAL_DMA_Abort+0x480>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d101      	bne.n	80036d2 <HAL_DMA_Abort+0x426>
 80036ce:	2301      	movs	r3, #1
 80036d0:	e000      	b.n	80036d4 <HAL_DMA_Abort+0x428>
 80036d2:	2300      	movs	r3, #0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d02b      	beq.n	8003730 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036dc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e2:	f003 031f 	and.w	r3, r3, #31
 80036e6:	223f      	movs	r2, #63	; 0x3f
 80036e8:	409a      	lsls	r2, r3
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	609a      	str	r2, [r3, #8]
 80036ee:	e02a      	b.n	8003746 <HAL_DMA_Abort+0x49a>
 80036f0:	40020010 	.word	0x40020010
 80036f4:	40020028 	.word	0x40020028
 80036f8:	40020040 	.word	0x40020040
 80036fc:	40020058 	.word	0x40020058
 8003700:	40020070 	.word	0x40020070
 8003704:	40020088 	.word	0x40020088
 8003708:	400200a0 	.word	0x400200a0
 800370c:	400200b8 	.word	0x400200b8
 8003710:	40020410 	.word	0x40020410
 8003714:	40020428 	.word	0x40020428
 8003718:	40020440 	.word	0x40020440
 800371c:	40020458 	.word	0x40020458
 8003720:	40020470 	.word	0x40020470
 8003724:	40020488 	.word	0x40020488
 8003728:	400204a0 	.word	0x400204a0
 800372c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003734:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800373a:	f003 031f 	and.w	r3, r3, #31
 800373e:	2201      	movs	r2, #1
 8003740:	409a      	lsls	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a4f      	ldr	r2, [pc, #316]	; (8003888 <HAL_DMA_Abort+0x5dc>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d072      	beq.n	8003836 <HAL_DMA_Abort+0x58a>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a4d      	ldr	r2, [pc, #308]	; (800388c <HAL_DMA_Abort+0x5e0>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d06d      	beq.n	8003836 <HAL_DMA_Abort+0x58a>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a4c      	ldr	r2, [pc, #304]	; (8003890 <HAL_DMA_Abort+0x5e4>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d068      	beq.n	8003836 <HAL_DMA_Abort+0x58a>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a4a      	ldr	r2, [pc, #296]	; (8003894 <HAL_DMA_Abort+0x5e8>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d063      	beq.n	8003836 <HAL_DMA_Abort+0x58a>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a49      	ldr	r2, [pc, #292]	; (8003898 <HAL_DMA_Abort+0x5ec>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d05e      	beq.n	8003836 <HAL_DMA_Abort+0x58a>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a47      	ldr	r2, [pc, #284]	; (800389c <HAL_DMA_Abort+0x5f0>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d059      	beq.n	8003836 <HAL_DMA_Abort+0x58a>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a46      	ldr	r2, [pc, #280]	; (80038a0 <HAL_DMA_Abort+0x5f4>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d054      	beq.n	8003836 <HAL_DMA_Abort+0x58a>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a44      	ldr	r2, [pc, #272]	; (80038a4 <HAL_DMA_Abort+0x5f8>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d04f      	beq.n	8003836 <HAL_DMA_Abort+0x58a>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a43      	ldr	r2, [pc, #268]	; (80038a8 <HAL_DMA_Abort+0x5fc>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d04a      	beq.n	8003836 <HAL_DMA_Abort+0x58a>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a41      	ldr	r2, [pc, #260]	; (80038ac <HAL_DMA_Abort+0x600>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d045      	beq.n	8003836 <HAL_DMA_Abort+0x58a>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a40      	ldr	r2, [pc, #256]	; (80038b0 <HAL_DMA_Abort+0x604>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d040      	beq.n	8003836 <HAL_DMA_Abort+0x58a>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a3e      	ldr	r2, [pc, #248]	; (80038b4 <HAL_DMA_Abort+0x608>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d03b      	beq.n	8003836 <HAL_DMA_Abort+0x58a>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a3d      	ldr	r2, [pc, #244]	; (80038b8 <HAL_DMA_Abort+0x60c>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d036      	beq.n	8003836 <HAL_DMA_Abort+0x58a>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a3b      	ldr	r2, [pc, #236]	; (80038bc <HAL_DMA_Abort+0x610>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d031      	beq.n	8003836 <HAL_DMA_Abort+0x58a>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a3a      	ldr	r2, [pc, #232]	; (80038c0 <HAL_DMA_Abort+0x614>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d02c      	beq.n	8003836 <HAL_DMA_Abort+0x58a>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a38      	ldr	r2, [pc, #224]	; (80038c4 <HAL_DMA_Abort+0x618>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d027      	beq.n	8003836 <HAL_DMA_Abort+0x58a>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a37      	ldr	r2, [pc, #220]	; (80038c8 <HAL_DMA_Abort+0x61c>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d022      	beq.n	8003836 <HAL_DMA_Abort+0x58a>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a35      	ldr	r2, [pc, #212]	; (80038cc <HAL_DMA_Abort+0x620>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d01d      	beq.n	8003836 <HAL_DMA_Abort+0x58a>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a34      	ldr	r2, [pc, #208]	; (80038d0 <HAL_DMA_Abort+0x624>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d018      	beq.n	8003836 <HAL_DMA_Abort+0x58a>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a32      	ldr	r2, [pc, #200]	; (80038d4 <HAL_DMA_Abort+0x628>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d013      	beq.n	8003836 <HAL_DMA_Abort+0x58a>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a31      	ldr	r2, [pc, #196]	; (80038d8 <HAL_DMA_Abort+0x62c>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d00e      	beq.n	8003836 <HAL_DMA_Abort+0x58a>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a2f      	ldr	r2, [pc, #188]	; (80038dc <HAL_DMA_Abort+0x630>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d009      	beq.n	8003836 <HAL_DMA_Abort+0x58a>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a2e      	ldr	r2, [pc, #184]	; (80038e0 <HAL_DMA_Abort+0x634>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d004      	beq.n	8003836 <HAL_DMA_Abort+0x58a>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a2c      	ldr	r2, [pc, #176]	; (80038e4 <HAL_DMA_Abort+0x638>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d101      	bne.n	800383a <HAL_DMA_Abort+0x58e>
 8003836:	2301      	movs	r3, #1
 8003838:	e000      	b.n	800383c <HAL_DMA_Abort+0x590>
 800383a:	2300      	movs	r3, #0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d015      	beq.n	800386c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003848:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00c      	beq.n	800386c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800385c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003860:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800386a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3718      	adds	r7, #24
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	40020010 	.word	0x40020010
 800388c:	40020028 	.word	0x40020028
 8003890:	40020040 	.word	0x40020040
 8003894:	40020058 	.word	0x40020058
 8003898:	40020070 	.word	0x40020070
 800389c:	40020088 	.word	0x40020088
 80038a0:	400200a0 	.word	0x400200a0
 80038a4:	400200b8 	.word	0x400200b8
 80038a8:	40020410 	.word	0x40020410
 80038ac:	40020428 	.word	0x40020428
 80038b0:	40020440 	.word	0x40020440
 80038b4:	40020458 	.word	0x40020458
 80038b8:	40020470 	.word	0x40020470
 80038bc:	40020488 	.word	0x40020488
 80038c0:	400204a0 	.word	0x400204a0
 80038c4:	400204b8 	.word	0x400204b8
 80038c8:	58025408 	.word	0x58025408
 80038cc:	5802541c 	.word	0x5802541c
 80038d0:	58025430 	.word	0x58025430
 80038d4:	58025444 	.word	0x58025444
 80038d8:	58025458 	.word	0x58025458
 80038dc:	5802546c 	.word	0x5802546c
 80038e0:	58025480 	.word	0x58025480
 80038e4:	58025494 	.word	0x58025494

080038e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e237      	b.n	8003d6a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b02      	cmp	r3, #2
 8003904:	d004      	beq.n	8003910 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2280      	movs	r2, #128	; 0x80
 800390a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e22c      	b.n	8003d6a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a5c      	ldr	r2, [pc, #368]	; (8003a88 <HAL_DMA_Abort_IT+0x1a0>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d04a      	beq.n	80039b0 <HAL_DMA_Abort_IT+0xc8>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a5b      	ldr	r2, [pc, #364]	; (8003a8c <HAL_DMA_Abort_IT+0x1a4>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d045      	beq.n	80039b0 <HAL_DMA_Abort_IT+0xc8>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a59      	ldr	r2, [pc, #356]	; (8003a90 <HAL_DMA_Abort_IT+0x1a8>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d040      	beq.n	80039b0 <HAL_DMA_Abort_IT+0xc8>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a58      	ldr	r2, [pc, #352]	; (8003a94 <HAL_DMA_Abort_IT+0x1ac>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d03b      	beq.n	80039b0 <HAL_DMA_Abort_IT+0xc8>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a56      	ldr	r2, [pc, #344]	; (8003a98 <HAL_DMA_Abort_IT+0x1b0>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d036      	beq.n	80039b0 <HAL_DMA_Abort_IT+0xc8>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a55      	ldr	r2, [pc, #340]	; (8003a9c <HAL_DMA_Abort_IT+0x1b4>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d031      	beq.n	80039b0 <HAL_DMA_Abort_IT+0xc8>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a53      	ldr	r2, [pc, #332]	; (8003aa0 <HAL_DMA_Abort_IT+0x1b8>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d02c      	beq.n	80039b0 <HAL_DMA_Abort_IT+0xc8>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a52      	ldr	r2, [pc, #328]	; (8003aa4 <HAL_DMA_Abort_IT+0x1bc>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d027      	beq.n	80039b0 <HAL_DMA_Abort_IT+0xc8>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a50      	ldr	r2, [pc, #320]	; (8003aa8 <HAL_DMA_Abort_IT+0x1c0>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d022      	beq.n	80039b0 <HAL_DMA_Abort_IT+0xc8>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a4f      	ldr	r2, [pc, #316]	; (8003aac <HAL_DMA_Abort_IT+0x1c4>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d01d      	beq.n	80039b0 <HAL_DMA_Abort_IT+0xc8>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a4d      	ldr	r2, [pc, #308]	; (8003ab0 <HAL_DMA_Abort_IT+0x1c8>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d018      	beq.n	80039b0 <HAL_DMA_Abort_IT+0xc8>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a4c      	ldr	r2, [pc, #304]	; (8003ab4 <HAL_DMA_Abort_IT+0x1cc>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d013      	beq.n	80039b0 <HAL_DMA_Abort_IT+0xc8>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a4a      	ldr	r2, [pc, #296]	; (8003ab8 <HAL_DMA_Abort_IT+0x1d0>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d00e      	beq.n	80039b0 <HAL_DMA_Abort_IT+0xc8>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a49      	ldr	r2, [pc, #292]	; (8003abc <HAL_DMA_Abort_IT+0x1d4>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d009      	beq.n	80039b0 <HAL_DMA_Abort_IT+0xc8>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a47      	ldr	r2, [pc, #284]	; (8003ac0 <HAL_DMA_Abort_IT+0x1d8>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d004      	beq.n	80039b0 <HAL_DMA_Abort_IT+0xc8>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a46      	ldr	r2, [pc, #280]	; (8003ac4 <HAL_DMA_Abort_IT+0x1dc>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d101      	bne.n	80039b4 <HAL_DMA_Abort_IT+0xcc>
 80039b0:	2301      	movs	r3, #1
 80039b2:	e000      	b.n	80039b6 <HAL_DMA_Abort_IT+0xce>
 80039b4:	2300      	movs	r3, #0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f000 8086 	beq.w	8003ac8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2204      	movs	r2, #4
 80039c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a2f      	ldr	r2, [pc, #188]	; (8003a88 <HAL_DMA_Abort_IT+0x1a0>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d04a      	beq.n	8003a64 <HAL_DMA_Abort_IT+0x17c>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a2e      	ldr	r2, [pc, #184]	; (8003a8c <HAL_DMA_Abort_IT+0x1a4>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d045      	beq.n	8003a64 <HAL_DMA_Abort_IT+0x17c>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a2c      	ldr	r2, [pc, #176]	; (8003a90 <HAL_DMA_Abort_IT+0x1a8>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d040      	beq.n	8003a64 <HAL_DMA_Abort_IT+0x17c>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a2b      	ldr	r2, [pc, #172]	; (8003a94 <HAL_DMA_Abort_IT+0x1ac>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d03b      	beq.n	8003a64 <HAL_DMA_Abort_IT+0x17c>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a29      	ldr	r2, [pc, #164]	; (8003a98 <HAL_DMA_Abort_IT+0x1b0>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d036      	beq.n	8003a64 <HAL_DMA_Abort_IT+0x17c>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a28      	ldr	r2, [pc, #160]	; (8003a9c <HAL_DMA_Abort_IT+0x1b4>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d031      	beq.n	8003a64 <HAL_DMA_Abort_IT+0x17c>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a26      	ldr	r2, [pc, #152]	; (8003aa0 <HAL_DMA_Abort_IT+0x1b8>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d02c      	beq.n	8003a64 <HAL_DMA_Abort_IT+0x17c>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a25      	ldr	r2, [pc, #148]	; (8003aa4 <HAL_DMA_Abort_IT+0x1bc>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d027      	beq.n	8003a64 <HAL_DMA_Abort_IT+0x17c>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a23      	ldr	r2, [pc, #140]	; (8003aa8 <HAL_DMA_Abort_IT+0x1c0>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d022      	beq.n	8003a64 <HAL_DMA_Abort_IT+0x17c>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a22      	ldr	r2, [pc, #136]	; (8003aac <HAL_DMA_Abort_IT+0x1c4>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d01d      	beq.n	8003a64 <HAL_DMA_Abort_IT+0x17c>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a20      	ldr	r2, [pc, #128]	; (8003ab0 <HAL_DMA_Abort_IT+0x1c8>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d018      	beq.n	8003a64 <HAL_DMA_Abort_IT+0x17c>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a1f      	ldr	r2, [pc, #124]	; (8003ab4 <HAL_DMA_Abort_IT+0x1cc>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d013      	beq.n	8003a64 <HAL_DMA_Abort_IT+0x17c>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a1d      	ldr	r2, [pc, #116]	; (8003ab8 <HAL_DMA_Abort_IT+0x1d0>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d00e      	beq.n	8003a64 <HAL_DMA_Abort_IT+0x17c>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a1c      	ldr	r2, [pc, #112]	; (8003abc <HAL_DMA_Abort_IT+0x1d4>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d009      	beq.n	8003a64 <HAL_DMA_Abort_IT+0x17c>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a1a      	ldr	r2, [pc, #104]	; (8003ac0 <HAL_DMA_Abort_IT+0x1d8>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d004      	beq.n	8003a64 <HAL_DMA_Abort_IT+0x17c>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a19      	ldr	r2, [pc, #100]	; (8003ac4 <HAL_DMA_Abort_IT+0x1dc>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d108      	bne.n	8003a76 <HAL_DMA_Abort_IT+0x18e>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 0201 	bic.w	r2, r2, #1
 8003a72:	601a      	str	r2, [r3, #0]
 8003a74:	e178      	b.n	8003d68 <HAL_DMA_Abort_IT+0x480>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f022 0201 	bic.w	r2, r2, #1
 8003a84:	601a      	str	r2, [r3, #0]
 8003a86:	e16f      	b.n	8003d68 <HAL_DMA_Abort_IT+0x480>
 8003a88:	40020010 	.word	0x40020010
 8003a8c:	40020028 	.word	0x40020028
 8003a90:	40020040 	.word	0x40020040
 8003a94:	40020058 	.word	0x40020058
 8003a98:	40020070 	.word	0x40020070
 8003a9c:	40020088 	.word	0x40020088
 8003aa0:	400200a0 	.word	0x400200a0
 8003aa4:	400200b8 	.word	0x400200b8
 8003aa8:	40020410 	.word	0x40020410
 8003aac:	40020428 	.word	0x40020428
 8003ab0:	40020440 	.word	0x40020440
 8003ab4:	40020458 	.word	0x40020458
 8003ab8:	40020470 	.word	0x40020470
 8003abc:	40020488 	.word	0x40020488
 8003ac0:	400204a0 	.word	0x400204a0
 8003ac4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f022 020e 	bic.w	r2, r2, #14
 8003ad6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a6c      	ldr	r2, [pc, #432]	; (8003c90 <HAL_DMA_Abort_IT+0x3a8>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d04a      	beq.n	8003b78 <HAL_DMA_Abort_IT+0x290>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a6b      	ldr	r2, [pc, #428]	; (8003c94 <HAL_DMA_Abort_IT+0x3ac>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d045      	beq.n	8003b78 <HAL_DMA_Abort_IT+0x290>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a69      	ldr	r2, [pc, #420]	; (8003c98 <HAL_DMA_Abort_IT+0x3b0>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d040      	beq.n	8003b78 <HAL_DMA_Abort_IT+0x290>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a68      	ldr	r2, [pc, #416]	; (8003c9c <HAL_DMA_Abort_IT+0x3b4>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d03b      	beq.n	8003b78 <HAL_DMA_Abort_IT+0x290>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a66      	ldr	r2, [pc, #408]	; (8003ca0 <HAL_DMA_Abort_IT+0x3b8>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d036      	beq.n	8003b78 <HAL_DMA_Abort_IT+0x290>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a65      	ldr	r2, [pc, #404]	; (8003ca4 <HAL_DMA_Abort_IT+0x3bc>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d031      	beq.n	8003b78 <HAL_DMA_Abort_IT+0x290>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a63      	ldr	r2, [pc, #396]	; (8003ca8 <HAL_DMA_Abort_IT+0x3c0>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d02c      	beq.n	8003b78 <HAL_DMA_Abort_IT+0x290>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a62      	ldr	r2, [pc, #392]	; (8003cac <HAL_DMA_Abort_IT+0x3c4>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d027      	beq.n	8003b78 <HAL_DMA_Abort_IT+0x290>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a60      	ldr	r2, [pc, #384]	; (8003cb0 <HAL_DMA_Abort_IT+0x3c8>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d022      	beq.n	8003b78 <HAL_DMA_Abort_IT+0x290>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a5f      	ldr	r2, [pc, #380]	; (8003cb4 <HAL_DMA_Abort_IT+0x3cc>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d01d      	beq.n	8003b78 <HAL_DMA_Abort_IT+0x290>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a5d      	ldr	r2, [pc, #372]	; (8003cb8 <HAL_DMA_Abort_IT+0x3d0>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d018      	beq.n	8003b78 <HAL_DMA_Abort_IT+0x290>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a5c      	ldr	r2, [pc, #368]	; (8003cbc <HAL_DMA_Abort_IT+0x3d4>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d013      	beq.n	8003b78 <HAL_DMA_Abort_IT+0x290>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a5a      	ldr	r2, [pc, #360]	; (8003cc0 <HAL_DMA_Abort_IT+0x3d8>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d00e      	beq.n	8003b78 <HAL_DMA_Abort_IT+0x290>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a59      	ldr	r2, [pc, #356]	; (8003cc4 <HAL_DMA_Abort_IT+0x3dc>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d009      	beq.n	8003b78 <HAL_DMA_Abort_IT+0x290>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a57      	ldr	r2, [pc, #348]	; (8003cc8 <HAL_DMA_Abort_IT+0x3e0>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d004      	beq.n	8003b78 <HAL_DMA_Abort_IT+0x290>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a56      	ldr	r2, [pc, #344]	; (8003ccc <HAL_DMA_Abort_IT+0x3e4>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d108      	bne.n	8003b8a <HAL_DMA_Abort_IT+0x2a2>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f022 0201 	bic.w	r2, r2, #1
 8003b86:	601a      	str	r2, [r3, #0]
 8003b88:	e007      	b.n	8003b9a <HAL_DMA_Abort_IT+0x2b2>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 0201 	bic.w	r2, r2, #1
 8003b98:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a3c      	ldr	r2, [pc, #240]	; (8003c90 <HAL_DMA_Abort_IT+0x3a8>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d072      	beq.n	8003c8a <HAL_DMA_Abort_IT+0x3a2>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a3a      	ldr	r2, [pc, #232]	; (8003c94 <HAL_DMA_Abort_IT+0x3ac>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d06d      	beq.n	8003c8a <HAL_DMA_Abort_IT+0x3a2>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a39      	ldr	r2, [pc, #228]	; (8003c98 <HAL_DMA_Abort_IT+0x3b0>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d068      	beq.n	8003c8a <HAL_DMA_Abort_IT+0x3a2>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a37      	ldr	r2, [pc, #220]	; (8003c9c <HAL_DMA_Abort_IT+0x3b4>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d063      	beq.n	8003c8a <HAL_DMA_Abort_IT+0x3a2>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a36      	ldr	r2, [pc, #216]	; (8003ca0 <HAL_DMA_Abort_IT+0x3b8>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d05e      	beq.n	8003c8a <HAL_DMA_Abort_IT+0x3a2>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a34      	ldr	r2, [pc, #208]	; (8003ca4 <HAL_DMA_Abort_IT+0x3bc>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d059      	beq.n	8003c8a <HAL_DMA_Abort_IT+0x3a2>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a33      	ldr	r2, [pc, #204]	; (8003ca8 <HAL_DMA_Abort_IT+0x3c0>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d054      	beq.n	8003c8a <HAL_DMA_Abort_IT+0x3a2>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a31      	ldr	r2, [pc, #196]	; (8003cac <HAL_DMA_Abort_IT+0x3c4>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d04f      	beq.n	8003c8a <HAL_DMA_Abort_IT+0x3a2>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a30      	ldr	r2, [pc, #192]	; (8003cb0 <HAL_DMA_Abort_IT+0x3c8>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d04a      	beq.n	8003c8a <HAL_DMA_Abort_IT+0x3a2>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a2e      	ldr	r2, [pc, #184]	; (8003cb4 <HAL_DMA_Abort_IT+0x3cc>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d045      	beq.n	8003c8a <HAL_DMA_Abort_IT+0x3a2>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a2d      	ldr	r2, [pc, #180]	; (8003cb8 <HAL_DMA_Abort_IT+0x3d0>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d040      	beq.n	8003c8a <HAL_DMA_Abort_IT+0x3a2>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a2b      	ldr	r2, [pc, #172]	; (8003cbc <HAL_DMA_Abort_IT+0x3d4>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d03b      	beq.n	8003c8a <HAL_DMA_Abort_IT+0x3a2>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a2a      	ldr	r2, [pc, #168]	; (8003cc0 <HAL_DMA_Abort_IT+0x3d8>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d036      	beq.n	8003c8a <HAL_DMA_Abort_IT+0x3a2>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a28      	ldr	r2, [pc, #160]	; (8003cc4 <HAL_DMA_Abort_IT+0x3dc>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d031      	beq.n	8003c8a <HAL_DMA_Abort_IT+0x3a2>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a27      	ldr	r2, [pc, #156]	; (8003cc8 <HAL_DMA_Abort_IT+0x3e0>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d02c      	beq.n	8003c8a <HAL_DMA_Abort_IT+0x3a2>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a25      	ldr	r2, [pc, #148]	; (8003ccc <HAL_DMA_Abort_IT+0x3e4>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d027      	beq.n	8003c8a <HAL_DMA_Abort_IT+0x3a2>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a24      	ldr	r2, [pc, #144]	; (8003cd0 <HAL_DMA_Abort_IT+0x3e8>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d022      	beq.n	8003c8a <HAL_DMA_Abort_IT+0x3a2>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a22      	ldr	r2, [pc, #136]	; (8003cd4 <HAL_DMA_Abort_IT+0x3ec>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d01d      	beq.n	8003c8a <HAL_DMA_Abort_IT+0x3a2>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a21      	ldr	r2, [pc, #132]	; (8003cd8 <HAL_DMA_Abort_IT+0x3f0>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d018      	beq.n	8003c8a <HAL_DMA_Abort_IT+0x3a2>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a1f      	ldr	r2, [pc, #124]	; (8003cdc <HAL_DMA_Abort_IT+0x3f4>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d013      	beq.n	8003c8a <HAL_DMA_Abort_IT+0x3a2>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a1e      	ldr	r2, [pc, #120]	; (8003ce0 <HAL_DMA_Abort_IT+0x3f8>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d00e      	beq.n	8003c8a <HAL_DMA_Abort_IT+0x3a2>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a1c      	ldr	r2, [pc, #112]	; (8003ce4 <HAL_DMA_Abort_IT+0x3fc>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d009      	beq.n	8003c8a <HAL_DMA_Abort_IT+0x3a2>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a1b      	ldr	r2, [pc, #108]	; (8003ce8 <HAL_DMA_Abort_IT+0x400>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d004      	beq.n	8003c8a <HAL_DMA_Abort_IT+0x3a2>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a19      	ldr	r2, [pc, #100]	; (8003cec <HAL_DMA_Abort_IT+0x404>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d132      	bne.n	8003cf0 <HAL_DMA_Abort_IT+0x408>
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e031      	b.n	8003cf2 <HAL_DMA_Abort_IT+0x40a>
 8003c8e:	bf00      	nop
 8003c90:	40020010 	.word	0x40020010
 8003c94:	40020028 	.word	0x40020028
 8003c98:	40020040 	.word	0x40020040
 8003c9c:	40020058 	.word	0x40020058
 8003ca0:	40020070 	.word	0x40020070
 8003ca4:	40020088 	.word	0x40020088
 8003ca8:	400200a0 	.word	0x400200a0
 8003cac:	400200b8 	.word	0x400200b8
 8003cb0:	40020410 	.word	0x40020410
 8003cb4:	40020428 	.word	0x40020428
 8003cb8:	40020440 	.word	0x40020440
 8003cbc:	40020458 	.word	0x40020458
 8003cc0:	40020470 	.word	0x40020470
 8003cc4:	40020488 	.word	0x40020488
 8003cc8:	400204a0 	.word	0x400204a0
 8003ccc:	400204b8 	.word	0x400204b8
 8003cd0:	58025408 	.word	0x58025408
 8003cd4:	5802541c 	.word	0x5802541c
 8003cd8:	58025430 	.word	0x58025430
 8003cdc:	58025444 	.word	0x58025444
 8003ce0:	58025458 	.word	0x58025458
 8003ce4:	5802546c 	.word	0x5802546c
 8003ce8:	58025480 	.word	0x58025480
 8003cec:	58025494 	.word	0x58025494
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d028      	beq.n	8003d48 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d04:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d10:	f003 031f 	and.w	r3, r3, #31
 8003d14:	2201      	movs	r2, #1
 8003d16:	409a      	lsls	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003d24:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00c      	beq.n	8003d48 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d3c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003d46:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d003      	beq.n	8003d68 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop

08003d74 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b08a      	sub	sp, #40	; 0x28
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d80:	4b67      	ldr	r3, [pc, #412]	; (8003f20 <HAL_DMA_IRQHandler+0x1ac>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a67      	ldr	r2, [pc, #412]	; (8003f24 <HAL_DMA_IRQHandler+0x1b0>)
 8003d86:	fba2 2303 	umull	r2, r3, r2, r3
 8003d8a:	0a9b      	lsrs	r3, r3, #10
 8003d8c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d92:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d98:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003d9a:	6a3b      	ldr	r3, [r7, #32]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a5f      	ldr	r2, [pc, #380]	; (8003f28 <HAL_DMA_IRQHandler+0x1b4>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d04a      	beq.n	8003e46 <HAL_DMA_IRQHandler+0xd2>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a5d      	ldr	r2, [pc, #372]	; (8003f2c <HAL_DMA_IRQHandler+0x1b8>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d045      	beq.n	8003e46 <HAL_DMA_IRQHandler+0xd2>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a5c      	ldr	r2, [pc, #368]	; (8003f30 <HAL_DMA_IRQHandler+0x1bc>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d040      	beq.n	8003e46 <HAL_DMA_IRQHandler+0xd2>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a5a      	ldr	r2, [pc, #360]	; (8003f34 <HAL_DMA_IRQHandler+0x1c0>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d03b      	beq.n	8003e46 <HAL_DMA_IRQHandler+0xd2>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a59      	ldr	r2, [pc, #356]	; (8003f38 <HAL_DMA_IRQHandler+0x1c4>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d036      	beq.n	8003e46 <HAL_DMA_IRQHandler+0xd2>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a57      	ldr	r2, [pc, #348]	; (8003f3c <HAL_DMA_IRQHandler+0x1c8>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d031      	beq.n	8003e46 <HAL_DMA_IRQHandler+0xd2>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a56      	ldr	r2, [pc, #344]	; (8003f40 <HAL_DMA_IRQHandler+0x1cc>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d02c      	beq.n	8003e46 <HAL_DMA_IRQHandler+0xd2>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a54      	ldr	r2, [pc, #336]	; (8003f44 <HAL_DMA_IRQHandler+0x1d0>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d027      	beq.n	8003e46 <HAL_DMA_IRQHandler+0xd2>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a53      	ldr	r2, [pc, #332]	; (8003f48 <HAL_DMA_IRQHandler+0x1d4>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d022      	beq.n	8003e46 <HAL_DMA_IRQHandler+0xd2>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a51      	ldr	r2, [pc, #324]	; (8003f4c <HAL_DMA_IRQHandler+0x1d8>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d01d      	beq.n	8003e46 <HAL_DMA_IRQHandler+0xd2>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a50      	ldr	r2, [pc, #320]	; (8003f50 <HAL_DMA_IRQHandler+0x1dc>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d018      	beq.n	8003e46 <HAL_DMA_IRQHandler+0xd2>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a4e      	ldr	r2, [pc, #312]	; (8003f54 <HAL_DMA_IRQHandler+0x1e0>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d013      	beq.n	8003e46 <HAL_DMA_IRQHandler+0xd2>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a4d      	ldr	r2, [pc, #308]	; (8003f58 <HAL_DMA_IRQHandler+0x1e4>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d00e      	beq.n	8003e46 <HAL_DMA_IRQHandler+0xd2>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a4b      	ldr	r2, [pc, #300]	; (8003f5c <HAL_DMA_IRQHandler+0x1e8>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d009      	beq.n	8003e46 <HAL_DMA_IRQHandler+0xd2>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a4a      	ldr	r2, [pc, #296]	; (8003f60 <HAL_DMA_IRQHandler+0x1ec>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d004      	beq.n	8003e46 <HAL_DMA_IRQHandler+0xd2>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a48      	ldr	r2, [pc, #288]	; (8003f64 <HAL_DMA_IRQHandler+0x1f0>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d101      	bne.n	8003e4a <HAL_DMA_IRQHandler+0xd6>
 8003e46:	2301      	movs	r3, #1
 8003e48:	e000      	b.n	8003e4c <HAL_DMA_IRQHandler+0xd8>
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f000 842b 	beq.w	80046a8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e56:	f003 031f 	and.w	r3, r3, #31
 8003e5a:	2208      	movs	r2, #8
 8003e5c:	409a      	lsls	r2, r3
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	4013      	ands	r3, r2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f000 80a2 	beq.w	8003fac <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a2e      	ldr	r2, [pc, #184]	; (8003f28 <HAL_DMA_IRQHandler+0x1b4>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d04a      	beq.n	8003f08 <HAL_DMA_IRQHandler+0x194>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a2d      	ldr	r2, [pc, #180]	; (8003f2c <HAL_DMA_IRQHandler+0x1b8>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d045      	beq.n	8003f08 <HAL_DMA_IRQHandler+0x194>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a2b      	ldr	r2, [pc, #172]	; (8003f30 <HAL_DMA_IRQHandler+0x1bc>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d040      	beq.n	8003f08 <HAL_DMA_IRQHandler+0x194>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a2a      	ldr	r2, [pc, #168]	; (8003f34 <HAL_DMA_IRQHandler+0x1c0>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d03b      	beq.n	8003f08 <HAL_DMA_IRQHandler+0x194>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a28      	ldr	r2, [pc, #160]	; (8003f38 <HAL_DMA_IRQHandler+0x1c4>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d036      	beq.n	8003f08 <HAL_DMA_IRQHandler+0x194>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a27      	ldr	r2, [pc, #156]	; (8003f3c <HAL_DMA_IRQHandler+0x1c8>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d031      	beq.n	8003f08 <HAL_DMA_IRQHandler+0x194>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a25      	ldr	r2, [pc, #148]	; (8003f40 <HAL_DMA_IRQHandler+0x1cc>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d02c      	beq.n	8003f08 <HAL_DMA_IRQHandler+0x194>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a24      	ldr	r2, [pc, #144]	; (8003f44 <HAL_DMA_IRQHandler+0x1d0>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d027      	beq.n	8003f08 <HAL_DMA_IRQHandler+0x194>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a22      	ldr	r2, [pc, #136]	; (8003f48 <HAL_DMA_IRQHandler+0x1d4>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d022      	beq.n	8003f08 <HAL_DMA_IRQHandler+0x194>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a21      	ldr	r2, [pc, #132]	; (8003f4c <HAL_DMA_IRQHandler+0x1d8>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d01d      	beq.n	8003f08 <HAL_DMA_IRQHandler+0x194>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a1f      	ldr	r2, [pc, #124]	; (8003f50 <HAL_DMA_IRQHandler+0x1dc>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d018      	beq.n	8003f08 <HAL_DMA_IRQHandler+0x194>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a1e      	ldr	r2, [pc, #120]	; (8003f54 <HAL_DMA_IRQHandler+0x1e0>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d013      	beq.n	8003f08 <HAL_DMA_IRQHandler+0x194>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a1c      	ldr	r2, [pc, #112]	; (8003f58 <HAL_DMA_IRQHandler+0x1e4>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d00e      	beq.n	8003f08 <HAL_DMA_IRQHandler+0x194>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a1b      	ldr	r2, [pc, #108]	; (8003f5c <HAL_DMA_IRQHandler+0x1e8>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d009      	beq.n	8003f08 <HAL_DMA_IRQHandler+0x194>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a19      	ldr	r2, [pc, #100]	; (8003f60 <HAL_DMA_IRQHandler+0x1ec>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d004      	beq.n	8003f08 <HAL_DMA_IRQHandler+0x194>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a18      	ldr	r2, [pc, #96]	; (8003f64 <HAL_DMA_IRQHandler+0x1f0>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d12f      	bne.n	8003f68 <HAL_DMA_IRQHandler+0x1f4>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0304 	and.w	r3, r3, #4
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	bf14      	ite	ne
 8003f16:	2301      	movne	r3, #1
 8003f18:	2300      	moveq	r3, #0
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	e02e      	b.n	8003f7c <HAL_DMA_IRQHandler+0x208>
 8003f1e:	bf00      	nop
 8003f20:	24000050 	.word	0x24000050
 8003f24:	1b4e81b5 	.word	0x1b4e81b5
 8003f28:	40020010 	.word	0x40020010
 8003f2c:	40020028 	.word	0x40020028
 8003f30:	40020040 	.word	0x40020040
 8003f34:	40020058 	.word	0x40020058
 8003f38:	40020070 	.word	0x40020070
 8003f3c:	40020088 	.word	0x40020088
 8003f40:	400200a0 	.word	0x400200a0
 8003f44:	400200b8 	.word	0x400200b8
 8003f48:	40020410 	.word	0x40020410
 8003f4c:	40020428 	.word	0x40020428
 8003f50:	40020440 	.word	0x40020440
 8003f54:	40020458 	.word	0x40020458
 8003f58:	40020470 	.word	0x40020470
 8003f5c:	40020488 	.word	0x40020488
 8003f60:	400204a0 	.word	0x400204a0
 8003f64:	400204b8 	.word	0x400204b8
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0308 	and.w	r3, r3, #8
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	bf14      	ite	ne
 8003f76:	2301      	movne	r3, #1
 8003f78:	2300      	moveq	r3, #0
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d015      	beq.n	8003fac <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 0204 	bic.w	r2, r2, #4
 8003f8e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f94:	f003 031f 	and.w	r3, r3, #31
 8003f98:	2208      	movs	r2, #8
 8003f9a:	409a      	lsls	r2, r3
 8003f9c:	6a3b      	ldr	r3, [r7, #32]
 8003f9e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa4:	f043 0201 	orr.w	r2, r3, #1
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb0:	f003 031f 	and.w	r3, r3, #31
 8003fb4:	69ba      	ldr	r2, [r7, #24]
 8003fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d06e      	beq.n	80040a0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a69      	ldr	r2, [pc, #420]	; (800416c <HAL_DMA_IRQHandler+0x3f8>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d04a      	beq.n	8004062 <HAL_DMA_IRQHandler+0x2ee>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a67      	ldr	r2, [pc, #412]	; (8004170 <HAL_DMA_IRQHandler+0x3fc>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d045      	beq.n	8004062 <HAL_DMA_IRQHandler+0x2ee>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a66      	ldr	r2, [pc, #408]	; (8004174 <HAL_DMA_IRQHandler+0x400>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d040      	beq.n	8004062 <HAL_DMA_IRQHandler+0x2ee>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a64      	ldr	r2, [pc, #400]	; (8004178 <HAL_DMA_IRQHandler+0x404>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d03b      	beq.n	8004062 <HAL_DMA_IRQHandler+0x2ee>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a63      	ldr	r2, [pc, #396]	; (800417c <HAL_DMA_IRQHandler+0x408>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d036      	beq.n	8004062 <HAL_DMA_IRQHandler+0x2ee>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a61      	ldr	r2, [pc, #388]	; (8004180 <HAL_DMA_IRQHandler+0x40c>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d031      	beq.n	8004062 <HAL_DMA_IRQHandler+0x2ee>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a60      	ldr	r2, [pc, #384]	; (8004184 <HAL_DMA_IRQHandler+0x410>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d02c      	beq.n	8004062 <HAL_DMA_IRQHandler+0x2ee>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a5e      	ldr	r2, [pc, #376]	; (8004188 <HAL_DMA_IRQHandler+0x414>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d027      	beq.n	8004062 <HAL_DMA_IRQHandler+0x2ee>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a5d      	ldr	r2, [pc, #372]	; (800418c <HAL_DMA_IRQHandler+0x418>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d022      	beq.n	8004062 <HAL_DMA_IRQHandler+0x2ee>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a5b      	ldr	r2, [pc, #364]	; (8004190 <HAL_DMA_IRQHandler+0x41c>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d01d      	beq.n	8004062 <HAL_DMA_IRQHandler+0x2ee>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a5a      	ldr	r2, [pc, #360]	; (8004194 <HAL_DMA_IRQHandler+0x420>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d018      	beq.n	8004062 <HAL_DMA_IRQHandler+0x2ee>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a58      	ldr	r2, [pc, #352]	; (8004198 <HAL_DMA_IRQHandler+0x424>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d013      	beq.n	8004062 <HAL_DMA_IRQHandler+0x2ee>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a57      	ldr	r2, [pc, #348]	; (800419c <HAL_DMA_IRQHandler+0x428>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d00e      	beq.n	8004062 <HAL_DMA_IRQHandler+0x2ee>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a55      	ldr	r2, [pc, #340]	; (80041a0 <HAL_DMA_IRQHandler+0x42c>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d009      	beq.n	8004062 <HAL_DMA_IRQHandler+0x2ee>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a54      	ldr	r2, [pc, #336]	; (80041a4 <HAL_DMA_IRQHandler+0x430>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d004      	beq.n	8004062 <HAL_DMA_IRQHandler+0x2ee>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a52      	ldr	r2, [pc, #328]	; (80041a8 <HAL_DMA_IRQHandler+0x434>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d10a      	bne.n	8004078 <HAL_DMA_IRQHandler+0x304>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	695b      	ldr	r3, [r3, #20]
 8004068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800406c:	2b00      	cmp	r3, #0
 800406e:	bf14      	ite	ne
 8004070:	2301      	movne	r3, #1
 8004072:	2300      	moveq	r3, #0
 8004074:	b2db      	uxtb	r3, r3
 8004076:	e003      	b.n	8004080 <HAL_DMA_IRQHandler+0x30c>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2300      	movs	r3, #0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00d      	beq.n	80040a0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004088:	f003 031f 	and.w	r3, r3, #31
 800408c:	2201      	movs	r2, #1
 800408e:	409a      	lsls	r2, r3
 8004090:	6a3b      	ldr	r3, [r7, #32]
 8004092:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004098:	f043 0202 	orr.w	r2, r3, #2
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a4:	f003 031f 	and.w	r3, r3, #31
 80040a8:	2204      	movs	r2, #4
 80040aa:	409a      	lsls	r2, r3
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	4013      	ands	r3, r2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f000 808f 	beq.w	80041d4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a2c      	ldr	r2, [pc, #176]	; (800416c <HAL_DMA_IRQHandler+0x3f8>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d04a      	beq.n	8004156 <HAL_DMA_IRQHandler+0x3e2>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a2a      	ldr	r2, [pc, #168]	; (8004170 <HAL_DMA_IRQHandler+0x3fc>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d045      	beq.n	8004156 <HAL_DMA_IRQHandler+0x3e2>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a29      	ldr	r2, [pc, #164]	; (8004174 <HAL_DMA_IRQHandler+0x400>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d040      	beq.n	8004156 <HAL_DMA_IRQHandler+0x3e2>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a27      	ldr	r2, [pc, #156]	; (8004178 <HAL_DMA_IRQHandler+0x404>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d03b      	beq.n	8004156 <HAL_DMA_IRQHandler+0x3e2>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a26      	ldr	r2, [pc, #152]	; (800417c <HAL_DMA_IRQHandler+0x408>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d036      	beq.n	8004156 <HAL_DMA_IRQHandler+0x3e2>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a24      	ldr	r2, [pc, #144]	; (8004180 <HAL_DMA_IRQHandler+0x40c>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d031      	beq.n	8004156 <HAL_DMA_IRQHandler+0x3e2>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a23      	ldr	r2, [pc, #140]	; (8004184 <HAL_DMA_IRQHandler+0x410>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d02c      	beq.n	8004156 <HAL_DMA_IRQHandler+0x3e2>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a21      	ldr	r2, [pc, #132]	; (8004188 <HAL_DMA_IRQHandler+0x414>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d027      	beq.n	8004156 <HAL_DMA_IRQHandler+0x3e2>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a20      	ldr	r2, [pc, #128]	; (800418c <HAL_DMA_IRQHandler+0x418>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d022      	beq.n	8004156 <HAL_DMA_IRQHandler+0x3e2>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a1e      	ldr	r2, [pc, #120]	; (8004190 <HAL_DMA_IRQHandler+0x41c>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d01d      	beq.n	8004156 <HAL_DMA_IRQHandler+0x3e2>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a1d      	ldr	r2, [pc, #116]	; (8004194 <HAL_DMA_IRQHandler+0x420>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d018      	beq.n	8004156 <HAL_DMA_IRQHandler+0x3e2>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a1b      	ldr	r2, [pc, #108]	; (8004198 <HAL_DMA_IRQHandler+0x424>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d013      	beq.n	8004156 <HAL_DMA_IRQHandler+0x3e2>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a1a      	ldr	r2, [pc, #104]	; (800419c <HAL_DMA_IRQHandler+0x428>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d00e      	beq.n	8004156 <HAL_DMA_IRQHandler+0x3e2>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a18      	ldr	r2, [pc, #96]	; (80041a0 <HAL_DMA_IRQHandler+0x42c>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d009      	beq.n	8004156 <HAL_DMA_IRQHandler+0x3e2>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a17      	ldr	r2, [pc, #92]	; (80041a4 <HAL_DMA_IRQHandler+0x430>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d004      	beq.n	8004156 <HAL_DMA_IRQHandler+0x3e2>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a15      	ldr	r2, [pc, #84]	; (80041a8 <HAL_DMA_IRQHandler+0x434>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d12a      	bne.n	80041ac <HAL_DMA_IRQHandler+0x438>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b00      	cmp	r3, #0
 8004162:	bf14      	ite	ne
 8004164:	2301      	movne	r3, #1
 8004166:	2300      	moveq	r3, #0
 8004168:	b2db      	uxtb	r3, r3
 800416a:	e023      	b.n	80041b4 <HAL_DMA_IRQHandler+0x440>
 800416c:	40020010 	.word	0x40020010
 8004170:	40020028 	.word	0x40020028
 8004174:	40020040 	.word	0x40020040
 8004178:	40020058 	.word	0x40020058
 800417c:	40020070 	.word	0x40020070
 8004180:	40020088 	.word	0x40020088
 8004184:	400200a0 	.word	0x400200a0
 8004188:	400200b8 	.word	0x400200b8
 800418c:	40020410 	.word	0x40020410
 8004190:	40020428 	.word	0x40020428
 8004194:	40020440 	.word	0x40020440
 8004198:	40020458 	.word	0x40020458
 800419c:	40020470 	.word	0x40020470
 80041a0:	40020488 	.word	0x40020488
 80041a4:	400204a0 	.word	0x400204a0
 80041a8:	400204b8 	.word	0x400204b8
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2300      	movs	r3, #0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00d      	beq.n	80041d4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041bc:	f003 031f 	and.w	r3, r3, #31
 80041c0:	2204      	movs	r2, #4
 80041c2:	409a      	lsls	r2, r3
 80041c4:	6a3b      	ldr	r3, [r7, #32]
 80041c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041cc:	f043 0204 	orr.w	r2, r3, #4
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d8:	f003 031f 	and.w	r3, r3, #31
 80041dc:	2210      	movs	r2, #16
 80041de:	409a      	lsls	r2, r3
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	4013      	ands	r3, r2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f000 80a6 	beq.w	8004336 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a85      	ldr	r2, [pc, #532]	; (8004404 <HAL_DMA_IRQHandler+0x690>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d04a      	beq.n	800428a <HAL_DMA_IRQHandler+0x516>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a83      	ldr	r2, [pc, #524]	; (8004408 <HAL_DMA_IRQHandler+0x694>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d045      	beq.n	800428a <HAL_DMA_IRQHandler+0x516>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a82      	ldr	r2, [pc, #520]	; (800440c <HAL_DMA_IRQHandler+0x698>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d040      	beq.n	800428a <HAL_DMA_IRQHandler+0x516>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a80      	ldr	r2, [pc, #512]	; (8004410 <HAL_DMA_IRQHandler+0x69c>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d03b      	beq.n	800428a <HAL_DMA_IRQHandler+0x516>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a7f      	ldr	r2, [pc, #508]	; (8004414 <HAL_DMA_IRQHandler+0x6a0>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d036      	beq.n	800428a <HAL_DMA_IRQHandler+0x516>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a7d      	ldr	r2, [pc, #500]	; (8004418 <HAL_DMA_IRQHandler+0x6a4>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d031      	beq.n	800428a <HAL_DMA_IRQHandler+0x516>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a7c      	ldr	r2, [pc, #496]	; (800441c <HAL_DMA_IRQHandler+0x6a8>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d02c      	beq.n	800428a <HAL_DMA_IRQHandler+0x516>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a7a      	ldr	r2, [pc, #488]	; (8004420 <HAL_DMA_IRQHandler+0x6ac>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d027      	beq.n	800428a <HAL_DMA_IRQHandler+0x516>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a79      	ldr	r2, [pc, #484]	; (8004424 <HAL_DMA_IRQHandler+0x6b0>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d022      	beq.n	800428a <HAL_DMA_IRQHandler+0x516>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a77      	ldr	r2, [pc, #476]	; (8004428 <HAL_DMA_IRQHandler+0x6b4>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d01d      	beq.n	800428a <HAL_DMA_IRQHandler+0x516>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a76      	ldr	r2, [pc, #472]	; (800442c <HAL_DMA_IRQHandler+0x6b8>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d018      	beq.n	800428a <HAL_DMA_IRQHandler+0x516>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a74      	ldr	r2, [pc, #464]	; (8004430 <HAL_DMA_IRQHandler+0x6bc>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d013      	beq.n	800428a <HAL_DMA_IRQHandler+0x516>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a73      	ldr	r2, [pc, #460]	; (8004434 <HAL_DMA_IRQHandler+0x6c0>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d00e      	beq.n	800428a <HAL_DMA_IRQHandler+0x516>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a71      	ldr	r2, [pc, #452]	; (8004438 <HAL_DMA_IRQHandler+0x6c4>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d009      	beq.n	800428a <HAL_DMA_IRQHandler+0x516>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a70      	ldr	r2, [pc, #448]	; (800443c <HAL_DMA_IRQHandler+0x6c8>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d004      	beq.n	800428a <HAL_DMA_IRQHandler+0x516>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a6e      	ldr	r2, [pc, #440]	; (8004440 <HAL_DMA_IRQHandler+0x6cc>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d10a      	bne.n	80042a0 <HAL_DMA_IRQHandler+0x52c>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0308 	and.w	r3, r3, #8
 8004294:	2b00      	cmp	r3, #0
 8004296:	bf14      	ite	ne
 8004298:	2301      	movne	r3, #1
 800429a:	2300      	moveq	r3, #0
 800429c:	b2db      	uxtb	r3, r3
 800429e:	e009      	b.n	80042b4 <HAL_DMA_IRQHandler+0x540>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0304 	and.w	r3, r3, #4
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	bf14      	ite	ne
 80042ae:	2301      	movne	r3, #1
 80042b0:	2300      	moveq	r3, #0
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d03e      	beq.n	8004336 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042bc:	f003 031f 	and.w	r3, r3, #31
 80042c0:	2210      	movs	r2, #16
 80042c2:	409a      	lsls	r2, r3
 80042c4:	6a3b      	ldr	r3, [r7, #32]
 80042c6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d018      	beq.n	8004308 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d108      	bne.n	80042f6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d024      	beq.n	8004336 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	4798      	blx	r3
 80042f4:	e01f      	b.n	8004336 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d01b      	beq.n	8004336 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	4798      	blx	r3
 8004306:	e016      	b.n	8004336 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004312:	2b00      	cmp	r3, #0
 8004314:	d107      	bne.n	8004326 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f022 0208 	bic.w	r2, r2, #8
 8004324:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432a:	2b00      	cmp	r3, #0
 800432c:	d003      	beq.n	8004336 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800433a:	f003 031f 	and.w	r3, r3, #31
 800433e:	2220      	movs	r2, #32
 8004340:	409a      	lsls	r2, r3
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	4013      	ands	r3, r2
 8004346:	2b00      	cmp	r3, #0
 8004348:	f000 8110 	beq.w	800456c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a2c      	ldr	r2, [pc, #176]	; (8004404 <HAL_DMA_IRQHandler+0x690>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d04a      	beq.n	80043ec <HAL_DMA_IRQHandler+0x678>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a2b      	ldr	r2, [pc, #172]	; (8004408 <HAL_DMA_IRQHandler+0x694>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d045      	beq.n	80043ec <HAL_DMA_IRQHandler+0x678>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a29      	ldr	r2, [pc, #164]	; (800440c <HAL_DMA_IRQHandler+0x698>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d040      	beq.n	80043ec <HAL_DMA_IRQHandler+0x678>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a28      	ldr	r2, [pc, #160]	; (8004410 <HAL_DMA_IRQHandler+0x69c>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d03b      	beq.n	80043ec <HAL_DMA_IRQHandler+0x678>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a26      	ldr	r2, [pc, #152]	; (8004414 <HAL_DMA_IRQHandler+0x6a0>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d036      	beq.n	80043ec <HAL_DMA_IRQHandler+0x678>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a25      	ldr	r2, [pc, #148]	; (8004418 <HAL_DMA_IRQHandler+0x6a4>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d031      	beq.n	80043ec <HAL_DMA_IRQHandler+0x678>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a23      	ldr	r2, [pc, #140]	; (800441c <HAL_DMA_IRQHandler+0x6a8>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d02c      	beq.n	80043ec <HAL_DMA_IRQHandler+0x678>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a22      	ldr	r2, [pc, #136]	; (8004420 <HAL_DMA_IRQHandler+0x6ac>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d027      	beq.n	80043ec <HAL_DMA_IRQHandler+0x678>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a20      	ldr	r2, [pc, #128]	; (8004424 <HAL_DMA_IRQHandler+0x6b0>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d022      	beq.n	80043ec <HAL_DMA_IRQHandler+0x678>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a1f      	ldr	r2, [pc, #124]	; (8004428 <HAL_DMA_IRQHandler+0x6b4>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d01d      	beq.n	80043ec <HAL_DMA_IRQHandler+0x678>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a1d      	ldr	r2, [pc, #116]	; (800442c <HAL_DMA_IRQHandler+0x6b8>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d018      	beq.n	80043ec <HAL_DMA_IRQHandler+0x678>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a1c      	ldr	r2, [pc, #112]	; (8004430 <HAL_DMA_IRQHandler+0x6bc>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d013      	beq.n	80043ec <HAL_DMA_IRQHandler+0x678>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a1a      	ldr	r2, [pc, #104]	; (8004434 <HAL_DMA_IRQHandler+0x6c0>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d00e      	beq.n	80043ec <HAL_DMA_IRQHandler+0x678>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a19      	ldr	r2, [pc, #100]	; (8004438 <HAL_DMA_IRQHandler+0x6c4>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d009      	beq.n	80043ec <HAL_DMA_IRQHandler+0x678>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a17      	ldr	r2, [pc, #92]	; (800443c <HAL_DMA_IRQHandler+0x6c8>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d004      	beq.n	80043ec <HAL_DMA_IRQHandler+0x678>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a16      	ldr	r2, [pc, #88]	; (8004440 <HAL_DMA_IRQHandler+0x6cc>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d12b      	bne.n	8004444 <HAL_DMA_IRQHandler+0x6d0>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0310 	and.w	r3, r3, #16
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	bf14      	ite	ne
 80043fa:	2301      	movne	r3, #1
 80043fc:	2300      	moveq	r3, #0
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	e02a      	b.n	8004458 <HAL_DMA_IRQHandler+0x6e4>
 8004402:	bf00      	nop
 8004404:	40020010 	.word	0x40020010
 8004408:	40020028 	.word	0x40020028
 800440c:	40020040 	.word	0x40020040
 8004410:	40020058 	.word	0x40020058
 8004414:	40020070 	.word	0x40020070
 8004418:	40020088 	.word	0x40020088
 800441c:	400200a0 	.word	0x400200a0
 8004420:	400200b8 	.word	0x400200b8
 8004424:	40020410 	.word	0x40020410
 8004428:	40020428 	.word	0x40020428
 800442c:	40020440 	.word	0x40020440
 8004430:	40020458 	.word	0x40020458
 8004434:	40020470 	.word	0x40020470
 8004438:	40020488 	.word	0x40020488
 800443c:	400204a0 	.word	0x400204a0
 8004440:	400204b8 	.word	0x400204b8
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0302 	and.w	r3, r3, #2
 800444e:	2b00      	cmp	r3, #0
 8004450:	bf14      	ite	ne
 8004452:	2301      	movne	r3, #1
 8004454:	2300      	moveq	r3, #0
 8004456:	b2db      	uxtb	r3, r3
 8004458:	2b00      	cmp	r3, #0
 800445a:	f000 8087 	beq.w	800456c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004462:	f003 031f 	and.w	r3, r3, #31
 8004466:	2220      	movs	r2, #32
 8004468:	409a      	lsls	r2, r3
 800446a:	6a3b      	ldr	r3, [r7, #32]
 800446c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b04      	cmp	r3, #4
 8004478:	d139      	bne.n	80044ee <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 0216 	bic.w	r2, r2, #22
 8004488:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	695a      	ldr	r2, [r3, #20]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004498:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d103      	bne.n	80044aa <HAL_DMA_IRQHandler+0x736>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d007      	beq.n	80044ba <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f022 0208 	bic.w	r2, r2, #8
 80044b8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044be:	f003 031f 	and.w	r3, r3, #31
 80044c2:	223f      	movs	r2, #63	; 0x3f
 80044c4:	409a      	lsls	r2, r3
 80044c6:	6a3b      	ldr	r3, [r7, #32]
 80044c8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2201      	movs	r2, #1
 80044ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f000 834a 	beq.w	8004b78 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	4798      	blx	r3
          }
          return;
 80044ec:	e344      	b.n	8004b78 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d018      	beq.n	800452e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d108      	bne.n	800451c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800450e:	2b00      	cmp	r3, #0
 8004510:	d02c      	beq.n	800456c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	4798      	blx	r3
 800451a:	e027      	b.n	800456c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004520:	2b00      	cmp	r3, #0
 8004522:	d023      	beq.n	800456c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	4798      	blx	r3
 800452c:	e01e      	b.n	800456c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004538:	2b00      	cmp	r3, #0
 800453a:	d10f      	bne.n	800455c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f022 0210 	bic.w	r2, r2, #16
 800454a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004560:	2b00      	cmp	r3, #0
 8004562:	d003      	beq.n	800456c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004570:	2b00      	cmp	r3, #0
 8004572:	f000 8306 	beq.w	8004b82 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800457a:	f003 0301 	and.w	r3, r3, #1
 800457e:	2b00      	cmp	r3, #0
 8004580:	f000 8088 	beq.w	8004694 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2204      	movs	r2, #4
 8004588:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a7a      	ldr	r2, [pc, #488]	; (800477c <HAL_DMA_IRQHandler+0xa08>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d04a      	beq.n	800462c <HAL_DMA_IRQHandler+0x8b8>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a79      	ldr	r2, [pc, #484]	; (8004780 <HAL_DMA_IRQHandler+0xa0c>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d045      	beq.n	800462c <HAL_DMA_IRQHandler+0x8b8>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a77      	ldr	r2, [pc, #476]	; (8004784 <HAL_DMA_IRQHandler+0xa10>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d040      	beq.n	800462c <HAL_DMA_IRQHandler+0x8b8>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a76      	ldr	r2, [pc, #472]	; (8004788 <HAL_DMA_IRQHandler+0xa14>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d03b      	beq.n	800462c <HAL_DMA_IRQHandler+0x8b8>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a74      	ldr	r2, [pc, #464]	; (800478c <HAL_DMA_IRQHandler+0xa18>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d036      	beq.n	800462c <HAL_DMA_IRQHandler+0x8b8>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a73      	ldr	r2, [pc, #460]	; (8004790 <HAL_DMA_IRQHandler+0xa1c>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d031      	beq.n	800462c <HAL_DMA_IRQHandler+0x8b8>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a71      	ldr	r2, [pc, #452]	; (8004794 <HAL_DMA_IRQHandler+0xa20>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d02c      	beq.n	800462c <HAL_DMA_IRQHandler+0x8b8>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a70      	ldr	r2, [pc, #448]	; (8004798 <HAL_DMA_IRQHandler+0xa24>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d027      	beq.n	800462c <HAL_DMA_IRQHandler+0x8b8>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a6e      	ldr	r2, [pc, #440]	; (800479c <HAL_DMA_IRQHandler+0xa28>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d022      	beq.n	800462c <HAL_DMA_IRQHandler+0x8b8>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a6d      	ldr	r2, [pc, #436]	; (80047a0 <HAL_DMA_IRQHandler+0xa2c>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d01d      	beq.n	800462c <HAL_DMA_IRQHandler+0x8b8>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a6b      	ldr	r2, [pc, #428]	; (80047a4 <HAL_DMA_IRQHandler+0xa30>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d018      	beq.n	800462c <HAL_DMA_IRQHandler+0x8b8>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a6a      	ldr	r2, [pc, #424]	; (80047a8 <HAL_DMA_IRQHandler+0xa34>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d013      	beq.n	800462c <HAL_DMA_IRQHandler+0x8b8>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a68      	ldr	r2, [pc, #416]	; (80047ac <HAL_DMA_IRQHandler+0xa38>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d00e      	beq.n	800462c <HAL_DMA_IRQHandler+0x8b8>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a67      	ldr	r2, [pc, #412]	; (80047b0 <HAL_DMA_IRQHandler+0xa3c>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d009      	beq.n	800462c <HAL_DMA_IRQHandler+0x8b8>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a65      	ldr	r2, [pc, #404]	; (80047b4 <HAL_DMA_IRQHandler+0xa40>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d004      	beq.n	800462c <HAL_DMA_IRQHandler+0x8b8>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a64      	ldr	r2, [pc, #400]	; (80047b8 <HAL_DMA_IRQHandler+0xa44>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d108      	bne.n	800463e <HAL_DMA_IRQHandler+0x8ca>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f022 0201 	bic.w	r2, r2, #1
 800463a:	601a      	str	r2, [r3, #0]
 800463c:	e007      	b.n	800464e <HAL_DMA_IRQHandler+0x8da>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f022 0201 	bic.w	r2, r2, #1
 800464c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	3301      	adds	r3, #1
 8004652:	60fb      	str	r3, [r7, #12]
 8004654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004656:	429a      	cmp	r2, r3
 8004658:	d307      	bcc.n	800466a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0301 	and.w	r3, r3, #1
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1f2      	bne.n	800464e <HAL_DMA_IRQHandler+0x8da>
 8004668:	e000      	b.n	800466c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800466a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	2b00      	cmp	r3, #0
 8004678:	d004      	beq.n	8004684 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2203      	movs	r2, #3
 800467e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004682:	e003      	b.n	800468c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004698:	2b00      	cmp	r3, #0
 800469a:	f000 8272 	beq.w	8004b82 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	4798      	blx	r3
 80046a6:	e26c      	b.n	8004b82 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a43      	ldr	r2, [pc, #268]	; (80047bc <HAL_DMA_IRQHandler+0xa48>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d022      	beq.n	80046f8 <HAL_DMA_IRQHandler+0x984>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a42      	ldr	r2, [pc, #264]	; (80047c0 <HAL_DMA_IRQHandler+0xa4c>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d01d      	beq.n	80046f8 <HAL_DMA_IRQHandler+0x984>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a40      	ldr	r2, [pc, #256]	; (80047c4 <HAL_DMA_IRQHandler+0xa50>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d018      	beq.n	80046f8 <HAL_DMA_IRQHandler+0x984>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a3f      	ldr	r2, [pc, #252]	; (80047c8 <HAL_DMA_IRQHandler+0xa54>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d013      	beq.n	80046f8 <HAL_DMA_IRQHandler+0x984>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a3d      	ldr	r2, [pc, #244]	; (80047cc <HAL_DMA_IRQHandler+0xa58>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d00e      	beq.n	80046f8 <HAL_DMA_IRQHandler+0x984>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a3c      	ldr	r2, [pc, #240]	; (80047d0 <HAL_DMA_IRQHandler+0xa5c>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d009      	beq.n	80046f8 <HAL_DMA_IRQHandler+0x984>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a3a      	ldr	r2, [pc, #232]	; (80047d4 <HAL_DMA_IRQHandler+0xa60>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d004      	beq.n	80046f8 <HAL_DMA_IRQHandler+0x984>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a39      	ldr	r2, [pc, #228]	; (80047d8 <HAL_DMA_IRQHandler+0xa64>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d101      	bne.n	80046fc <HAL_DMA_IRQHandler+0x988>
 80046f8:	2301      	movs	r3, #1
 80046fa:	e000      	b.n	80046fe <HAL_DMA_IRQHandler+0x98a>
 80046fc:	2300      	movs	r3, #0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	f000 823f 	beq.w	8004b82 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004710:	f003 031f 	and.w	r3, r3, #31
 8004714:	2204      	movs	r2, #4
 8004716:	409a      	lsls	r2, r3
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	4013      	ands	r3, r2
 800471c:	2b00      	cmp	r3, #0
 800471e:	f000 80cd 	beq.w	80048bc <HAL_DMA_IRQHandler+0xb48>
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	f003 0304 	and.w	r3, r3, #4
 8004728:	2b00      	cmp	r3, #0
 800472a:	f000 80c7 	beq.w	80048bc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004732:	f003 031f 	and.w	r3, r3, #31
 8004736:	2204      	movs	r2, #4
 8004738:	409a      	lsls	r2, r3
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d049      	beq.n	80047dc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d109      	bne.n	8004766 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004756:	2b00      	cmp	r3, #0
 8004758:	f000 8210 	beq.w	8004b7c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004764:	e20a      	b.n	8004b7c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476a:	2b00      	cmp	r3, #0
 800476c:	f000 8206 	beq.w	8004b7c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004778:	e200      	b.n	8004b7c <HAL_DMA_IRQHandler+0xe08>
 800477a:	bf00      	nop
 800477c:	40020010 	.word	0x40020010
 8004780:	40020028 	.word	0x40020028
 8004784:	40020040 	.word	0x40020040
 8004788:	40020058 	.word	0x40020058
 800478c:	40020070 	.word	0x40020070
 8004790:	40020088 	.word	0x40020088
 8004794:	400200a0 	.word	0x400200a0
 8004798:	400200b8 	.word	0x400200b8
 800479c:	40020410 	.word	0x40020410
 80047a0:	40020428 	.word	0x40020428
 80047a4:	40020440 	.word	0x40020440
 80047a8:	40020458 	.word	0x40020458
 80047ac:	40020470 	.word	0x40020470
 80047b0:	40020488 	.word	0x40020488
 80047b4:	400204a0 	.word	0x400204a0
 80047b8:	400204b8 	.word	0x400204b8
 80047bc:	58025408 	.word	0x58025408
 80047c0:	5802541c 	.word	0x5802541c
 80047c4:	58025430 	.word	0x58025430
 80047c8:	58025444 	.word	0x58025444
 80047cc:	58025458 	.word	0x58025458
 80047d0:	5802546c 	.word	0x5802546c
 80047d4:	58025480 	.word	0x58025480
 80047d8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	f003 0320 	and.w	r3, r3, #32
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d160      	bne.n	80048a8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a7f      	ldr	r2, [pc, #508]	; (80049e8 <HAL_DMA_IRQHandler+0xc74>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d04a      	beq.n	8004886 <HAL_DMA_IRQHandler+0xb12>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a7d      	ldr	r2, [pc, #500]	; (80049ec <HAL_DMA_IRQHandler+0xc78>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d045      	beq.n	8004886 <HAL_DMA_IRQHandler+0xb12>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a7c      	ldr	r2, [pc, #496]	; (80049f0 <HAL_DMA_IRQHandler+0xc7c>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d040      	beq.n	8004886 <HAL_DMA_IRQHandler+0xb12>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a7a      	ldr	r2, [pc, #488]	; (80049f4 <HAL_DMA_IRQHandler+0xc80>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d03b      	beq.n	8004886 <HAL_DMA_IRQHandler+0xb12>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a79      	ldr	r2, [pc, #484]	; (80049f8 <HAL_DMA_IRQHandler+0xc84>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d036      	beq.n	8004886 <HAL_DMA_IRQHandler+0xb12>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a77      	ldr	r2, [pc, #476]	; (80049fc <HAL_DMA_IRQHandler+0xc88>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d031      	beq.n	8004886 <HAL_DMA_IRQHandler+0xb12>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a76      	ldr	r2, [pc, #472]	; (8004a00 <HAL_DMA_IRQHandler+0xc8c>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d02c      	beq.n	8004886 <HAL_DMA_IRQHandler+0xb12>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a74      	ldr	r2, [pc, #464]	; (8004a04 <HAL_DMA_IRQHandler+0xc90>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d027      	beq.n	8004886 <HAL_DMA_IRQHandler+0xb12>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a73      	ldr	r2, [pc, #460]	; (8004a08 <HAL_DMA_IRQHandler+0xc94>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d022      	beq.n	8004886 <HAL_DMA_IRQHandler+0xb12>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a71      	ldr	r2, [pc, #452]	; (8004a0c <HAL_DMA_IRQHandler+0xc98>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d01d      	beq.n	8004886 <HAL_DMA_IRQHandler+0xb12>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a70      	ldr	r2, [pc, #448]	; (8004a10 <HAL_DMA_IRQHandler+0xc9c>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d018      	beq.n	8004886 <HAL_DMA_IRQHandler+0xb12>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a6e      	ldr	r2, [pc, #440]	; (8004a14 <HAL_DMA_IRQHandler+0xca0>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d013      	beq.n	8004886 <HAL_DMA_IRQHandler+0xb12>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a6d      	ldr	r2, [pc, #436]	; (8004a18 <HAL_DMA_IRQHandler+0xca4>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d00e      	beq.n	8004886 <HAL_DMA_IRQHandler+0xb12>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a6b      	ldr	r2, [pc, #428]	; (8004a1c <HAL_DMA_IRQHandler+0xca8>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d009      	beq.n	8004886 <HAL_DMA_IRQHandler+0xb12>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a6a      	ldr	r2, [pc, #424]	; (8004a20 <HAL_DMA_IRQHandler+0xcac>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d004      	beq.n	8004886 <HAL_DMA_IRQHandler+0xb12>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a68      	ldr	r2, [pc, #416]	; (8004a24 <HAL_DMA_IRQHandler+0xcb0>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d108      	bne.n	8004898 <HAL_DMA_IRQHandler+0xb24>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f022 0208 	bic.w	r2, r2, #8
 8004894:	601a      	str	r2, [r3, #0]
 8004896:	e007      	b.n	80048a8 <HAL_DMA_IRQHandler+0xb34>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f022 0204 	bic.w	r2, r2, #4
 80048a6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f000 8165 	beq.w	8004b7c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048ba:	e15f      	b.n	8004b7c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048c0:	f003 031f 	and.w	r3, r3, #31
 80048c4:	2202      	movs	r2, #2
 80048c6:	409a      	lsls	r2, r3
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	4013      	ands	r3, r2
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	f000 80c5 	beq.w	8004a5c <HAL_DMA_IRQHandler+0xce8>
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	f003 0302 	and.w	r3, r3, #2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f000 80bf 	beq.w	8004a5c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048e2:	f003 031f 	and.w	r3, r3, #31
 80048e6:	2202      	movs	r2, #2
 80048e8:	409a      	lsls	r2, r3
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d018      	beq.n	800492a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d109      	bne.n	8004916 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004906:	2b00      	cmp	r3, #0
 8004908:	f000 813a 	beq.w	8004b80 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004914:	e134      	b.n	8004b80 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800491a:	2b00      	cmp	r3, #0
 800491c:	f000 8130 	beq.w	8004b80 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004928:	e12a      	b.n	8004b80 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	f003 0320 	and.w	r3, r3, #32
 8004930:	2b00      	cmp	r3, #0
 8004932:	f040 8089 	bne.w	8004a48 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a2b      	ldr	r2, [pc, #172]	; (80049e8 <HAL_DMA_IRQHandler+0xc74>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d04a      	beq.n	80049d6 <HAL_DMA_IRQHandler+0xc62>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a29      	ldr	r2, [pc, #164]	; (80049ec <HAL_DMA_IRQHandler+0xc78>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d045      	beq.n	80049d6 <HAL_DMA_IRQHandler+0xc62>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a28      	ldr	r2, [pc, #160]	; (80049f0 <HAL_DMA_IRQHandler+0xc7c>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d040      	beq.n	80049d6 <HAL_DMA_IRQHandler+0xc62>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a26      	ldr	r2, [pc, #152]	; (80049f4 <HAL_DMA_IRQHandler+0xc80>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d03b      	beq.n	80049d6 <HAL_DMA_IRQHandler+0xc62>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a25      	ldr	r2, [pc, #148]	; (80049f8 <HAL_DMA_IRQHandler+0xc84>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d036      	beq.n	80049d6 <HAL_DMA_IRQHandler+0xc62>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a23      	ldr	r2, [pc, #140]	; (80049fc <HAL_DMA_IRQHandler+0xc88>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d031      	beq.n	80049d6 <HAL_DMA_IRQHandler+0xc62>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a22      	ldr	r2, [pc, #136]	; (8004a00 <HAL_DMA_IRQHandler+0xc8c>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d02c      	beq.n	80049d6 <HAL_DMA_IRQHandler+0xc62>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a20      	ldr	r2, [pc, #128]	; (8004a04 <HAL_DMA_IRQHandler+0xc90>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d027      	beq.n	80049d6 <HAL_DMA_IRQHandler+0xc62>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a1f      	ldr	r2, [pc, #124]	; (8004a08 <HAL_DMA_IRQHandler+0xc94>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d022      	beq.n	80049d6 <HAL_DMA_IRQHandler+0xc62>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a1d      	ldr	r2, [pc, #116]	; (8004a0c <HAL_DMA_IRQHandler+0xc98>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d01d      	beq.n	80049d6 <HAL_DMA_IRQHandler+0xc62>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a1c      	ldr	r2, [pc, #112]	; (8004a10 <HAL_DMA_IRQHandler+0xc9c>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d018      	beq.n	80049d6 <HAL_DMA_IRQHandler+0xc62>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a1a      	ldr	r2, [pc, #104]	; (8004a14 <HAL_DMA_IRQHandler+0xca0>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d013      	beq.n	80049d6 <HAL_DMA_IRQHandler+0xc62>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a19      	ldr	r2, [pc, #100]	; (8004a18 <HAL_DMA_IRQHandler+0xca4>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d00e      	beq.n	80049d6 <HAL_DMA_IRQHandler+0xc62>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a17      	ldr	r2, [pc, #92]	; (8004a1c <HAL_DMA_IRQHandler+0xca8>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d009      	beq.n	80049d6 <HAL_DMA_IRQHandler+0xc62>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a16      	ldr	r2, [pc, #88]	; (8004a20 <HAL_DMA_IRQHandler+0xcac>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d004      	beq.n	80049d6 <HAL_DMA_IRQHandler+0xc62>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a14      	ldr	r2, [pc, #80]	; (8004a24 <HAL_DMA_IRQHandler+0xcb0>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d128      	bne.n	8004a28 <HAL_DMA_IRQHandler+0xcb4>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f022 0214 	bic.w	r2, r2, #20
 80049e4:	601a      	str	r2, [r3, #0]
 80049e6:	e027      	b.n	8004a38 <HAL_DMA_IRQHandler+0xcc4>
 80049e8:	40020010 	.word	0x40020010
 80049ec:	40020028 	.word	0x40020028
 80049f0:	40020040 	.word	0x40020040
 80049f4:	40020058 	.word	0x40020058
 80049f8:	40020070 	.word	0x40020070
 80049fc:	40020088 	.word	0x40020088
 8004a00:	400200a0 	.word	0x400200a0
 8004a04:	400200b8 	.word	0x400200b8
 8004a08:	40020410 	.word	0x40020410
 8004a0c:	40020428 	.word	0x40020428
 8004a10:	40020440 	.word	0x40020440
 8004a14:	40020458 	.word	0x40020458
 8004a18:	40020470 	.word	0x40020470
 8004a1c:	40020488 	.word	0x40020488
 8004a20:	400204a0 	.word	0x400204a0
 8004a24:	400204b8 	.word	0x400204b8
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f022 020a 	bic.w	r2, r2, #10
 8004a36:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f000 8097 	beq.w	8004b80 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a5a:	e091      	b.n	8004b80 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a60:	f003 031f 	and.w	r3, r3, #31
 8004a64:	2208      	movs	r2, #8
 8004a66:	409a      	lsls	r2, r3
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	f000 8088 	beq.w	8004b82 <HAL_DMA_IRQHandler+0xe0e>
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	f003 0308 	and.w	r3, r3, #8
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	f000 8082 	beq.w	8004b82 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a41      	ldr	r2, [pc, #260]	; (8004b88 <HAL_DMA_IRQHandler+0xe14>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d04a      	beq.n	8004b1e <HAL_DMA_IRQHandler+0xdaa>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a3f      	ldr	r2, [pc, #252]	; (8004b8c <HAL_DMA_IRQHandler+0xe18>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d045      	beq.n	8004b1e <HAL_DMA_IRQHandler+0xdaa>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a3e      	ldr	r2, [pc, #248]	; (8004b90 <HAL_DMA_IRQHandler+0xe1c>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d040      	beq.n	8004b1e <HAL_DMA_IRQHandler+0xdaa>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a3c      	ldr	r2, [pc, #240]	; (8004b94 <HAL_DMA_IRQHandler+0xe20>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d03b      	beq.n	8004b1e <HAL_DMA_IRQHandler+0xdaa>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a3b      	ldr	r2, [pc, #236]	; (8004b98 <HAL_DMA_IRQHandler+0xe24>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d036      	beq.n	8004b1e <HAL_DMA_IRQHandler+0xdaa>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a39      	ldr	r2, [pc, #228]	; (8004b9c <HAL_DMA_IRQHandler+0xe28>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d031      	beq.n	8004b1e <HAL_DMA_IRQHandler+0xdaa>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a38      	ldr	r2, [pc, #224]	; (8004ba0 <HAL_DMA_IRQHandler+0xe2c>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d02c      	beq.n	8004b1e <HAL_DMA_IRQHandler+0xdaa>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a36      	ldr	r2, [pc, #216]	; (8004ba4 <HAL_DMA_IRQHandler+0xe30>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d027      	beq.n	8004b1e <HAL_DMA_IRQHandler+0xdaa>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a35      	ldr	r2, [pc, #212]	; (8004ba8 <HAL_DMA_IRQHandler+0xe34>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d022      	beq.n	8004b1e <HAL_DMA_IRQHandler+0xdaa>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a33      	ldr	r2, [pc, #204]	; (8004bac <HAL_DMA_IRQHandler+0xe38>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d01d      	beq.n	8004b1e <HAL_DMA_IRQHandler+0xdaa>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a32      	ldr	r2, [pc, #200]	; (8004bb0 <HAL_DMA_IRQHandler+0xe3c>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d018      	beq.n	8004b1e <HAL_DMA_IRQHandler+0xdaa>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a30      	ldr	r2, [pc, #192]	; (8004bb4 <HAL_DMA_IRQHandler+0xe40>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d013      	beq.n	8004b1e <HAL_DMA_IRQHandler+0xdaa>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a2f      	ldr	r2, [pc, #188]	; (8004bb8 <HAL_DMA_IRQHandler+0xe44>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d00e      	beq.n	8004b1e <HAL_DMA_IRQHandler+0xdaa>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a2d      	ldr	r2, [pc, #180]	; (8004bbc <HAL_DMA_IRQHandler+0xe48>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d009      	beq.n	8004b1e <HAL_DMA_IRQHandler+0xdaa>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a2c      	ldr	r2, [pc, #176]	; (8004bc0 <HAL_DMA_IRQHandler+0xe4c>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d004      	beq.n	8004b1e <HAL_DMA_IRQHandler+0xdaa>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a2a      	ldr	r2, [pc, #168]	; (8004bc4 <HAL_DMA_IRQHandler+0xe50>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d108      	bne.n	8004b30 <HAL_DMA_IRQHandler+0xdbc>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f022 021c 	bic.w	r2, r2, #28
 8004b2c:	601a      	str	r2, [r3, #0]
 8004b2e:	e007      	b.n	8004b40 <HAL_DMA_IRQHandler+0xdcc>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f022 020e 	bic.w	r2, r2, #14
 8004b3e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b44:	f003 031f 	and.w	r3, r3, #31
 8004b48:	2201      	movs	r2, #1
 8004b4a:	409a      	lsls	r2, r3
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d009      	beq.n	8004b82 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	4798      	blx	r3
 8004b76:	e004      	b.n	8004b82 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004b78:	bf00      	nop
 8004b7a:	e002      	b.n	8004b82 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b7c:	bf00      	nop
 8004b7e:	e000      	b.n	8004b82 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b80:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004b82:	3728      	adds	r7, #40	; 0x28
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	40020010 	.word	0x40020010
 8004b8c:	40020028 	.word	0x40020028
 8004b90:	40020040 	.word	0x40020040
 8004b94:	40020058 	.word	0x40020058
 8004b98:	40020070 	.word	0x40020070
 8004b9c:	40020088 	.word	0x40020088
 8004ba0:	400200a0 	.word	0x400200a0
 8004ba4:	400200b8 	.word	0x400200b8
 8004ba8:	40020410 	.word	0x40020410
 8004bac:	40020428 	.word	0x40020428
 8004bb0:	40020440 	.word	0x40020440
 8004bb4:	40020458 	.word	0x40020458
 8004bb8:	40020470 	.word	0x40020470
 8004bbc:	40020488 	.word	0x40020488
 8004bc0:	400204a0 	.word	0x400204a0
 8004bc4:	400204b8 	.word	0x400204b8

08004bc8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a42      	ldr	r2, [pc, #264]	; (8004ce0 <DMA_CalcBaseAndBitshift+0x118>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d04a      	beq.n	8004c70 <DMA_CalcBaseAndBitshift+0xa8>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a41      	ldr	r2, [pc, #260]	; (8004ce4 <DMA_CalcBaseAndBitshift+0x11c>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d045      	beq.n	8004c70 <DMA_CalcBaseAndBitshift+0xa8>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a3f      	ldr	r2, [pc, #252]	; (8004ce8 <DMA_CalcBaseAndBitshift+0x120>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d040      	beq.n	8004c70 <DMA_CalcBaseAndBitshift+0xa8>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a3e      	ldr	r2, [pc, #248]	; (8004cec <DMA_CalcBaseAndBitshift+0x124>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d03b      	beq.n	8004c70 <DMA_CalcBaseAndBitshift+0xa8>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a3c      	ldr	r2, [pc, #240]	; (8004cf0 <DMA_CalcBaseAndBitshift+0x128>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d036      	beq.n	8004c70 <DMA_CalcBaseAndBitshift+0xa8>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a3b      	ldr	r2, [pc, #236]	; (8004cf4 <DMA_CalcBaseAndBitshift+0x12c>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d031      	beq.n	8004c70 <DMA_CalcBaseAndBitshift+0xa8>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a39      	ldr	r2, [pc, #228]	; (8004cf8 <DMA_CalcBaseAndBitshift+0x130>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d02c      	beq.n	8004c70 <DMA_CalcBaseAndBitshift+0xa8>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a38      	ldr	r2, [pc, #224]	; (8004cfc <DMA_CalcBaseAndBitshift+0x134>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d027      	beq.n	8004c70 <DMA_CalcBaseAndBitshift+0xa8>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a36      	ldr	r2, [pc, #216]	; (8004d00 <DMA_CalcBaseAndBitshift+0x138>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d022      	beq.n	8004c70 <DMA_CalcBaseAndBitshift+0xa8>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a35      	ldr	r2, [pc, #212]	; (8004d04 <DMA_CalcBaseAndBitshift+0x13c>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d01d      	beq.n	8004c70 <DMA_CalcBaseAndBitshift+0xa8>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a33      	ldr	r2, [pc, #204]	; (8004d08 <DMA_CalcBaseAndBitshift+0x140>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d018      	beq.n	8004c70 <DMA_CalcBaseAndBitshift+0xa8>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a32      	ldr	r2, [pc, #200]	; (8004d0c <DMA_CalcBaseAndBitshift+0x144>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d013      	beq.n	8004c70 <DMA_CalcBaseAndBitshift+0xa8>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a30      	ldr	r2, [pc, #192]	; (8004d10 <DMA_CalcBaseAndBitshift+0x148>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d00e      	beq.n	8004c70 <DMA_CalcBaseAndBitshift+0xa8>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a2f      	ldr	r2, [pc, #188]	; (8004d14 <DMA_CalcBaseAndBitshift+0x14c>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d009      	beq.n	8004c70 <DMA_CalcBaseAndBitshift+0xa8>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a2d      	ldr	r2, [pc, #180]	; (8004d18 <DMA_CalcBaseAndBitshift+0x150>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d004      	beq.n	8004c70 <DMA_CalcBaseAndBitshift+0xa8>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a2c      	ldr	r2, [pc, #176]	; (8004d1c <DMA_CalcBaseAndBitshift+0x154>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d101      	bne.n	8004c74 <DMA_CalcBaseAndBitshift+0xac>
 8004c70:	2301      	movs	r3, #1
 8004c72:	e000      	b.n	8004c76 <DMA_CalcBaseAndBitshift+0xae>
 8004c74:	2300      	movs	r3, #0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d024      	beq.n	8004cc4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	3b10      	subs	r3, #16
 8004c82:	4a27      	ldr	r2, [pc, #156]	; (8004d20 <DMA_CalcBaseAndBitshift+0x158>)
 8004c84:	fba2 2303 	umull	r2, r3, r2, r3
 8004c88:	091b      	lsrs	r3, r3, #4
 8004c8a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f003 0307 	and.w	r3, r3, #7
 8004c92:	4a24      	ldr	r2, [pc, #144]	; (8004d24 <DMA_CalcBaseAndBitshift+0x15c>)
 8004c94:	5cd3      	ldrb	r3, [r2, r3]
 8004c96:	461a      	mov	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2b03      	cmp	r3, #3
 8004ca0:	d908      	bls.n	8004cb4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	4b1f      	ldr	r3, [pc, #124]	; (8004d28 <DMA_CalcBaseAndBitshift+0x160>)
 8004caa:	4013      	ands	r3, r2
 8004cac:	1d1a      	adds	r2, r3, #4
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	659a      	str	r2, [r3, #88]	; 0x58
 8004cb2:	e00d      	b.n	8004cd0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	461a      	mov	r2, r3
 8004cba:	4b1b      	ldr	r3, [pc, #108]	; (8004d28 <DMA_CalcBaseAndBitshift+0x160>)
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	6593      	str	r3, [r2, #88]	; 0x58
 8004cc2:	e005      	b.n	8004cd0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3714      	adds	r7, #20
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr
 8004ce0:	40020010 	.word	0x40020010
 8004ce4:	40020028 	.word	0x40020028
 8004ce8:	40020040 	.word	0x40020040
 8004cec:	40020058 	.word	0x40020058
 8004cf0:	40020070 	.word	0x40020070
 8004cf4:	40020088 	.word	0x40020088
 8004cf8:	400200a0 	.word	0x400200a0
 8004cfc:	400200b8 	.word	0x400200b8
 8004d00:	40020410 	.word	0x40020410
 8004d04:	40020428 	.word	0x40020428
 8004d08:	40020440 	.word	0x40020440
 8004d0c:	40020458 	.word	0x40020458
 8004d10:	40020470 	.word	0x40020470
 8004d14:	40020488 	.word	0x40020488
 8004d18:	400204a0 	.word	0x400204a0
 8004d1c:	400204b8 	.word	0x400204b8
 8004d20:	aaaaaaab 	.word	0xaaaaaaab
 8004d24:	0800b510 	.word	0x0800b510
 8004d28:	fffffc00 	.word	0xfffffc00

08004d2c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d34:	2300      	movs	r3, #0
 8004d36:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d120      	bne.n	8004d82 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d44:	2b03      	cmp	r3, #3
 8004d46:	d858      	bhi.n	8004dfa <DMA_CheckFifoParam+0xce>
 8004d48:	a201      	add	r2, pc, #4	; (adr r2, 8004d50 <DMA_CheckFifoParam+0x24>)
 8004d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d4e:	bf00      	nop
 8004d50:	08004d61 	.word	0x08004d61
 8004d54:	08004d73 	.word	0x08004d73
 8004d58:	08004d61 	.word	0x08004d61
 8004d5c:	08004dfb 	.word	0x08004dfb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d048      	beq.n	8004dfe <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d70:	e045      	b.n	8004dfe <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d76:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d7a:	d142      	bne.n	8004e02 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d80:	e03f      	b.n	8004e02 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	699b      	ldr	r3, [r3, #24]
 8004d86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d8a:	d123      	bne.n	8004dd4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d90:	2b03      	cmp	r3, #3
 8004d92:	d838      	bhi.n	8004e06 <DMA_CheckFifoParam+0xda>
 8004d94:	a201      	add	r2, pc, #4	; (adr r2, 8004d9c <DMA_CheckFifoParam+0x70>)
 8004d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d9a:	bf00      	nop
 8004d9c:	08004dad 	.word	0x08004dad
 8004da0:	08004db3 	.word	0x08004db3
 8004da4:	08004dad 	.word	0x08004dad
 8004da8:	08004dc5 	.word	0x08004dc5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	73fb      	strb	r3, [r7, #15]
        break;
 8004db0:	e030      	b.n	8004e14 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d025      	beq.n	8004e0a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004dc2:	e022      	b.n	8004e0a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004dcc:	d11f      	bne.n	8004e0e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004dd2:	e01c      	b.n	8004e0e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d902      	bls.n	8004de2 <DMA_CheckFifoParam+0xb6>
 8004ddc:	2b03      	cmp	r3, #3
 8004dde:	d003      	beq.n	8004de8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004de0:	e018      	b.n	8004e14 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	73fb      	strb	r3, [r7, #15]
        break;
 8004de6:	e015      	b.n	8004e14 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00e      	beq.n	8004e12 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	73fb      	strb	r3, [r7, #15]
    break;
 8004df8:	e00b      	b.n	8004e12 <DMA_CheckFifoParam+0xe6>
        break;
 8004dfa:	bf00      	nop
 8004dfc:	e00a      	b.n	8004e14 <DMA_CheckFifoParam+0xe8>
        break;
 8004dfe:	bf00      	nop
 8004e00:	e008      	b.n	8004e14 <DMA_CheckFifoParam+0xe8>
        break;
 8004e02:	bf00      	nop
 8004e04:	e006      	b.n	8004e14 <DMA_CheckFifoParam+0xe8>
        break;
 8004e06:	bf00      	nop
 8004e08:	e004      	b.n	8004e14 <DMA_CheckFifoParam+0xe8>
        break;
 8004e0a:	bf00      	nop
 8004e0c:	e002      	b.n	8004e14 <DMA_CheckFifoParam+0xe8>
        break;
 8004e0e:	bf00      	nop
 8004e10:	e000      	b.n	8004e14 <DMA_CheckFifoParam+0xe8>
    break;
 8004e12:	bf00      	nop
    }
  }

  return status;
 8004e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3714      	adds	r7, #20
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop

08004e24 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a38      	ldr	r2, [pc, #224]	; (8004f18 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d022      	beq.n	8004e82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a36      	ldr	r2, [pc, #216]	; (8004f1c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d01d      	beq.n	8004e82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a35      	ldr	r2, [pc, #212]	; (8004f20 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d018      	beq.n	8004e82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a33      	ldr	r2, [pc, #204]	; (8004f24 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d013      	beq.n	8004e82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a32      	ldr	r2, [pc, #200]	; (8004f28 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d00e      	beq.n	8004e82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a30      	ldr	r2, [pc, #192]	; (8004f2c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d009      	beq.n	8004e82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a2f      	ldr	r2, [pc, #188]	; (8004f30 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d004      	beq.n	8004e82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a2d      	ldr	r2, [pc, #180]	; (8004f34 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d101      	bne.n	8004e86 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004e82:	2301      	movs	r3, #1
 8004e84:	e000      	b.n	8004e88 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004e86:	2300      	movs	r3, #0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d01a      	beq.n	8004ec2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	3b08      	subs	r3, #8
 8004e94:	4a28      	ldr	r2, [pc, #160]	; (8004f38 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004e96:	fba2 2303 	umull	r2, r3, r2, r3
 8004e9a:	091b      	lsrs	r3, r3, #4
 8004e9c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	4b26      	ldr	r3, [pc, #152]	; (8004f3c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004ea2:	4413      	add	r3, r2
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a24      	ldr	r2, [pc, #144]	; (8004f40 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004eb0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f003 031f 	and.w	r3, r3, #31
 8004eb8:	2201      	movs	r2, #1
 8004eba:	409a      	lsls	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004ec0:	e024      	b.n	8004f0c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	3b10      	subs	r3, #16
 8004eca:	4a1e      	ldr	r2, [pc, #120]	; (8004f44 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed0:	091b      	lsrs	r3, r3, #4
 8004ed2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	4a1c      	ldr	r2, [pc, #112]	; (8004f48 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d806      	bhi.n	8004eea <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	4a1b      	ldr	r2, [pc, #108]	; (8004f4c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d902      	bls.n	8004eea <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	3308      	adds	r3, #8
 8004ee8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	4b18      	ldr	r3, [pc, #96]	; (8004f50 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004eee:	4413      	add	r3, r2
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a16      	ldr	r2, [pc, #88]	; (8004f54 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004efc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f003 031f 	and.w	r3, r3, #31
 8004f04:	2201      	movs	r2, #1
 8004f06:	409a      	lsls	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004f0c:	bf00      	nop
 8004f0e:	3714      	adds	r7, #20
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr
 8004f18:	58025408 	.word	0x58025408
 8004f1c:	5802541c 	.word	0x5802541c
 8004f20:	58025430 	.word	0x58025430
 8004f24:	58025444 	.word	0x58025444
 8004f28:	58025458 	.word	0x58025458
 8004f2c:	5802546c 	.word	0x5802546c
 8004f30:	58025480 	.word	0x58025480
 8004f34:	58025494 	.word	0x58025494
 8004f38:	cccccccd 	.word	0xcccccccd
 8004f3c:	16009600 	.word	0x16009600
 8004f40:	58025880 	.word	0x58025880
 8004f44:	aaaaaaab 	.word	0xaaaaaaab
 8004f48:	400204b8 	.word	0x400204b8
 8004f4c:	4002040f 	.word	0x4002040f
 8004f50:	10008200 	.word	0x10008200
 8004f54:	40020880 	.word	0x40020880

08004f58 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d04a      	beq.n	8005004 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2b08      	cmp	r3, #8
 8004f72:	d847      	bhi.n	8005004 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a25      	ldr	r2, [pc, #148]	; (8005010 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d022      	beq.n	8004fc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a24      	ldr	r2, [pc, #144]	; (8005014 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d01d      	beq.n	8004fc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a22      	ldr	r2, [pc, #136]	; (8005018 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d018      	beq.n	8004fc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a21      	ldr	r2, [pc, #132]	; (800501c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d013      	beq.n	8004fc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a1f      	ldr	r2, [pc, #124]	; (8005020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d00e      	beq.n	8004fc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a1e      	ldr	r2, [pc, #120]	; (8005024 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d009      	beq.n	8004fc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a1c      	ldr	r2, [pc, #112]	; (8005028 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d004      	beq.n	8004fc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a1b      	ldr	r2, [pc, #108]	; (800502c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d101      	bne.n	8004fc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e000      	b.n	8004fca <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004fc8:	2300      	movs	r3, #0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00a      	beq.n	8004fe4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	4b17      	ldr	r3, [pc, #92]	; (8005030 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004fd2:	4413      	add	r3, r2
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a15      	ldr	r2, [pc, #84]	; (8005034 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004fe0:	671a      	str	r2, [r3, #112]	; 0x70
 8004fe2:	e009      	b.n	8004ff8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	4b14      	ldr	r3, [pc, #80]	; (8005038 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004fe8:	4413      	add	r3, r2
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	461a      	mov	r2, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a11      	ldr	r2, [pc, #68]	; (800503c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004ff6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	409a      	lsls	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005004:	bf00      	nop
 8005006:	3714      	adds	r7, #20
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr
 8005010:	58025408 	.word	0x58025408
 8005014:	5802541c 	.word	0x5802541c
 8005018:	58025430 	.word	0x58025430
 800501c:	58025444 	.word	0x58025444
 8005020:	58025458 	.word	0x58025458
 8005024:	5802546c 	.word	0x5802546c
 8005028:	58025480 	.word	0x58025480
 800502c:	58025494 	.word	0x58025494
 8005030:	1600963f 	.word	0x1600963f
 8005034:	58025940 	.word	0x58025940
 8005038:	1000823f 	.word	0x1000823f
 800503c:	40020940 	.word	0x40020940

08005040 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d101      	bne.n	8005052 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e0cf      	b.n	80051f2 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005058:	2b00      	cmp	r3, #0
 800505a:	d106      	bne.n	800506a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2223      	movs	r2, #35	; 0x23
 8005060:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f7fc ff19 	bl	8001e9c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800506a:	4b64      	ldr	r3, [pc, #400]	; (80051fc <HAL_ETH_Init+0x1bc>)
 800506c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005070:	4a62      	ldr	r2, [pc, #392]	; (80051fc <HAL_ETH_Init+0x1bc>)
 8005072:	f043 0302 	orr.w	r3, r3, #2
 8005076:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800507a:	4b60      	ldr	r3, [pc, #384]	; (80051fc <HAL_ETH_Init+0x1bc>)
 800507c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005080:	f003 0302 	and.w	r3, r3, #2
 8005084:	60bb      	str	r3, [r7, #8]
 8005086:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	7a1b      	ldrb	r3, [r3, #8]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d103      	bne.n	8005098 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8005090:	2000      	movs	r0, #0
 8005092:	f7fd fc73 	bl	800297c <HAL_SYSCFG_ETHInterfaceSelect>
 8005096:	e003      	b.n	80050a0 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8005098:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800509c:	f7fd fc6e 	bl	800297c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80050a0:	4b57      	ldr	r3, [pc, #348]	; (8005200 <HAL_ETH_Init+0x1c0>)
 80050a2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	6812      	ldr	r2, [r2, #0]
 80050b2:	f043 0301 	orr.w	r3, r3, #1
 80050b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80050ba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80050bc:	f7fd fc52 	bl	8002964 <HAL_GetTick>
 80050c0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80050c2:	e011      	b.n	80050e8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80050c4:	f7fd fc4e 	bl	8002964 <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80050d2:	d909      	bls.n	80050e8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2204      	movs	r2, #4
 80050d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	22e0      	movs	r2, #224	; 0xe0
 80050e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e084      	b.n	80051f2 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0301 	and.w	r3, r3, #1
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d1e4      	bne.n	80050c4 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 f886 	bl	800520c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8005100:	f001 fcd0 	bl	8006aa4 <HAL_RCC_GetHCLKFreq>
 8005104:	4603      	mov	r3, r0
 8005106:	4a3f      	ldr	r2, [pc, #252]	; (8005204 <HAL_ETH_Init+0x1c4>)
 8005108:	fba2 2303 	umull	r2, r3, r2, r3
 800510c:	0c9a      	lsrs	r2, r3, #18
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	3a01      	subs	r2, #1
 8005114:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 fa71 	bl	8005600 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005126:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800512a:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	6812      	ldr	r2, [r2, #0]
 8005132:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005136:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800513a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	f003 0303 	and.w	r3, r3, #3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d009      	beq.n	800515e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2201      	movs	r2, #1
 800514e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	22e0      	movs	r2, #224	; 0xe0
 8005156:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e049      	b.n	80051f2 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005166:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800516a:	4b27      	ldr	r3, [pc, #156]	; (8005208 <HAL_ETH_Init+0x1c8>)
 800516c:	4013      	ands	r3, r2
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	6952      	ldr	r2, [r2, #20]
 8005172:	0051      	lsls	r1, r2, #1
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	6812      	ldr	r2, [r2, #0]
 8005178:	430b      	orrs	r3, r1
 800517a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800517e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 fad9 	bl	800573a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f000 fb1f 	bl	80057cc <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	3305      	adds	r3, #5
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	021a      	lsls	r2, r3, #8
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	3304      	adds	r3, #4
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	4619      	mov	r1, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	430a      	orrs	r2, r1
 80051a8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	3303      	adds	r3, #3
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	061a      	lsls	r2, r3, #24
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	3302      	adds	r3, #2
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	041b      	lsls	r3, r3, #16
 80051c0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	3301      	adds	r3, #1
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80051cc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80051da:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80051dc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2210      	movs	r2, #16
 80051ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3710      	adds	r7, #16
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	58024400 	.word	0x58024400
 8005200:	58000400 	.word	0x58000400
 8005204:	431bde83 	.word	0x431bde83
 8005208:	ffff8001 	.word	0xffff8001

0800520c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800521c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005224:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8005226:	f001 fc3d 	bl	8006aa4 <HAL_RCC_GetHCLKFreq>
 800522a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	4a1e      	ldr	r2, [pc, #120]	; (80052a8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d908      	bls.n	8005246 <HAL_ETH_SetMDIOClockRange+0x3a>
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	4a1d      	ldr	r2, [pc, #116]	; (80052ac <HAL_ETH_SetMDIOClockRange+0xa0>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d804      	bhi.n	8005246 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005242:	60fb      	str	r3, [r7, #12]
 8005244:	e027      	b.n	8005296 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	4a18      	ldr	r2, [pc, #96]	; (80052ac <HAL_ETH_SetMDIOClockRange+0xa0>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d908      	bls.n	8005260 <HAL_ETH_SetMDIOClockRange+0x54>
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	4a17      	ldr	r2, [pc, #92]	; (80052b0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d204      	bcs.n	8005260 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800525c:	60fb      	str	r3, [r7, #12]
 800525e:	e01a      	b.n	8005296 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	4a13      	ldr	r2, [pc, #76]	; (80052b0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d303      	bcc.n	8005270 <HAL_ETH_SetMDIOClockRange+0x64>
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	4a12      	ldr	r2, [pc, #72]	; (80052b4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d911      	bls.n	8005294 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	4a10      	ldr	r2, [pc, #64]	; (80052b4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d908      	bls.n	800528a <HAL_ETH_SetMDIOClockRange+0x7e>
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	4a0f      	ldr	r2, [pc, #60]	; (80052b8 <HAL_ETH_SetMDIOClockRange+0xac>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d804      	bhi.n	800528a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005286:	60fb      	str	r3, [r7, #12]
 8005288:	e005      	b.n	8005296 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005290:	60fb      	str	r3, [r7, #12]
 8005292:	e000      	b.n	8005296 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8005294:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80052a0:	bf00      	nop
 80052a2:	3710      	adds	r7, #16
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	01312cff 	.word	0x01312cff
 80052ac:	02160ebf 	.word	0x02160ebf
 80052b0:	03938700 	.word	0x03938700
 80052b4:	05f5e0ff 	.word	0x05f5e0ff
 80052b8:	08f0d17f 	.word	0x08f0d17f

080052bc <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80052ce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	791b      	ldrb	r3, [r3, #4]
 80052d4:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80052d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	7b1b      	ldrb	r3, [r3, #12]
 80052dc:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80052de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	7b5b      	ldrb	r3, [r3, #13]
 80052e4:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80052e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	7b9b      	ldrb	r3, [r3, #14]
 80052ec:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80052ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	7bdb      	ldrb	r3, [r3, #15]
 80052f4:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80052f6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80052f8:	683a      	ldr	r2, [r7, #0]
 80052fa:	7c12      	ldrb	r2, [r2, #16]
 80052fc:	2a00      	cmp	r2, #0
 80052fe:	d102      	bne.n	8005306 <ETH_SetMACConfig+0x4a>
 8005300:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005304:	e000      	b.n	8005308 <ETH_SetMACConfig+0x4c>
 8005306:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005308:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800530a:	683a      	ldr	r2, [r7, #0]
 800530c:	7c52      	ldrb	r2, [r2, #17]
 800530e:	2a00      	cmp	r2, #0
 8005310:	d102      	bne.n	8005318 <ETH_SetMACConfig+0x5c>
 8005312:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005316:	e000      	b.n	800531a <ETH_SetMACConfig+0x5e>
 8005318:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800531a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	7c9b      	ldrb	r3, [r3, #18]
 8005320:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005322:	431a      	orrs	r2, r3
               macconf->Speed |
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8005328:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800532e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	7f1b      	ldrb	r3, [r3, #28]
 8005334:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8005336:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	7f5b      	ldrb	r3, [r3, #29]
 800533c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800533e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005340:	683a      	ldr	r2, [r7, #0]
 8005342:	7f92      	ldrb	r2, [r2, #30]
 8005344:	2a00      	cmp	r2, #0
 8005346:	d102      	bne.n	800534e <ETH_SetMACConfig+0x92>
 8005348:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800534c:	e000      	b.n	8005350 <ETH_SetMACConfig+0x94>
 800534e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005350:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	7fdb      	ldrb	r3, [r3, #31]
 8005356:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005358:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800535a:	683a      	ldr	r2, [r7, #0]
 800535c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005360:	2a00      	cmp	r2, #0
 8005362:	d102      	bne.n	800536a <ETH_SetMACConfig+0xae>
 8005364:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005368:	e000      	b.n	800536c <ETH_SetMACConfig+0xb0>
 800536a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800536c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8005372:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800537a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800537c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8005382:	4313      	orrs	r3, r2
 8005384:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	4b56      	ldr	r3, [pc, #344]	; (80054e8 <ETH_SetMACConfig+0x22c>)
 800538e:	4013      	ands	r3, r2
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	6812      	ldr	r2, [r2, #0]
 8005394:	68f9      	ldr	r1, [r7, #12]
 8005396:	430b      	orrs	r3, r1
 8005398:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800539e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80053a6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80053a8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80053b0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80053b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80053ba:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80053bc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80053be:	683a      	ldr	r2, [r7, #0]
 80053c0:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80053c4:	2a00      	cmp	r2, #0
 80053c6:	d102      	bne.n	80053ce <ETH_SetMACConfig+0x112>
 80053c8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80053cc:	e000      	b.n	80053d0 <ETH_SetMACConfig+0x114>
 80053ce:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80053d0:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80053d6:	4313      	orrs	r3, r2
 80053d8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	685a      	ldr	r2, [r3, #4]
 80053e0:	4b42      	ldr	r3, [pc, #264]	; (80054ec <ETH_SetMACConfig+0x230>)
 80053e2:	4013      	ands	r3, r2
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	6812      	ldr	r2, [r2, #0]
 80053e8:	68f9      	ldr	r1, [r7, #12]
 80053ea:	430b      	orrs	r3, r1
 80053ec:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053f4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80053fa:	4313      	orrs	r3, r2
 80053fc:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68da      	ldr	r2, [r3, #12]
 8005404:	4b3a      	ldr	r3, [pc, #232]	; (80054f0 <ETH_SetMACConfig+0x234>)
 8005406:	4013      	ands	r3, r2
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	6812      	ldr	r2, [r2, #0]
 800540c:	68f9      	ldr	r1, [r7, #12]
 800540e:	430b      	orrs	r3, r1
 8005410:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005418:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800541e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8005420:	683a      	ldr	r2, [r7, #0]
 8005422:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8005426:	2a00      	cmp	r2, #0
 8005428:	d101      	bne.n	800542e <ETH_SetMACConfig+0x172>
 800542a:	2280      	movs	r2, #128	; 0x80
 800542c:	e000      	b.n	8005430 <ETH_SetMACConfig+0x174>
 800542e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8005430:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005436:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005438:	4313      	orrs	r3, r2
 800543a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005442:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8005446:	4013      	ands	r3, r2
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	6812      	ldr	r2, [r2, #0]
 800544c:	68f9      	ldr	r1, [r7, #12]
 800544e:	430b      	orrs	r3, r1
 8005450:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005458:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8005460:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005462:	4313      	orrs	r3, r2
 8005464:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800546e:	f023 0103 	bic.w	r1, r3, #3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	430a      	orrs	r2, r1
 800547a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8005486:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	430a      	orrs	r2, r1
 8005494:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800549c:	683a      	ldr	r2, [r7, #0]
 800549e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80054a2:	2a00      	cmp	r2, #0
 80054a4:	d101      	bne.n	80054aa <ETH_SetMACConfig+0x1ee>
 80054a6:	2240      	movs	r2, #64	; 0x40
 80054a8:	e000      	b.n	80054ac <ETH_SetMACConfig+0x1f0>
 80054aa:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80054ac:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80054b4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80054b6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80054be:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80054c0:	4313      	orrs	r3, r2
 80054c2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80054cc:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	430a      	orrs	r2, r1
 80054d8:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80054dc:	bf00      	nop
 80054de:	3714      	adds	r7, #20
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr
 80054e8:	00048083 	.word	0x00048083
 80054ec:	c0f88000 	.word	0xc0f88000
 80054f0:	fffffef0 	.word	0xfffffef0

080054f4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	4b38      	ldr	r3, [pc, #224]	; (80055ec <ETH_SetDMAConfig+0xf8>)
 800550a:	4013      	ands	r3, r2
 800550c:	683a      	ldr	r2, [r7, #0]
 800550e:	6811      	ldr	r1, [r2, #0]
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	6812      	ldr	r2, [r2, #0]
 8005514:	430b      	orrs	r3, r1
 8005516:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800551a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	791b      	ldrb	r3, [r3, #4]
 8005520:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005526:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	7b1b      	ldrb	r3, [r3, #12]
 800552c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800552e:	4313      	orrs	r3, r2
 8005530:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800553a:	685a      	ldr	r2, [r3, #4]
 800553c:	4b2c      	ldr	r3, [pc, #176]	; (80055f0 <ETH_SetDMAConfig+0xfc>)
 800553e:	4013      	ands	r3, r2
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	6812      	ldr	r2, [r2, #0]
 8005544:	68f9      	ldr	r1, [r7, #12]
 8005546:	430b      	orrs	r3, r1
 8005548:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800554c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	7b5b      	ldrb	r3, [r3, #13]
 8005552:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005558:	4313      	orrs	r3, r2
 800555a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005564:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8005568:	4b22      	ldr	r3, [pc, #136]	; (80055f4 <ETH_SetDMAConfig+0x100>)
 800556a:	4013      	ands	r3, r2
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	6812      	ldr	r2, [r2, #0]
 8005570:	68f9      	ldr	r1, [r7, #12]
 8005572:	430b      	orrs	r3, r1
 8005574:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005578:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	7d1b      	ldrb	r3, [r3, #20]
 8005584:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8005586:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	7f5b      	ldrb	r3, [r3, #29]
 800558c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800558e:	4313      	orrs	r3, r2
 8005590:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800559a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800559e:	4b16      	ldr	r3, [pc, #88]	; (80055f8 <ETH_SetDMAConfig+0x104>)
 80055a0:	4013      	ands	r3, r2
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	6812      	ldr	r2, [r2, #0]
 80055a6:	68f9      	ldr	r1, [r7, #12]
 80055a8:	430b      	orrs	r3, r1
 80055aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80055ae:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	7f1b      	ldrb	r3, [r3, #28]
 80055b6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80055bc:	4313      	orrs	r3, r2
 80055be:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055c8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80055cc:	4b0b      	ldr	r3, [pc, #44]	; (80055fc <ETH_SetDMAConfig+0x108>)
 80055ce:	4013      	ands	r3, r2
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	6812      	ldr	r2, [r2, #0]
 80055d4:	68f9      	ldr	r1, [r7, #12]
 80055d6:	430b      	orrs	r3, r1
 80055d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80055dc:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80055e0:	bf00      	nop
 80055e2:	3714      	adds	r7, #20
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr
 80055ec:	ffff87fd 	.word	0xffff87fd
 80055f0:	ffff2ffe 	.word	0xffff2ffe
 80055f4:	fffec000 	.word	0xfffec000
 80055f8:	ffc0efef 	.word	0xffc0efef
 80055fc:	7fc0ffff 	.word	0x7fc0ffff

08005600 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b0a4      	sub	sp, #144	; 0x90
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005608:	2301      	movs	r3, #1
 800560a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800560e:	2300      	movs	r3, #0
 8005610:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8005612:	2300      	movs	r3, #0
 8005614:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005618:	2300      	movs	r3, #0
 800561a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800561e:	2301      	movs	r3, #1
 8005620:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005624:	2301      	movs	r3, #1
 8005626:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800562a:	2301      	movs	r3, #1
 800562c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8005630:	2300      	movs	r3, #0
 8005632:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8005636:	2301      	movs	r3, #1
 8005638:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800563c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005640:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8005642:	2300      	movs	r3, #0
 8005644:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8005648:	2300      	movs	r3, #0
 800564a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800564c:	2300      	movs	r3, #0
 800564e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8005652:	2300      	movs	r3, #0
 8005654:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8005658:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 800565c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800565e:	2300      	movs	r3, #0
 8005660:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005664:	2300      	movs	r3, #0
 8005666:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8005668:	2301      	movs	r3, #1
 800566a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800566e:	2300      	movs	r3, #0
 8005670:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005674:	2300      	movs	r3, #0
 8005676:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800567a:	2300      	movs	r3, #0
 800567c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800567e:	2300      	movs	r3, #0
 8005680:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8005682:	2300      	movs	r3, #0
 8005684:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8005686:	2300      	movs	r3, #0
 8005688:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800568c:	2300      	movs	r3, #0
 800568e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8005692:	2301      	movs	r3, #1
 8005694:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005698:	2320      	movs	r3, #32
 800569a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800569e:	2301      	movs	r3, #1
 80056a0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80056a4:	2300      	movs	r3, #0
 80056a6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80056aa:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80056ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80056b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80056b4:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80056b6:	2300      	movs	r3, #0
 80056b8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80056bc:	2302      	movs	r3, #2
 80056be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80056c2:	2300      	movs	r3, #0
 80056c4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80056c8:	2300      	movs	r3, #0
 80056ca:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80056ce:	2300      	movs	r3, #0
 80056d0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80056d4:	2301      	movs	r3, #1
 80056d6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80056da:	2300      	movs	r3, #0
 80056dc:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80056de:	2301      	movs	r3, #1
 80056e0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80056e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80056e8:	4619      	mov	r1, r3
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f7ff fde6 	bl	80052bc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80056f0:	2301      	movs	r3, #1
 80056f2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80056f4:	2301      	movs	r3, #1
 80056f6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80056f8:	2300      	movs	r3, #0
 80056fa:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80056fc:	2300      	movs	r3, #0
 80056fe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8005702:	2300      	movs	r3, #0
 8005704:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005706:	2300      	movs	r3, #0
 8005708:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800570a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800570e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005710:	2300      	movs	r3, #0
 8005712:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005714:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005718:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800571a:	2300      	movs	r3, #0
 800571c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8005720:	f44f 7306 	mov.w	r3, #536	; 0x218
 8005724:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005726:	f107 0308 	add.w	r3, r7, #8
 800572a:	4619      	mov	r1, r3
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f7ff fee1 	bl	80054f4 <ETH_SetDMAConfig>
}
 8005732:	bf00      	nop
 8005734:	3790      	adds	r7, #144	; 0x90
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}

0800573a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800573a:	b480      	push	{r7}
 800573c:	b085      	sub	sp, #20
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005742:	2300      	movs	r3, #0
 8005744:	60fb      	str	r3, [r7, #12]
 8005746:	e01d      	b.n	8005784 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	68d9      	ldr	r1, [r3, #12]
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	4613      	mov	r3, r2
 8005750:	005b      	lsls	r3, r3, #1
 8005752:	4413      	add	r3, r2
 8005754:	00db      	lsls	r3, r3, #3
 8005756:	440b      	add	r3, r1
 8005758:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	2200      	movs	r2, #0
 800575e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	2200      	movs	r2, #0
 8005764:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	2200      	movs	r2, #0
 800576a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	2200      	movs	r2, #0
 8005770:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005772:	68b9      	ldr	r1, [r7, #8]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	3206      	adds	r2, #6
 800577a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	3301      	adds	r3, #1
 8005782:	60fb      	str	r3, [r7, #12]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2b03      	cmp	r3, #3
 8005788:	d9de      	bls.n	8005748 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005798:	461a      	mov	r2, r3
 800579a:	2303      	movs	r3, #3
 800579c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	68da      	ldr	r2, [r3, #12]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057ac:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	68da      	ldr	r2, [r3, #12]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057bc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80057c0:	bf00      	nop
 80057c2:	3714      	adds	r7, #20
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b085      	sub	sp, #20
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80057d4:	2300      	movs	r3, #0
 80057d6:	60fb      	str	r3, [r7, #12]
 80057d8:	e023      	b.n	8005822 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6919      	ldr	r1, [r3, #16]
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	4613      	mov	r3, r2
 80057e2:	005b      	lsls	r3, r3, #1
 80057e4:	4413      	add	r3, r2
 80057e6:	00db      	lsls	r3, r3, #3
 80057e8:	440b      	add	r3, r1
 80057ea:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	2200      	movs	r2, #0
 80057f0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	2200      	movs	r2, #0
 80057f6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	2200      	movs	r2, #0
 80057fc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	2200      	movs	r2, #0
 8005802:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	2200      	movs	r2, #0
 8005808:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	2200      	movs	r2, #0
 800580e:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005810:	68b9      	ldr	r1, [r7, #8]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	3212      	adds	r2, #18
 8005818:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	3301      	adds	r3, #1
 8005820:	60fb      	str	r3, [r7, #12]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2b03      	cmp	r3, #3
 8005826:	d9d8      	bls.n	80057da <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800584e:	461a      	mov	r2, r3
 8005850:	2303      	movs	r3, #3
 8005852:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	691a      	ldr	r2, [r3, #16]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005862:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005876:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800587a:	bf00      	nop
 800587c:	3714      	adds	r7, #20
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr
	...

08005888 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005888:	b480      	push	{r7}
 800588a:	b089      	sub	sp, #36	; 0x24
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005892:	2300      	movs	r3, #0
 8005894:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005896:	4b86      	ldr	r3, [pc, #536]	; (8005ab0 <HAL_GPIO_Init+0x228>)
 8005898:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800589a:	e18c      	b.n	8005bb6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	2101      	movs	r1, #1
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	fa01 f303 	lsl.w	r3, r1, r3
 80058a8:	4013      	ands	r3, r2
 80058aa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	f000 817e 	beq.w	8005bb0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	f003 0303 	and.w	r3, r3, #3
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d005      	beq.n	80058cc <HAL_GPIO_Init+0x44>
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	f003 0303 	and.w	r3, r3, #3
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d130      	bne.n	800592e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	005b      	lsls	r3, r3, #1
 80058d6:	2203      	movs	r2, #3
 80058d8:	fa02 f303 	lsl.w	r3, r2, r3
 80058dc:	43db      	mvns	r3, r3
 80058de:	69ba      	ldr	r2, [r7, #24]
 80058e0:	4013      	ands	r3, r2
 80058e2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	68da      	ldr	r2, [r3, #12]
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	005b      	lsls	r3, r3, #1
 80058ec:	fa02 f303 	lsl.w	r3, r2, r3
 80058f0:	69ba      	ldr	r2, [r7, #24]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	69ba      	ldr	r2, [r7, #24]
 80058fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005902:	2201      	movs	r2, #1
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	fa02 f303 	lsl.w	r3, r2, r3
 800590a:	43db      	mvns	r3, r3
 800590c:	69ba      	ldr	r2, [r7, #24]
 800590e:	4013      	ands	r3, r2
 8005910:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	091b      	lsrs	r3, r3, #4
 8005918:	f003 0201 	and.w	r2, r3, #1
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	fa02 f303 	lsl.w	r3, r2, r3
 8005922:	69ba      	ldr	r2, [r7, #24]
 8005924:	4313      	orrs	r3, r2
 8005926:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	69ba      	ldr	r2, [r7, #24]
 800592c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f003 0303 	and.w	r3, r3, #3
 8005936:	2b03      	cmp	r3, #3
 8005938:	d017      	beq.n	800596a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	005b      	lsls	r3, r3, #1
 8005944:	2203      	movs	r2, #3
 8005946:	fa02 f303 	lsl.w	r3, r2, r3
 800594a:	43db      	mvns	r3, r3
 800594c:	69ba      	ldr	r2, [r7, #24]
 800594e:	4013      	ands	r3, r2
 8005950:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	689a      	ldr	r2, [r3, #8]
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	005b      	lsls	r3, r3, #1
 800595a:	fa02 f303 	lsl.w	r3, r2, r3
 800595e:	69ba      	ldr	r2, [r7, #24]
 8005960:	4313      	orrs	r3, r2
 8005962:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	69ba      	ldr	r2, [r7, #24]
 8005968:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	f003 0303 	and.w	r3, r3, #3
 8005972:	2b02      	cmp	r3, #2
 8005974:	d123      	bne.n	80059be <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	08da      	lsrs	r2, r3, #3
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	3208      	adds	r2, #8
 800597e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005982:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	f003 0307 	and.w	r3, r3, #7
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	220f      	movs	r2, #15
 800598e:	fa02 f303 	lsl.w	r3, r2, r3
 8005992:	43db      	mvns	r3, r3
 8005994:	69ba      	ldr	r2, [r7, #24]
 8005996:	4013      	ands	r3, r2
 8005998:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	691a      	ldr	r2, [r3, #16]
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	f003 0307 	and.w	r3, r3, #7
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	fa02 f303 	lsl.w	r3, r2, r3
 80059aa:	69ba      	ldr	r2, [r7, #24]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	08da      	lsrs	r2, r3, #3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	3208      	adds	r2, #8
 80059b8:	69b9      	ldr	r1, [r7, #24]
 80059ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	005b      	lsls	r3, r3, #1
 80059c8:	2203      	movs	r2, #3
 80059ca:	fa02 f303 	lsl.w	r3, r2, r3
 80059ce:	43db      	mvns	r3, r3
 80059d0:	69ba      	ldr	r2, [r7, #24]
 80059d2:	4013      	ands	r3, r2
 80059d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	f003 0203 	and.w	r2, r3, #3
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	005b      	lsls	r3, r3, #1
 80059e2:	fa02 f303 	lsl.w	r3, r2, r3
 80059e6:	69ba      	ldr	r2, [r7, #24]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	69ba      	ldr	r2, [r7, #24]
 80059f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	f000 80d8 	beq.w	8005bb0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a00:	4b2c      	ldr	r3, [pc, #176]	; (8005ab4 <HAL_GPIO_Init+0x22c>)
 8005a02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005a06:	4a2b      	ldr	r2, [pc, #172]	; (8005ab4 <HAL_GPIO_Init+0x22c>)
 8005a08:	f043 0302 	orr.w	r3, r3, #2
 8005a0c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005a10:	4b28      	ldr	r3, [pc, #160]	; (8005ab4 <HAL_GPIO_Init+0x22c>)
 8005a12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005a16:	f003 0302 	and.w	r3, r3, #2
 8005a1a:	60fb      	str	r3, [r7, #12]
 8005a1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005a1e:	4a26      	ldr	r2, [pc, #152]	; (8005ab8 <HAL_GPIO_Init+0x230>)
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	089b      	lsrs	r3, r3, #2
 8005a24:	3302      	adds	r3, #2
 8005a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	f003 0303 	and.w	r3, r3, #3
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	220f      	movs	r2, #15
 8005a36:	fa02 f303 	lsl.w	r3, r2, r3
 8005a3a:	43db      	mvns	r3, r3
 8005a3c:	69ba      	ldr	r2, [r7, #24]
 8005a3e:	4013      	ands	r3, r2
 8005a40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a1d      	ldr	r2, [pc, #116]	; (8005abc <HAL_GPIO_Init+0x234>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d04a      	beq.n	8005ae0 <HAL_GPIO_Init+0x258>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a1c      	ldr	r2, [pc, #112]	; (8005ac0 <HAL_GPIO_Init+0x238>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d02b      	beq.n	8005aaa <HAL_GPIO_Init+0x222>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a1b      	ldr	r2, [pc, #108]	; (8005ac4 <HAL_GPIO_Init+0x23c>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d025      	beq.n	8005aa6 <HAL_GPIO_Init+0x21e>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a1a      	ldr	r2, [pc, #104]	; (8005ac8 <HAL_GPIO_Init+0x240>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d01f      	beq.n	8005aa2 <HAL_GPIO_Init+0x21a>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a19      	ldr	r2, [pc, #100]	; (8005acc <HAL_GPIO_Init+0x244>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d019      	beq.n	8005a9e <HAL_GPIO_Init+0x216>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a18      	ldr	r2, [pc, #96]	; (8005ad0 <HAL_GPIO_Init+0x248>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d013      	beq.n	8005a9a <HAL_GPIO_Init+0x212>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a17      	ldr	r2, [pc, #92]	; (8005ad4 <HAL_GPIO_Init+0x24c>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d00d      	beq.n	8005a96 <HAL_GPIO_Init+0x20e>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a16      	ldr	r2, [pc, #88]	; (8005ad8 <HAL_GPIO_Init+0x250>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d007      	beq.n	8005a92 <HAL_GPIO_Init+0x20a>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a15      	ldr	r2, [pc, #84]	; (8005adc <HAL_GPIO_Init+0x254>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d101      	bne.n	8005a8e <HAL_GPIO_Init+0x206>
 8005a8a:	2309      	movs	r3, #9
 8005a8c:	e029      	b.n	8005ae2 <HAL_GPIO_Init+0x25a>
 8005a8e:	230a      	movs	r3, #10
 8005a90:	e027      	b.n	8005ae2 <HAL_GPIO_Init+0x25a>
 8005a92:	2307      	movs	r3, #7
 8005a94:	e025      	b.n	8005ae2 <HAL_GPIO_Init+0x25a>
 8005a96:	2306      	movs	r3, #6
 8005a98:	e023      	b.n	8005ae2 <HAL_GPIO_Init+0x25a>
 8005a9a:	2305      	movs	r3, #5
 8005a9c:	e021      	b.n	8005ae2 <HAL_GPIO_Init+0x25a>
 8005a9e:	2304      	movs	r3, #4
 8005aa0:	e01f      	b.n	8005ae2 <HAL_GPIO_Init+0x25a>
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	e01d      	b.n	8005ae2 <HAL_GPIO_Init+0x25a>
 8005aa6:	2302      	movs	r3, #2
 8005aa8:	e01b      	b.n	8005ae2 <HAL_GPIO_Init+0x25a>
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e019      	b.n	8005ae2 <HAL_GPIO_Init+0x25a>
 8005aae:	bf00      	nop
 8005ab0:	58000080 	.word	0x58000080
 8005ab4:	58024400 	.word	0x58024400
 8005ab8:	58000400 	.word	0x58000400
 8005abc:	58020000 	.word	0x58020000
 8005ac0:	58020400 	.word	0x58020400
 8005ac4:	58020800 	.word	0x58020800
 8005ac8:	58020c00 	.word	0x58020c00
 8005acc:	58021000 	.word	0x58021000
 8005ad0:	58021400 	.word	0x58021400
 8005ad4:	58021800 	.word	0x58021800
 8005ad8:	58021c00 	.word	0x58021c00
 8005adc:	58022400 	.word	0x58022400
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	69fa      	ldr	r2, [r7, #28]
 8005ae4:	f002 0203 	and.w	r2, r2, #3
 8005ae8:	0092      	lsls	r2, r2, #2
 8005aea:	4093      	lsls	r3, r2
 8005aec:	69ba      	ldr	r2, [r7, #24]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005af2:	4938      	ldr	r1, [pc, #224]	; (8005bd4 <HAL_GPIO_Init+0x34c>)
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	089b      	lsrs	r3, r3, #2
 8005af8:	3302      	adds	r3, #2
 8005afa:	69ba      	ldr	r2, [r7, #24]
 8005afc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005b00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	43db      	mvns	r3, r3
 8005b0c:	69ba      	ldr	r2, [r7, #24]
 8005b0e:	4013      	ands	r3, r2
 8005b10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d003      	beq.n	8005b26 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005b1e:	69ba      	ldr	r2, [r7, #24]
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005b26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005b2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	43db      	mvns	r3, r3
 8005b3a:	69ba      	ldr	r2, [r7, #24]
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d003      	beq.n	8005b54 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005b4c:	69ba      	ldr	r2, [r7, #24]
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005b54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	43db      	mvns	r3, r3
 8005b66:	69ba      	ldr	r2, [r7, #24]
 8005b68:	4013      	ands	r3, r2
 8005b6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d003      	beq.n	8005b80 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005b78:	69ba      	ldr	r2, [r7, #24]
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	69ba      	ldr	r2, [r7, #24]
 8005b84:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	43db      	mvns	r3, r3
 8005b90:	69ba      	ldr	r2, [r7, #24]
 8005b92:	4013      	ands	r3, r2
 8005b94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d003      	beq.n	8005baa <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8005ba2:	69ba      	ldr	r2, [r7, #24]
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	69ba      	ldr	r2, [r7, #24]
 8005bae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	f47f ae6b 	bne.w	800589c <HAL_GPIO_Init+0x14>
  }
}
 8005bc6:	bf00      	nop
 8005bc8:	bf00      	nop
 8005bca:	3724      	adds	r7, #36	; 0x24
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr
 8005bd4:	58000400 	.word	0x58000400

08005bd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	460b      	mov	r3, r1
 8005be2:	807b      	strh	r3, [r7, #2]
 8005be4:	4613      	mov	r3, r2
 8005be6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005be8:	787b      	ldrb	r3, [r7, #1]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d003      	beq.n	8005bf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005bee:	887a      	ldrh	r2, [r7, #2]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005bf4:	e003      	b.n	8005bfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005bf6:	887b      	ldrh	r3, [r7, #2]
 8005bf8:	041a      	lsls	r2, r3, #16
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	619a      	str	r2, [r3, #24]
}
 8005bfe:	bf00      	nop
 8005c00:	370c      	adds	r7, #12
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr

08005c0a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005c0a:	b480      	push	{r7}
 8005c0c:	b085      	sub	sp, #20
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
 8005c12:	460b      	mov	r3, r1
 8005c14:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	695b      	ldr	r3, [r3, #20]
 8005c1a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005c1c:	887a      	ldrh	r2, [r7, #2]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	4013      	ands	r3, r2
 8005c22:	041a      	lsls	r2, r3, #16
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	43d9      	mvns	r1, r3
 8005c28:	887b      	ldrh	r3, [r7, #2]
 8005c2a:	400b      	ands	r3, r1
 8005c2c:	431a      	orrs	r2, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	619a      	str	r2, [r3, #24]
}
 8005c32:	bf00      	nop
 8005c34:	3714      	adds	r7, #20
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr

08005c3e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b082      	sub	sp, #8
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	4603      	mov	r3, r0
 8005c46:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c4c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005c50:	88fb      	ldrh	r3, [r7, #6]
 8005c52:	4013      	ands	r3, r2
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d008      	beq.n	8005c6a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005c58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c5c:	88fb      	ldrh	r3, [r7, #6]
 8005c5e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005c62:	88fb      	ldrh	r3, [r7, #6]
 8005c64:	4618      	mov	r0, r3
 8005c66:	f7fb fd55 	bl	8001714 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005c6a:	bf00      	nop
 8005c6c:	3708      	adds	r7, #8
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
	...

08005c74 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005c7c:	4b19      	ldr	r3, [pc, #100]	; (8005ce4 <HAL_PWREx_ConfigSupply+0x70>)
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	f003 0304 	and.w	r3, r3, #4
 8005c84:	2b04      	cmp	r3, #4
 8005c86:	d00a      	beq.n	8005c9e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005c88:	4b16      	ldr	r3, [pc, #88]	; (8005ce4 <HAL_PWREx_ConfigSupply+0x70>)
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	f003 0307 	and.w	r3, r3, #7
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d001      	beq.n	8005c9a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e01f      	b.n	8005cda <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	e01d      	b.n	8005cda <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005c9e:	4b11      	ldr	r3, [pc, #68]	; (8005ce4 <HAL_PWREx_ConfigSupply+0x70>)
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	f023 0207 	bic.w	r2, r3, #7
 8005ca6:	490f      	ldr	r1, [pc, #60]	; (8005ce4 <HAL_PWREx_ConfigSupply+0x70>)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005cae:	f7fc fe59 	bl	8002964 <HAL_GetTick>
 8005cb2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005cb4:	e009      	b.n	8005cca <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005cb6:	f7fc fe55 	bl	8002964 <HAL_GetTick>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005cc4:	d901      	bls.n	8005cca <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e007      	b.n	8005cda <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005cca:	4b06      	ldr	r3, [pc, #24]	; (8005ce4 <HAL_PWREx_ConfigSupply+0x70>)
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005cd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cd6:	d1ee      	bne.n	8005cb6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3710      	adds	r7, #16
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	58024800 	.word	0x58024800

08005ce8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b08c      	sub	sp, #48	; 0x30
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d101      	bne.n	8005cfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e39d      	b.n	8006436 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0301 	and.w	r3, r3, #1
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	f000 8087 	beq.w	8005e16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d08:	4b88      	ldr	r3, [pc, #544]	; (8005f2c <HAL_RCC_OscConfig+0x244>)
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d10:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005d12:	4b86      	ldr	r3, [pc, #536]	; (8005f2c <HAL_RCC_OscConfig+0x244>)
 8005d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d16:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d1a:	2b10      	cmp	r3, #16
 8005d1c:	d007      	beq.n	8005d2e <HAL_RCC_OscConfig+0x46>
 8005d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d20:	2b18      	cmp	r3, #24
 8005d22:	d110      	bne.n	8005d46 <HAL_RCC_OscConfig+0x5e>
 8005d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d26:	f003 0303 	and.w	r3, r3, #3
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	d10b      	bne.n	8005d46 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d2e:	4b7f      	ldr	r3, [pc, #508]	; (8005f2c <HAL_RCC_OscConfig+0x244>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d06c      	beq.n	8005e14 <HAL_RCC_OscConfig+0x12c>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d168      	bne.n	8005e14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e377      	b.n	8006436 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d4e:	d106      	bne.n	8005d5e <HAL_RCC_OscConfig+0x76>
 8005d50:	4b76      	ldr	r3, [pc, #472]	; (8005f2c <HAL_RCC_OscConfig+0x244>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a75      	ldr	r2, [pc, #468]	; (8005f2c <HAL_RCC_OscConfig+0x244>)
 8005d56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d5a:	6013      	str	r3, [r2, #0]
 8005d5c:	e02e      	b.n	8005dbc <HAL_RCC_OscConfig+0xd4>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d10c      	bne.n	8005d80 <HAL_RCC_OscConfig+0x98>
 8005d66:	4b71      	ldr	r3, [pc, #452]	; (8005f2c <HAL_RCC_OscConfig+0x244>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a70      	ldr	r2, [pc, #448]	; (8005f2c <HAL_RCC_OscConfig+0x244>)
 8005d6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d70:	6013      	str	r3, [r2, #0]
 8005d72:	4b6e      	ldr	r3, [pc, #440]	; (8005f2c <HAL_RCC_OscConfig+0x244>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a6d      	ldr	r2, [pc, #436]	; (8005f2c <HAL_RCC_OscConfig+0x244>)
 8005d78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d7c:	6013      	str	r3, [r2, #0]
 8005d7e:	e01d      	b.n	8005dbc <HAL_RCC_OscConfig+0xd4>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d88:	d10c      	bne.n	8005da4 <HAL_RCC_OscConfig+0xbc>
 8005d8a:	4b68      	ldr	r3, [pc, #416]	; (8005f2c <HAL_RCC_OscConfig+0x244>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a67      	ldr	r2, [pc, #412]	; (8005f2c <HAL_RCC_OscConfig+0x244>)
 8005d90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d94:	6013      	str	r3, [r2, #0]
 8005d96:	4b65      	ldr	r3, [pc, #404]	; (8005f2c <HAL_RCC_OscConfig+0x244>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a64      	ldr	r2, [pc, #400]	; (8005f2c <HAL_RCC_OscConfig+0x244>)
 8005d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005da0:	6013      	str	r3, [r2, #0]
 8005da2:	e00b      	b.n	8005dbc <HAL_RCC_OscConfig+0xd4>
 8005da4:	4b61      	ldr	r3, [pc, #388]	; (8005f2c <HAL_RCC_OscConfig+0x244>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a60      	ldr	r2, [pc, #384]	; (8005f2c <HAL_RCC_OscConfig+0x244>)
 8005daa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dae:	6013      	str	r3, [r2, #0]
 8005db0:	4b5e      	ldr	r3, [pc, #376]	; (8005f2c <HAL_RCC_OscConfig+0x244>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a5d      	ldr	r2, [pc, #372]	; (8005f2c <HAL_RCC_OscConfig+0x244>)
 8005db6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005dba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d013      	beq.n	8005dec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dc4:	f7fc fdce 	bl	8002964 <HAL_GetTick>
 8005dc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005dca:	e008      	b.n	8005dde <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005dcc:	f7fc fdca 	bl	8002964 <HAL_GetTick>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	2b64      	cmp	r3, #100	; 0x64
 8005dd8:	d901      	bls.n	8005dde <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e32b      	b.n	8006436 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005dde:	4b53      	ldr	r3, [pc, #332]	; (8005f2c <HAL_RCC_OscConfig+0x244>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d0f0      	beq.n	8005dcc <HAL_RCC_OscConfig+0xe4>
 8005dea:	e014      	b.n	8005e16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dec:	f7fc fdba 	bl	8002964 <HAL_GetTick>
 8005df0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005df2:	e008      	b.n	8005e06 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005df4:	f7fc fdb6 	bl	8002964 <HAL_GetTick>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfc:	1ad3      	subs	r3, r2, r3
 8005dfe:	2b64      	cmp	r3, #100	; 0x64
 8005e00:	d901      	bls.n	8005e06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	e317      	b.n	8006436 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005e06:	4b49      	ldr	r3, [pc, #292]	; (8005f2c <HAL_RCC_OscConfig+0x244>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d1f0      	bne.n	8005df4 <HAL_RCC_OscConfig+0x10c>
 8005e12:	e000      	b.n	8005e16 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 0302 	and.w	r3, r3, #2
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	f000 808c 	beq.w	8005f3c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e24:	4b41      	ldr	r3, [pc, #260]	; (8005f2c <HAL_RCC_OscConfig+0x244>)
 8005e26:	691b      	ldr	r3, [r3, #16]
 8005e28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e2c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e2e:	4b3f      	ldr	r3, [pc, #252]	; (8005f2c <HAL_RCC_OscConfig+0x244>)
 8005e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e32:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005e34:	6a3b      	ldr	r3, [r7, #32]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d007      	beq.n	8005e4a <HAL_RCC_OscConfig+0x162>
 8005e3a:	6a3b      	ldr	r3, [r7, #32]
 8005e3c:	2b18      	cmp	r3, #24
 8005e3e:	d137      	bne.n	8005eb0 <HAL_RCC_OscConfig+0x1c8>
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	f003 0303 	and.w	r3, r3, #3
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d132      	bne.n	8005eb0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e4a:	4b38      	ldr	r3, [pc, #224]	; (8005f2c <HAL_RCC_OscConfig+0x244>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 0304 	and.w	r3, r3, #4
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d005      	beq.n	8005e62 <HAL_RCC_OscConfig+0x17a>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d101      	bne.n	8005e62 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e2e9      	b.n	8006436 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005e62:	4b32      	ldr	r3, [pc, #200]	; (8005f2c <HAL_RCC_OscConfig+0x244>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f023 0219 	bic.w	r2, r3, #25
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	492f      	ldr	r1, [pc, #188]	; (8005f2c <HAL_RCC_OscConfig+0x244>)
 8005e70:	4313      	orrs	r3, r2
 8005e72:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005e74:	f7fc fd76 	bl	8002964 <HAL_GetTick>
 8005e78:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e7a:	e008      	b.n	8005e8e <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e7c:	f7fc fd72 	bl	8002964 <HAL_GetTick>
 8005e80:	4602      	mov	r2, r0
 8005e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	2b02      	cmp	r3, #2
 8005e88:	d901      	bls.n	8005e8e <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	e2d3      	b.n	8006436 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e8e:	4b27      	ldr	r3, [pc, #156]	; (8005f2c <HAL_RCC_OscConfig+0x244>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 0304 	and.w	r3, r3, #4
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d0f0      	beq.n	8005e7c <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e9a:	4b24      	ldr	r3, [pc, #144]	; (8005f2c <HAL_RCC_OscConfig+0x244>)
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	061b      	lsls	r3, r3, #24
 8005ea8:	4920      	ldr	r1, [pc, #128]	; (8005f2c <HAL_RCC_OscConfig+0x244>)
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005eae:	e045      	b.n	8005f3c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d026      	beq.n	8005f06 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005eb8:	4b1c      	ldr	r3, [pc, #112]	; (8005f2c <HAL_RCC_OscConfig+0x244>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f023 0219 	bic.w	r2, r3, #25
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	4919      	ldr	r1, [pc, #100]	; (8005f2c <HAL_RCC_OscConfig+0x244>)
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eca:	f7fc fd4b 	bl	8002964 <HAL_GetTick>
 8005ece:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ed0:	e008      	b.n	8005ee4 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ed2:	f7fc fd47 	bl	8002964 <HAL_GetTick>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d901      	bls.n	8005ee4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	e2a8      	b.n	8006436 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ee4:	4b11      	ldr	r3, [pc, #68]	; (8005f2c <HAL_RCC_OscConfig+0x244>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0304 	and.w	r3, r3, #4
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d0f0      	beq.n	8005ed2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ef0:	4b0e      	ldr	r3, [pc, #56]	; (8005f2c <HAL_RCC_OscConfig+0x244>)
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	061b      	lsls	r3, r3, #24
 8005efe:	490b      	ldr	r1, [pc, #44]	; (8005f2c <HAL_RCC_OscConfig+0x244>)
 8005f00:	4313      	orrs	r3, r2
 8005f02:	604b      	str	r3, [r1, #4]
 8005f04:	e01a      	b.n	8005f3c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f06:	4b09      	ldr	r3, [pc, #36]	; (8005f2c <HAL_RCC_OscConfig+0x244>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a08      	ldr	r2, [pc, #32]	; (8005f2c <HAL_RCC_OscConfig+0x244>)
 8005f0c:	f023 0301 	bic.w	r3, r3, #1
 8005f10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f12:	f7fc fd27 	bl	8002964 <HAL_GetTick>
 8005f16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005f18:	e00a      	b.n	8005f30 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f1a:	f7fc fd23 	bl	8002964 <HAL_GetTick>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f22:	1ad3      	subs	r3, r2, r3
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d903      	bls.n	8005f30 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	e284      	b.n	8006436 <HAL_RCC_OscConfig+0x74e>
 8005f2c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005f30:	4b96      	ldr	r3, [pc, #600]	; (800618c <HAL_RCC_OscConfig+0x4a4>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0304 	and.w	r3, r3, #4
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d1ee      	bne.n	8005f1a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 0310 	and.w	r3, r3, #16
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d06a      	beq.n	800601e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f48:	4b90      	ldr	r3, [pc, #576]	; (800618c <HAL_RCC_OscConfig+0x4a4>)
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f50:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005f52:	4b8e      	ldr	r3, [pc, #568]	; (800618c <HAL_RCC_OscConfig+0x4a4>)
 8005f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f56:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	2b08      	cmp	r3, #8
 8005f5c:	d007      	beq.n	8005f6e <HAL_RCC_OscConfig+0x286>
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	2b18      	cmp	r3, #24
 8005f62:	d11b      	bne.n	8005f9c <HAL_RCC_OscConfig+0x2b4>
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	f003 0303 	and.w	r3, r3, #3
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d116      	bne.n	8005f9c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005f6e:	4b87      	ldr	r3, [pc, #540]	; (800618c <HAL_RCC_OscConfig+0x4a4>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d005      	beq.n	8005f86 <HAL_RCC_OscConfig+0x29e>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	69db      	ldr	r3, [r3, #28]
 8005f7e:	2b80      	cmp	r3, #128	; 0x80
 8005f80:	d001      	beq.n	8005f86 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e257      	b.n	8006436 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005f86:	4b81      	ldr	r3, [pc, #516]	; (800618c <HAL_RCC_OscConfig+0x4a4>)
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a1b      	ldr	r3, [r3, #32]
 8005f92:	061b      	lsls	r3, r3, #24
 8005f94:	497d      	ldr	r1, [pc, #500]	; (800618c <HAL_RCC_OscConfig+0x4a4>)
 8005f96:	4313      	orrs	r3, r2
 8005f98:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005f9a:	e040      	b.n	800601e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	69db      	ldr	r3, [r3, #28]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d023      	beq.n	8005fec <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005fa4:	4b79      	ldr	r3, [pc, #484]	; (800618c <HAL_RCC_OscConfig+0x4a4>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a78      	ldr	r2, [pc, #480]	; (800618c <HAL_RCC_OscConfig+0x4a4>)
 8005faa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fb0:	f7fc fcd8 	bl	8002964 <HAL_GetTick>
 8005fb4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005fb6:	e008      	b.n	8005fca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005fb8:	f7fc fcd4 	bl	8002964 <HAL_GetTick>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	d901      	bls.n	8005fca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	e235      	b.n	8006436 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005fca:	4b70      	ldr	r3, [pc, #448]	; (800618c <HAL_RCC_OscConfig+0x4a4>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d0f0      	beq.n	8005fb8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005fd6:	4b6d      	ldr	r3, [pc, #436]	; (800618c <HAL_RCC_OscConfig+0x4a4>)
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6a1b      	ldr	r3, [r3, #32]
 8005fe2:	061b      	lsls	r3, r3, #24
 8005fe4:	4969      	ldr	r1, [pc, #420]	; (800618c <HAL_RCC_OscConfig+0x4a4>)
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	60cb      	str	r3, [r1, #12]
 8005fea:	e018      	b.n	800601e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005fec:	4b67      	ldr	r3, [pc, #412]	; (800618c <HAL_RCC_OscConfig+0x4a4>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a66      	ldr	r2, [pc, #408]	; (800618c <HAL_RCC_OscConfig+0x4a4>)
 8005ff2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ff6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ff8:	f7fc fcb4 	bl	8002964 <HAL_GetTick>
 8005ffc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005ffe:	e008      	b.n	8006012 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006000:	f7fc fcb0 	bl	8002964 <HAL_GetTick>
 8006004:	4602      	mov	r2, r0
 8006006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	2b02      	cmp	r3, #2
 800600c:	d901      	bls.n	8006012 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	e211      	b.n	8006436 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006012:	4b5e      	ldr	r3, [pc, #376]	; (800618c <HAL_RCC_OscConfig+0x4a4>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1f0      	bne.n	8006000 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f003 0308 	and.w	r3, r3, #8
 8006026:	2b00      	cmp	r3, #0
 8006028:	d036      	beq.n	8006098 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	695b      	ldr	r3, [r3, #20]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d019      	beq.n	8006066 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006032:	4b56      	ldr	r3, [pc, #344]	; (800618c <HAL_RCC_OscConfig+0x4a4>)
 8006034:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006036:	4a55      	ldr	r2, [pc, #340]	; (800618c <HAL_RCC_OscConfig+0x4a4>)
 8006038:	f043 0301 	orr.w	r3, r3, #1
 800603c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800603e:	f7fc fc91 	bl	8002964 <HAL_GetTick>
 8006042:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006044:	e008      	b.n	8006058 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006046:	f7fc fc8d 	bl	8002964 <HAL_GetTick>
 800604a:	4602      	mov	r2, r0
 800604c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604e:	1ad3      	subs	r3, r2, r3
 8006050:	2b02      	cmp	r3, #2
 8006052:	d901      	bls.n	8006058 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8006054:	2303      	movs	r3, #3
 8006056:	e1ee      	b.n	8006436 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006058:	4b4c      	ldr	r3, [pc, #304]	; (800618c <HAL_RCC_OscConfig+0x4a4>)
 800605a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800605c:	f003 0302 	and.w	r3, r3, #2
 8006060:	2b00      	cmp	r3, #0
 8006062:	d0f0      	beq.n	8006046 <HAL_RCC_OscConfig+0x35e>
 8006064:	e018      	b.n	8006098 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006066:	4b49      	ldr	r3, [pc, #292]	; (800618c <HAL_RCC_OscConfig+0x4a4>)
 8006068:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800606a:	4a48      	ldr	r2, [pc, #288]	; (800618c <HAL_RCC_OscConfig+0x4a4>)
 800606c:	f023 0301 	bic.w	r3, r3, #1
 8006070:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006072:	f7fc fc77 	bl	8002964 <HAL_GetTick>
 8006076:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006078:	e008      	b.n	800608c <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800607a:	f7fc fc73 	bl	8002964 <HAL_GetTick>
 800607e:	4602      	mov	r2, r0
 8006080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006082:	1ad3      	subs	r3, r2, r3
 8006084:	2b02      	cmp	r3, #2
 8006086:	d901      	bls.n	800608c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8006088:	2303      	movs	r3, #3
 800608a:	e1d4      	b.n	8006436 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800608c:	4b3f      	ldr	r3, [pc, #252]	; (800618c <HAL_RCC_OscConfig+0x4a4>)
 800608e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006090:	f003 0302 	and.w	r3, r3, #2
 8006094:	2b00      	cmp	r3, #0
 8006096:	d1f0      	bne.n	800607a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f003 0320 	and.w	r3, r3, #32
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d036      	beq.n	8006112 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	699b      	ldr	r3, [r3, #24]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d019      	beq.n	80060e0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80060ac:	4b37      	ldr	r3, [pc, #220]	; (800618c <HAL_RCC_OscConfig+0x4a4>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a36      	ldr	r2, [pc, #216]	; (800618c <HAL_RCC_OscConfig+0x4a4>)
 80060b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80060b6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80060b8:	f7fc fc54 	bl	8002964 <HAL_GetTick>
 80060bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80060be:	e008      	b.n	80060d2 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80060c0:	f7fc fc50 	bl	8002964 <HAL_GetTick>
 80060c4:	4602      	mov	r2, r0
 80060c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	d901      	bls.n	80060d2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80060ce:	2303      	movs	r3, #3
 80060d0:	e1b1      	b.n	8006436 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80060d2:	4b2e      	ldr	r3, [pc, #184]	; (800618c <HAL_RCC_OscConfig+0x4a4>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d0f0      	beq.n	80060c0 <HAL_RCC_OscConfig+0x3d8>
 80060de:	e018      	b.n	8006112 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80060e0:	4b2a      	ldr	r3, [pc, #168]	; (800618c <HAL_RCC_OscConfig+0x4a4>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a29      	ldr	r2, [pc, #164]	; (800618c <HAL_RCC_OscConfig+0x4a4>)
 80060e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060ea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80060ec:	f7fc fc3a 	bl	8002964 <HAL_GetTick>
 80060f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80060f2:	e008      	b.n	8006106 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80060f4:	f7fc fc36 	bl	8002964 <HAL_GetTick>
 80060f8:	4602      	mov	r2, r0
 80060fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fc:	1ad3      	subs	r3, r2, r3
 80060fe:	2b02      	cmp	r3, #2
 8006100:	d901      	bls.n	8006106 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8006102:	2303      	movs	r3, #3
 8006104:	e197      	b.n	8006436 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006106:	4b21      	ldr	r3, [pc, #132]	; (800618c <HAL_RCC_OscConfig+0x4a4>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800610e:	2b00      	cmp	r3, #0
 8006110:	d1f0      	bne.n	80060f4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 0304 	and.w	r3, r3, #4
 800611a:	2b00      	cmp	r3, #0
 800611c:	f000 8086 	beq.w	800622c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006120:	4b1b      	ldr	r3, [pc, #108]	; (8006190 <HAL_RCC_OscConfig+0x4a8>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a1a      	ldr	r2, [pc, #104]	; (8006190 <HAL_RCC_OscConfig+0x4a8>)
 8006126:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800612a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800612c:	f7fc fc1a 	bl	8002964 <HAL_GetTick>
 8006130:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006132:	e008      	b.n	8006146 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006134:	f7fc fc16 	bl	8002964 <HAL_GetTick>
 8006138:	4602      	mov	r2, r0
 800613a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	2b64      	cmp	r3, #100	; 0x64
 8006140:	d901      	bls.n	8006146 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8006142:	2303      	movs	r3, #3
 8006144:	e177      	b.n	8006436 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006146:	4b12      	ldr	r3, [pc, #72]	; (8006190 <HAL_RCC_OscConfig+0x4a8>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800614e:	2b00      	cmp	r3, #0
 8006150:	d0f0      	beq.n	8006134 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	2b01      	cmp	r3, #1
 8006158:	d106      	bne.n	8006168 <HAL_RCC_OscConfig+0x480>
 800615a:	4b0c      	ldr	r3, [pc, #48]	; (800618c <HAL_RCC_OscConfig+0x4a4>)
 800615c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800615e:	4a0b      	ldr	r2, [pc, #44]	; (800618c <HAL_RCC_OscConfig+0x4a4>)
 8006160:	f043 0301 	orr.w	r3, r3, #1
 8006164:	6713      	str	r3, [r2, #112]	; 0x70
 8006166:	e032      	b.n	80061ce <HAL_RCC_OscConfig+0x4e6>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d111      	bne.n	8006194 <HAL_RCC_OscConfig+0x4ac>
 8006170:	4b06      	ldr	r3, [pc, #24]	; (800618c <HAL_RCC_OscConfig+0x4a4>)
 8006172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006174:	4a05      	ldr	r2, [pc, #20]	; (800618c <HAL_RCC_OscConfig+0x4a4>)
 8006176:	f023 0301 	bic.w	r3, r3, #1
 800617a:	6713      	str	r3, [r2, #112]	; 0x70
 800617c:	4b03      	ldr	r3, [pc, #12]	; (800618c <HAL_RCC_OscConfig+0x4a4>)
 800617e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006180:	4a02      	ldr	r2, [pc, #8]	; (800618c <HAL_RCC_OscConfig+0x4a4>)
 8006182:	f023 0304 	bic.w	r3, r3, #4
 8006186:	6713      	str	r3, [r2, #112]	; 0x70
 8006188:	e021      	b.n	80061ce <HAL_RCC_OscConfig+0x4e6>
 800618a:	bf00      	nop
 800618c:	58024400 	.word	0x58024400
 8006190:	58024800 	.word	0x58024800
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	2b05      	cmp	r3, #5
 800619a:	d10c      	bne.n	80061b6 <HAL_RCC_OscConfig+0x4ce>
 800619c:	4b83      	ldr	r3, [pc, #524]	; (80063ac <HAL_RCC_OscConfig+0x6c4>)
 800619e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061a0:	4a82      	ldr	r2, [pc, #520]	; (80063ac <HAL_RCC_OscConfig+0x6c4>)
 80061a2:	f043 0304 	orr.w	r3, r3, #4
 80061a6:	6713      	str	r3, [r2, #112]	; 0x70
 80061a8:	4b80      	ldr	r3, [pc, #512]	; (80063ac <HAL_RCC_OscConfig+0x6c4>)
 80061aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ac:	4a7f      	ldr	r2, [pc, #508]	; (80063ac <HAL_RCC_OscConfig+0x6c4>)
 80061ae:	f043 0301 	orr.w	r3, r3, #1
 80061b2:	6713      	str	r3, [r2, #112]	; 0x70
 80061b4:	e00b      	b.n	80061ce <HAL_RCC_OscConfig+0x4e6>
 80061b6:	4b7d      	ldr	r3, [pc, #500]	; (80063ac <HAL_RCC_OscConfig+0x6c4>)
 80061b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ba:	4a7c      	ldr	r2, [pc, #496]	; (80063ac <HAL_RCC_OscConfig+0x6c4>)
 80061bc:	f023 0301 	bic.w	r3, r3, #1
 80061c0:	6713      	str	r3, [r2, #112]	; 0x70
 80061c2:	4b7a      	ldr	r3, [pc, #488]	; (80063ac <HAL_RCC_OscConfig+0x6c4>)
 80061c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061c6:	4a79      	ldr	r2, [pc, #484]	; (80063ac <HAL_RCC_OscConfig+0x6c4>)
 80061c8:	f023 0304 	bic.w	r3, r3, #4
 80061cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d015      	beq.n	8006202 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061d6:	f7fc fbc5 	bl	8002964 <HAL_GetTick>
 80061da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80061dc:	e00a      	b.n	80061f4 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061de:	f7fc fbc1 	bl	8002964 <HAL_GetTick>
 80061e2:	4602      	mov	r2, r0
 80061e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e6:	1ad3      	subs	r3, r2, r3
 80061e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d901      	bls.n	80061f4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80061f0:	2303      	movs	r3, #3
 80061f2:	e120      	b.n	8006436 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80061f4:	4b6d      	ldr	r3, [pc, #436]	; (80063ac <HAL_RCC_OscConfig+0x6c4>)
 80061f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061f8:	f003 0302 	and.w	r3, r3, #2
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d0ee      	beq.n	80061de <HAL_RCC_OscConfig+0x4f6>
 8006200:	e014      	b.n	800622c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006202:	f7fc fbaf 	bl	8002964 <HAL_GetTick>
 8006206:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006208:	e00a      	b.n	8006220 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800620a:	f7fc fbab 	bl	8002964 <HAL_GetTick>
 800620e:	4602      	mov	r2, r0
 8006210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006212:	1ad3      	subs	r3, r2, r3
 8006214:	f241 3288 	movw	r2, #5000	; 0x1388
 8006218:	4293      	cmp	r3, r2
 800621a:	d901      	bls.n	8006220 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800621c:	2303      	movs	r3, #3
 800621e:	e10a      	b.n	8006436 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006220:	4b62      	ldr	r3, [pc, #392]	; (80063ac <HAL_RCC_OscConfig+0x6c4>)
 8006222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006224:	f003 0302 	and.w	r3, r3, #2
 8006228:	2b00      	cmp	r3, #0
 800622a:	d1ee      	bne.n	800620a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006230:	2b00      	cmp	r3, #0
 8006232:	f000 80ff 	beq.w	8006434 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006236:	4b5d      	ldr	r3, [pc, #372]	; (80063ac <HAL_RCC_OscConfig+0x6c4>)
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800623e:	2b18      	cmp	r3, #24
 8006240:	f000 80ba 	beq.w	80063b8 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006248:	2b02      	cmp	r3, #2
 800624a:	f040 8095 	bne.w	8006378 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800624e:	4b57      	ldr	r3, [pc, #348]	; (80063ac <HAL_RCC_OscConfig+0x6c4>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a56      	ldr	r2, [pc, #344]	; (80063ac <HAL_RCC_OscConfig+0x6c4>)
 8006254:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006258:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800625a:	f7fc fb83 	bl	8002964 <HAL_GetTick>
 800625e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006260:	e008      	b.n	8006274 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006262:	f7fc fb7f 	bl	8002964 <HAL_GetTick>
 8006266:	4602      	mov	r2, r0
 8006268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626a:	1ad3      	subs	r3, r2, r3
 800626c:	2b02      	cmp	r3, #2
 800626e:	d901      	bls.n	8006274 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8006270:	2303      	movs	r3, #3
 8006272:	e0e0      	b.n	8006436 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006274:	4b4d      	ldr	r3, [pc, #308]	; (80063ac <HAL_RCC_OscConfig+0x6c4>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800627c:	2b00      	cmp	r3, #0
 800627e:	d1f0      	bne.n	8006262 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006280:	4b4a      	ldr	r3, [pc, #296]	; (80063ac <HAL_RCC_OscConfig+0x6c4>)
 8006282:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006284:	4b4a      	ldr	r3, [pc, #296]	; (80063b0 <HAL_RCC_OscConfig+0x6c8>)
 8006286:	4013      	ands	r3, r2
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006290:	0112      	lsls	r2, r2, #4
 8006292:	430a      	orrs	r2, r1
 8006294:	4945      	ldr	r1, [pc, #276]	; (80063ac <HAL_RCC_OscConfig+0x6c4>)
 8006296:	4313      	orrs	r3, r2
 8006298:	628b      	str	r3, [r1, #40]	; 0x28
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800629e:	3b01      	subs	r3, #1
 80062a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062a8:	3b01      	subs	r3, #1
 80062aa:	025b      	lsls	r3, r3, #9
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	431a      	orrs	r2, r3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b4:	3b01      	subs	r3, #1
 80062b6:	041b      	lsls	r3, r3, #16
 80062b8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80062bc:	431a      	orrs	r2, r3
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062c2:	3b01      	subs	r3, #1
 80062c4:	061b      	lsls	r3, r3, #24
 80062c6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80062ca:	4938      	ldr	r1, [pc, #224]	; (80063ac <HAL_RCC_OscConfig+0x6c4>)
 80062cc:	4313      	orrs	r3, r2
 80062ce:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80062d0:	4b36      	ldr	r3, [pc, #216]	; (80063ac <HAL_RCC_OscConfig+0x6c4>)
 80062d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d4:	4a35      	ldr	r2, [pc, #212]	; (80063ac <HAL_RCC_OscConfig+0x6c4>)
 80062d6:	f023 0301 	bic.w	r3, r3, #1
 80062da:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80062dc:	4b33      	ldr	r3, [pc, #204]	; (80063ac <HAL_RCC_OscConfig+0x6c4>)
 80062de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062e0:	4b34      	ldr	r3, [pc, #208]	; (80063b4 <HAL_RCC_OscConfig+0x6cc>)
 80062e2:	4013      	ands	r3, r2
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80062e8:	00d2      	lsls	r2, r2, #3
 80062ea:	4930      	ldr	r1, [pc, #192]	; (80063ac <HAL_RCC_OscConfig+0x6c4>)
 80062ec:	4313      	orrs	r3, r2
 80062ee:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80062f0:	4b2e      	ldr	r3, [pc, #184]	; (80063ac <HAL_RCC_OscConfig+0x6c4>)
 80062f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f4:	f023 020c 	bic.w	r2, r3, #12
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fc:	492b      	ldr	r1, [pc, #172]	; (80063ac <HAL_RCC_OscConfig+0x6c4>)
 80062fe:	4313      	orrs	r3, r2
 8006300:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006302:	4b2a      	ldr	r3, [pc, #168]	; (80063ac <HAL_RCC_OscConfig+0x6c4>)
 8006304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006306:	f023 0202 	bic.w	r2, r3, #2
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800630e:	4927      	ldr	r1, [pc, #156]	; (80063ac <HAL_RCC_OscConfig+0x6c4>)
 8006310:	4313      	orrs	r3, r2
 8006312:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006314:	4b25      	ldr	r3, [pc, #148]	; (80063ac <HAL_RCC_OscConfig+0x6c4>)
 8006316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006318:	4a24      	ldr	r2, [pc, #144]	; (80063ac <HAL_RCC_OscConfig+0x6c4>)
 800631a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800631e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006320:	4b22      	ldr	r3, [pc, #136]	; (80063ac <HAL_RCC_OscConfig+0x6c4>)
 8006322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006324:	4a21      	ldr	r2, [pc, #132]	; (80063ac <HAL_RCC_OscConfig+0x6c4>)
 8006326:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800632a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800632c:	4b1f      	ldr	r3, [pc, #124]	; (80063ac <HAL_RCC_OscConfig+0x6c4>)
 800632e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006330:	4a1e      	ldr	r2, [pc, #120]	; (80063ac <HAL_RCC_OscConfig+0x6c4>)
 8006332:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006336:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006338:	4b1c      	ldr	r3, [pc, #112]	; (80063ac <HAL_RCC_OscConfig+0x6c4>)
 800633a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800633c:	4a1b      	ldr	r2, [pc, #108]	; (80063ac <HAL_RCC_OscConfig+0x6c4>)
 800633e:	f043 0301 	orr.w	r3, r3, #1
 8006342:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006344:	4b19      	ldr	r3, [pc, #100]	; (80063ac <HAL_RCC_OscConfig+0x6c4>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a18      	ldr	r2, [pc, #96]	; (80063ac <HAL_RCC_OscConfig+0x6c4>)
 800634a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800634e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006350:	f7fc fb08 	bl	8002964 <HAL_GetTick>
 8006354:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006356:	e008      	b.n	800636a <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006358:	f7fc fb04 	bl	8002964 <HAL_GetTick>
 800635c:	4602      	mov	r2, r0
 800635e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	2b02      	cmp	r3, #2
 8006364:	d901      	bls.n	800636a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8006366:	2303      	movs	r3, #3
 8006368:	e065      	b.n	8006436 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800636a:	4b10      	ldr	r3, [pc, #64]	; (80063ac <HAL_RCC_OscConfig+0x6c4>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006372:	2b00      	cmp	r3, #0
 8006374:	d0f0      	beq.n	8006358 <HAL_RCC_OscConfig+0x670>
 8006376:	e05d      	b.n	8006434 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006378:	4b0c      	ldr	r3, [pc, #48]	; (80063ac <HAL_RCC_OscConfig+0x6c4>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a0b      	ldr	r2, [pc, #44]	; (80063ac <HAL_RCC_OscConfig+0x6c4>)
 800637e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006382:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006384:	f7fc faee 	bl	8002964 <HAL_GetTick>
 8006388:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800638a:	e008      	b.n	800639e <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800638c:	f7fc faea 	bl	8002964 <HAL_GetTick>
 8006390:	4602      	mov	r2, r0
 8006392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	2b02      	cmp	r3, #2
 8006398:	d901      	bls.n	800639e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800639a:	2303      	movs	r3, #3
 800639c:	e04b      	b.n	8006436 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800639e:	4b03      	ldr	r3, [pc, #12]	; (80063ac <HAL_RCC_OscConfig+0x6c4>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d1f0      	bne.n	800638c <HAL_RCC_OscConfig+0x6a4>
 80063aa:	e043      	b.n	8006434 <HAL_RCC_OscConfig+0x74c>
 80063ac:	58024400 	.word	0x58024400
 80063b0:	fffffc0c 	.word	0xfffffc0c
 80063b4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80063b8:	4b21      	ldr	r3, [pc, #132]	; (8006440 <HAL_RCC_OscConfig+0x758>)
 80063ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063bc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80063be:	4b20      	ldr	r3, [pc, #128]	; (8006440 <HAL_RCC_OscConfig+0x758>)
 80063c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d031      	beq.n	8006430 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	f003 0203 	and.w	r2, r3, #3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d12a      	bne.n	8006430 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	091b      	lsrs	r3, r3, #4
 80063de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d122      	bne.n	8006430 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d11a      	bne.n	8006430 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	0a5b      	lsrs	r3, r3, #9
 80063fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006406:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006408:	429a      	cmp	r2, r3
 800640a:	d111      	bne.n	8006430 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	0c1b      	lsrs	r3, r3, #16
 8006410:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006418:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800641a:	429a      	cmp	r2, r3
 800641c:	d108      	bne.n	8006430 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	0e1b      	lsrs	r3, r3, #24
 8006422:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800642a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800642c:	429a      	cmp	r2, r3
 800642e:	d001      	beq.n	8006434 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	e000      	b.n	8006436 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	3730      	adds	r7, #48	; 0x30
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	58024400 	.word	0x58024400

08006444 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b086      	sub	sp, #24
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d101      	bne.n	8006458 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	e19c      	b.n	8006792 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006458:	4b8a      	ldr	r3, [pc, #552]	; (8006684 <HAL_RCC_ClockConfig+0x240>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f003 030f 	and.w	r3, r3, #15
 8006460:	683a      	ldr	r2, [r7, #0]
 8006462:	429a      	cmp	r2, r3
 8006464:	d910      	bls.n	8006488 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006466:	4b87      	ldr	r3, [pc, #540]	; (8006684 <HAL_RCC_ClockConfig+0x240>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f023 020f 	bic.w	r2, r3, #15
 800646e:	4985      	ldr	r1, [pc, #532]	; (8006684 <HAL_RCC_ClockConfig+0x240>)
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	4313      	orrs	r3, r2
 8006474:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006476:	4b83      	ldr	r3, [pc, #524]	; (8006684 <HAL_RCC_ClockConfig+0x240>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f003 030f 	and.w	r3, r3, #15
 800647e:	683a      	ldr	r2, [r7, #0]
 8006480:	429a      	cmp	r2, r3
 8006482:	d001      	beq.n	8006488 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	e184      	b.n	8006792 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f003 0304 	and.w	r3, r3, #4
 8006490:	2b00      	cmp	r3, #0
 8006492:	d010      	beq.n	80064b6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	691a      	ldr	r2, [r3, #16]
 8006498:	4b7b      	ldr	r3, [pc, #492]	; (8006688 <HAL_RCC_ClockConfig+0x244>)
 800649a:	699b      	ldr	r3, [r3, #24]
 800649c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d908      	bls.n	80064b6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80064a4:	4b78      	ldr	r3, [pc, #480]	; (8006688 <HAL_RCC_ClockConfig+0x244>)
 80064a6:	699b      	ldr	r3, [r3, #24]
 80064a8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	4975      	ldr	r1, [pc, #468]	; (8006688 <HAL_RCC_ClockConfig+0x244>)
 80064b2:	4313      	orrs	r3, r2
 80064b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 0308 	and.w	r3, r3, #8
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d010      	beq.n	80064e4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	695a      	ldr	r2, [r3, #20]
 80064c6:	4b70      	ldr	r3, [pc, #448]	; (8006688 <HAL_RCC_ClockConfig+0x244>)
 80064c8:	69db      	ldr	r3, [r3, #28]
 80064ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d908      	bls.n	80064e4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80064d2:	4b6d      	ldr	r3, [pc, #436]	; (8006688 <HAL_RCC_ClockConfig+0x244>)
 80064d4:	69db      	ldr	r3, [r3, #28]
 80064d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	695b      	ldr	r3, [r3, #20]
 80064de:	496a      	ldr	r1, [pc, #424]	; (8006688 <HAL_RCC_ClockConfig+0x244>)
 80064e0:	4313      	orrs	r3, r2
 80064e2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 0310 	and.w	r3, r3, #16
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d010      	beq.n	8006512 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	699a      	ldr	r2, [r3, #24]
 80064f4:	4b64      	ldr	r3, [pc, #400]	; (8006688 <HAL_RCC_ClockConfig+0x244>)
 80064f6:	69db      	ldr	r3, [r3, #28]
 80064f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d908      	bls.n	8006512 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006500:	4b61      	ldr	r3, [pc, #388]	; (8006688 <HAL_RCC_ClockConfig+0x244>)
 8006502:	69db      	ldr	r3, [r3, #28]
 8006504:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	699b      	ldr	r3, [r3, #24]
 800650c:	495e      	ldr	r1, [pc, #376]	; (8006688 <HAL_RCC_ClockConfig+0x244>)
 800650e:	4313      	orrs	r3, r2
 8006510:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 0320 	and.w	r3, r3, #32
 800651a:	2b00      	cmp	r3, #0
 800651c:	d010      	beq.n	8006540 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	69da      	ldr	r2, [r3, #28]
 8006522:	4b59      	ldr	r3, [pc, #356]	; (8006688 <HAL_RCC_ClockConfig+0x244>)
 8006524:	6a1b      	ldr	r3, [r3, #32]
 8006526:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800652a:	429a      	cmp	r2, r3
 800652c:	d908      	bls.n	8006540 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800652e:	4b56      	ldr	r3, [pc, #344]	; (8006688 <HAL_RCC_ClockConfig+0x244>)
 8006530:	6a1b      	ldr	r3, [r3, #32]
 8006532:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	69db      	ldr	r3, [r3, #28]
 800653a:	4953      	ldr	r1, [pc, #332]	; (8006688 <HAL_RCC_ClockConfig+0x244>)
 800653c:	4313      	orrs	r3, r2
 800653e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 0302 	and.w	r3, r3, #2
 8006548:	2b00      	cmp	r3, #0
 800654a:	d010      	beq.n	800656e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	68da      	ldr	r2, [r3, #12]
 8006550:	4b4d      	ldr	r3, [pc, #308]	; (8006688 <HAL_RCC_ClockConfig+0x244>)
 8006552:	699b      	ldr	r3, [r3, #24]
 8006554:	f003 030f 	and.w	r3, r3, #15
 8006558:	429a      	cmp	r2, r3
 800655a:	d908      	bls.n	800656e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800655c:	4b4a      	ldr	r3, [pc, #296]	; (8006688 <HAL_RCC_ClockConfig+0x244>)
 800655e:	699b      	ldr	r3, [r3, #24]
 8006560:	f023 020f 	bic.w	r2, r3, #15
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	4947      	ldr	r1, [pc, #284]	; (8006688 <HAL_RCC_ClockConfig+0x244>)
 800656a:	4313      	orrs	r3, r2
 800656c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 0301 	and.w	r3, r3, #1
 8006576:	2b00      	cmp	r3, #0
 8006578:	d055      	beq.n	8006626 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800657a:	4b43      	ldr	r3, [pc, #268]	; (8006688 <HAL_RCC_ClockConfig+0x244>)
 800657c:	699b      	ldr	r3, [r3, #24]
 800657e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	4940      	ldr	r1, [pc, #256]	; (8006688 <HAL_RCC_ClockConfig+0x244>)
 8006588:	4313      	orrs	r3, r2
 800658a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	2b02      	cmp	r3, #2
 8006592:	d107      	bne.n	80065a4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006594:	4b3c      	ldr	r3, [pc, #240]	; (8006688 <HAL_RCC_ClockConfig+0x244>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800659c:	2b00      	cmp	r3, #0
 800659e:	d121      	bne.n	80065e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	e0f6      	b.n	8006792 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	2b03      	cmp	r3, #3
 80065aa:	d107      	bne.n	80065bc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80065ac:	4b36      	ldr	r3, [pc, #216]	; (8006688 <HAL_RCC_ClockConfig+0x244>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d115      	bne.n	80065e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	e0ea      	b.n	8006792 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d107      	bne.n	80065d4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80065c4:	4b30      	ldr	r3, [pc, #192]	; (8006688 <HAL_RCC_ClockConfig+0x244>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d109      	bne.n	80065e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e0de      	b.n	8006792 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065d4:	4b2c      	ldr	r3, [pc, #176]	; (8006688 <HAL_RCC_ClockConfig+0x244>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 0304 	and.w	r3, r3, #4
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d101      	bne.n	80065e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	e0d6      	b.n	8006792 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80065e4:	4b28      	ldr	r3, [pc, #160]	; (8006688 <HAL_RCC_ClockConfig+0x244>)
 80065e6:	691b      	ldr	r3, [r3, #16]
 80065e8:	f023 0207 	bic.w	r2, r3, #7
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	4925      	ldr	r1, [pc, #148]	; (8006688 <HAL_RCC_ClockConfig+0x244>)
 80065f2:	4313      	orrs	r3, r2
 80065f4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065f6:	f7fc f9b5 	bl	8002964 <HAL_GetTick>
 80065fa:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065fc:	e00a      	b.n	8006614 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065fe:	f7fc f9b1 	bl	8002964 <HAL_GetTick>
 8006602:	4602      	mov	r2, r0
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	1ad3      	subs	r3, r2, r3
 8006608:	f241 3288 	movw	r2, #5000	; 0x1388
 800660c:	4293      	cmp	r3, r2
 800660e:	d901      	bls.n	8006614 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006610:	2303      	movs	r3, #3
 8006612:	e0be      	b.n	8006792 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006614:	4b1c      	ldr	r3, [pc, #112]	; (8006688 <HAL_RCC_ClockConfig+0x244>)
 8006616:	691b      	ldr	r3, [r3, #16]
 8006618:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	00db      	lsls	r3, r3, #3
 8006622:	429a      	cmp	r2, r3
 8006624:	d1eb      	bne.n	80065fe <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 0302 	and.w	r3, r3, #2
 800662e:	2b00      	cmp	r3, #0
 8006630:	d010      	beq.n	8006654 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	68da      	ldr	r2, [r3, #12]
 8006636:	4b14      	ldr	r3, [pc, #80]	; (8006688 <HAL_RCC_ClockConfig+0x244>)
 8006638:	699b      	ldr	r3, [r3, #24]
 800663a:	f003 030f 	and.w	r3, r3, #15
 800663e:	429a      	cmp	r2, r3
 8006640:	d208      	bcs.n	8006654 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006642:	4b11      	ldr	r3, [pc, #68]	; (8006688 <HAL_RCC_ClockConfig+0x244>)
 8006644:	699b      	ldr	r3, [r3, #24]
 8006646:	f023 020f 	bic.w	r2, r3, #15
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	490e      	ldr	r1, [pc, #56]	; (8006688 <HAL_RCC_ClockConfig+0x244>)
 8006650:	4313      	orrs	r3, r2
 8006652:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006654:	4b0b      	ldr	r3, [pc, #44]	; (8006684 <HAL_RCC_ClockConfig+0x240>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 030f 	and.w	r3, r3, #15
 800665c:	683a      	ldr	r2, [r7, #0]
 800665e:	429a      	cmp	r2, r3
 8006660:	d214      	bcs.n	800668c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006662:	4b08      	ldr	r3, [pc, #32]	; (8006684 <HAL_RCC_ClockConfig+0x240>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f023 020f 	bic.w	r2, r3, #15
 800666a:	4906      	ldr	r1, [pc, #24]	; (8006684 <HAL_RCC_ClockConfig+0x240>)
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	4313      	orrs	r3, r2
 8006670:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006672:	4b04      	ldr	r3, [pc, #16]	; (8006684 <HAL_RCC_ClockConfig+0x240>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 030f 	and.w	r3, r3, #15
 800667a:	683a      	ldr	r2, [r7, #0]
 800667c:	429a      	cmp	r2, r3
 800667e:	d005      	beq.n	800668c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	e086      	b.n	8006792 <HAL_RCC_ClockConfig+0x34e>
 8006684:	52002000 	.word	0x52002000
 8006688:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 0304 	and.w	r3, r3, #4
 8006694:	2b00      	cmp	r3, #0
 8006696:	d010      	beq.n	80066ba <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	691a      	ldr	r2, [r3, #16]
 800669c:	4b3f      	ldr	r3, [pc, #252]	; (800679c <HAL_RCC_ClockConfig+0x358>)
 800669e:	699b      	ldr	r3, [r3, #24]
 80066a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d208      	bcs.n	80066ba <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80066a8:	4b3c      	ldr	r3, [pc, #240]	; (800679c <HAL_RCC_ClockConfig+0x358>)
 80066aa:	699b      	ldr	r3, [r3, #24]
 80066ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	691b      	ldr	r3, [r3, #16]
 80066b4:	4939      	ldr	r1, [pc, #228]	; (800679c <HAL_RCC_ClockConfig+0x358>)
 80066b6:	4313      	orrs	r3, r2
 80066b8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 0308 	and.w	r3, r3, #8
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d010      	beq.n	80066e8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	695a      	ldr	r2, [r3, #20]
 80066ca:	4b34      	ldr	r3, [pc, #208]	; (800679c <HAL_RCC_ClockConfig+0x358>)
 80066cc:	69db      	ldr	r3, [r3, #28]
 80066ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d208      	bcs.n	80066e8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80066d6:	4b31      	ldr	r3, [pc, #196]	; (800679c <HAL_RCC_ClockConfig+0x358>)
 80066d8:	69db      	ldr	r3, [r3, #28]
 80066da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	695b      	ldr	r3, [r3, #20]
 80066e2:	492e      	ldr	r1, [pc, #184]	; (800679c <HAL_RCC_ClockConfig+0x358>)
 80066e4:	4313      	orrs	r3, r2
 80066e6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f003 0310 	and.w	r3, r3, #16
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d010      	beq.n	8006716 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	699a      	ldr	r2, [r3, #24]
 80066f8:	4b28      	ldr	r3, [pc, #160]	; (800679c <HAL_RCC_ClockConfig+0x358>)
 80066fa:	69db      	ldr	r3, [r3, #28]
 80066fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006700:	429a      	cmp	r2, r3
 8006702:	d208      	bcs.n	8006716 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006704:	4b25      	ldr	r3, [pc, #148]	; (800679c <HAL_RCC_ClockConfig+0x358>)
 8006706:	69db      	ldr	r3, [r3, #28]
 8006708:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	699b      	ldr	r3, [r3, #24]
 8006710:	4922      	ldr	r1, [pc, #136]	; (800679c <HAL_RCC_ClockConfig+0x358>)
 8006712:	4313      	orrs	r3, r2
 8006714:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f003 0320 	and.w	r3, r3, #32
 800671e:	2b00      	cmp	r3, #0
 8006720:	d010      	beq.n	8006744 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	69da      	ldr	r2, [r3, #28]
 8006726:	4b1d      	ldr	r3, [pc, #116]	; (800679c <HAL_RCC_ClockConfig+0x358>)
 8006728:	6a1b      	ldr	r3, [r3, #32]
 800672a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800672e:	429a      	cmp	r2, r3
 8006730:	d208      	bcs.n	8006744 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006732:	4b1a      	ldr	r3, [pc, #104]	; (800679c <HAL_RCC_ClockConfig+0x358>)
 8006734:	6a1b      	ldr	r3, [r3, #32]
 8006736:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	69db      	ldr	r3, [r3, #28]
 800673e:	4917      	ldr	r1, [pc, #92]	; (800679c <HAL_RCC_ClockConfig+0x358>)
 8006740:	4313      	orrs	r3, r2
 8006742:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006744:	f000 f834 	bl	80067b0 <HAL_RCC_GetSysClockFreq>
 8006748:	4602      	mov	r2, r0
 800674a:	4b14      	ldr	r3, [pc, #80]	; (800679c <HAL_RCC_ClockConfig+0x358>)
 800674c:	699b      	ldr	r3, [r3, #24]
 800674e:	0a1b      	lsrs	r3, r3, #8
 8006750:	f003 030f 	and.w	r3, r3, #15
 8006754:	4912      	ldr	r1, [pc, #72]	; (80067a0 <HAL_RCC_ClockConfig+0x35c>)
 8006756:	5ccb      	ldrb	r3, [r1, r3]
 8006758:	f003 031f 	and.w	r3, r3, #31
 800675c:	fa22 f303 	lsr.w	r3, r2, r3
 8006760:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006762:	4b0e      	ldr	r3, [pc, #56]	; (800679c <HAL_RCC_ClockConfig+0x358>)
 8006764:	699b      	ldr	r3, [r3, #24]
 8006766:	f003 030f 	and.w	r3, r3, #15
 800676a:	4a0d      	ldr	r2, [pc, #52]	; (80067a0 <HAL_RCC_ClockConfig+0x35c>)
 800676c:	5cd3      	ldrb	r3, [r2, r3]
 800676e:	f003 031f 	and.w	r3, r3, #31
 8006772:	693a      	ldr	r2, [r7, #16]
 8006774:	fa22 f303 	lsr.w	r3, r2, r3
 8006778:	4a0a      	ldr	r2, [pc, #40]	; (80067a4 <HAL_RCC_ClockConfig+0x360>)
 800677a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800677c:	4a0a      	ldr	r2, [pc, #40]	; (80067a8 <HAL_RCC_ClockConfig+0x364>)
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006782:	4b0a      	ldr	r3, [pc, #40]	; (80067ac <HAL_RCC_ClockConfig+0x368>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4618      	mov	r0, r3
 8006788:	f7fc f8a2 	bl	80028d0 <HAL_InitTick>
 800678c:	4603      	mov	r3, r0
 800678e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006790:	7bfb      	ldrb	r3, [r7, #15]
}
 8006792:	4618      	mov	r0, r3
 8006794:	3718      	adds	r7, #24
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	58024400 	.word	0x58024400
 80067a0:	0800b500 	.word	0x0800b500
 80067a4:	24000054 	.word	0x24000054
 80067a8:	24000050 	.word	0x24000050
 80067ac:	24000058 	.word	0x24000058

080067b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b089      	sub	sp, #36	; 0x24
 80067b4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80067b6:	4bb3      	ldr	r3, [pc, #716]	; (8006a84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80067be:	2b18      	cmp	r3, #24
 80067c0:	f200 8155 	bhi.w	8006a6e <HAL_RCC_GetSysClockFreq+0x2be>
 80067c4:	a201      	add	r2, pc, #4	; (adr r2, 80067cc <HAL_RCC_GetSysClockFreq+0x1c>)
 80067c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ca:	bf00      	nop
 80067cc:	08006831 	.word	0x08006831
 80067d0:	08006a6f 	.word	0x08006a6f
 80067d4:	08006a6f 	.word	0x08006a6f
 80067d8:	08006a6f 	.word	0x08006a6f
 80067dc:	08006a6f 	.word	0x08006a6f
 80067e0:	08006a6f 	.word	0x08006a6f
 80067e4:	08006a6f 	.word	0x08006a6f
 80067e8:	08006a6f 	.word	0x08006a6f
 80067ec:	08006857 	.word	0x08006857
 80067f0:	08006a6f 	.word	0x08006a6f
 80067f4:	08006a6f 	.word	0x08006a6f
 80067f8:	08006a6f 	.word	0x08006a6f
 80067fc:	08006a6f 	.word	0x08006a6f
 8006800:	08006a6f 	.word	0x08006a6f
 8006804:	08006a6f 	.word	0x08006a6f
 8006808:	08006a6f 	.word	0x08006a6f
 800680c:	0800685d 	.word	0x0800685d
 8006810:	08006a6f 	.word	0x08006a6f
 8006814:	08006a6f 	.word	0x08006a6f
 8006818:	08006a6f 	.word	0x08006a6f
 800681c:	08006a6f 	.word	0x08006a6f
 8006820:	08006a6f 	.word	0x08006a6f
 8006824:	08006a6f 	.word	0x08006a6f
 8006828:	08006a6f 	.word	0x08006a6f
 800682c:	08006863 	.word	0x08006863
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006830:	4b94      	ldr	r3, [pc, #592]	; (8006a84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f003 0320 	and.w	r3, r3, #32
 8006838:	2b00      	cmp	r3, #0
 800683a:	d009      	beq.n	8006850 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800683c:	4b91      	ldr	r3, [pc, #580]	; (8006a84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	08db      	lsrs	r3, r3, #3
 8006842:	f003 0303 	and.w	r3, r3, #3
 8006846:	4a90      	ldr	r2, [pc, #576]	; (8006a88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006848:	fa22 f303 	lsr.w	r3, r2, r3
 800684c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800684e:	e111      	b.n	8006a74 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006850:	4b8d      	ldr	r3, [pc, #564]	; (8006a88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006852:	61bb      	str	r3, [r7, #24]
    break;
 8006854:	e10e      	b.n	8006a74 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006856:	4b8d      	ldr	r3, [pc, #564]	; (8006a8c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006858:	61bb      	str	r3, [r7, #24]
    break;
 800685a:	e10b      	b.n	8006a74 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800685c:	4b8c      	ldr	r3, [pc, #560]	; (8006a90 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800685e:	61bb      	str	r3, [r7, #24]
    break;
 8006860:	e108      	b.n	8006a74 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006862:	4b88      	ldr	r3, [pc, #544]	; (8006a84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006866:	f003 0303 	and.w	r3, r3, #3
 800686a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800686c:	4b85      	ldr	r3, [pc, #532]	; (8006a84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800686e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006870:	091b      	lsrs	r3, r3, #4
 8006872:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006876:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006878:	4b82      	ldr	r3, [pc, #520]	; (8006a84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800687a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800687c:	f003 0301 	and.w	r3, r3, #1
 8006880:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006882:	4b80      	ldr	r3, [pc, #512]	; (8006a84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006886:	08db      	lsrs	r3, r3, #3
 8006888:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800688c:	68fa      	ldr	r2, [r7, #12]
 800688e:	fb02 f303 	mul.w	r3, r2, r3
 8006892:	ee07 3a90 	vmov	s15, r3
 8006896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800689a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	f000 80e1 	beq.w	8006a68 <HAL_RCC_GetSysClockFreq+0x2b8>
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	2b02      	cmp	r3, #2
 80068aa:	f000 8083 	beq.w	80069b4 <HAL_RCC_GetSysClockFreq+0x204>
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	2b02      	cmp	r3, #2
 80068b2:	f200 80a1 	bhi.w	80069f8 <HAL_RCC_GetSysClockFreq+0x248>
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d003      	beq.n	80068c4 <HAL_RCC_GetSysClockFreq+0x114>
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d056      	beq.n	8006970 <HAL_RCC_GetSysClockFreq+0x1c0>
 80068c2:	e099      	b.n	80069f8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068c4:	4b6f      	ldr	r3, [pc, #444]	; (8006a84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 0320 	and.w	r3, r3, #32
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d02d      	beq.n	800692c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80068d0:	4b6c      	ldr	r3, [pc, #432]	; (8006a84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	08db      	lsrs	r3, r3, #3
 80068d6:	f003 0303 	and.w	r3, r3, #3
 80068da:	4a6b      	ldr	r2, [pc, #428]	; (8006a88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80068dc:	fa22 f303 	lsr.w	r3, r2, r3
 80068e0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	ee07 3a90 	vmov	s15, r3
 80068e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	ee07 3a90 	vmov	s15, r3
 80068f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068fa:	4b62      	ldr	r3, [pc, #392]	; (8006a84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006902:	ee07 3a90 	vmov	s15, r3
 8006906:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800690a:	ed97 6a02 	vldr	s12, [r7, #8]
 800690e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006a94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006912:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006916:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800691a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800691e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006922:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006926:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800692a:	e087      	b.n	8006a3c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	ee07 3a90 	vmov	s15, r3
 8006932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006936:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006a98 <HAL_RCC_GetSysClockFreq+0x2e8>
 800693a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800693e:	4b51      	ldr	r3, [pc, #324]	; (8006a84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006946:	ee07 3a90 	vmov	s15, r3
 800694a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800694e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006952:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006a94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006956:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800695a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800695e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006962:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800696a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800696e:	e065      	b.n	8006a3c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	ee07 3a90 	vmov	s15, r3
 8006976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800697a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006a9c <HAL_RCC_GetSysClockFreq+0x2ec>
 800697e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006982:	4b40      	ldr	r3, [pc, #256]	; (8006a84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800698a:	ee07 3a90 	vmov	s15, r3
 800698e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006992:	ed97 6a02 	vldr	s12, [r7, #8]
 8006996:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006a94 <HAL_RCC_GetSysClockFreq+0x2e4>
 800699a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800699e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80069b2:	e043      	b.n	8006a3c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	ee07 3a90 	vmov	s15, r3
 80069ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069be:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006aa0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80069c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069c6:	4b2f      	ldr	r3, [pc, #188]	; (8006a84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069ce:	ee07 3a90 	vmov	s15, r3
 80069d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80069da:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006a94 <HAL_RCC_GetSysClockFreq+0x2e4>
 80069de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80069f6:	e021      	b.n	8006a3c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	ee07 3a90 	vmov	s15, r3
 80069fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a02:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006a9c <HAL_RCC_GetSysClockFreq+0x2ec>
 8006a06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a0a:	4b1e      	ldr	r3, [pc, #120]	; (8006a84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a12:	ee07 3a90 	vmov	s15, r3
 8006a16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a1e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006a94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a3a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006a3c:	4b11      	ldr	r3, [pc, #68]	; (8006a84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a40:	0a5b      	lsrs	r3, r3, #9
 8006a42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a46:	3301      	adds	r3, #1
 8006a48:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	ee07 3a90 	vmov	s15, r3
 8006a50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006a54:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a60:	ee17 3a90 	vmov	r3, s15
 8006a64:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006a66:	e005      	b.n	8006a74 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	61bb      	str	r3, [r7, #24]
    break;
 8006a6c:	e002      	b.n	8006a74 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006a6e:	4b07      	ldr	r3, [pc, #28]	; (8006a8c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006a70:	61bb      	str	r3, [r7, #24]
    break;
 8006a72:	bf00      	nop
  }

  return sysclockfreq;
 8006a74:	69bb      	ldr	r3, [r7, #24]
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3724      	adds	r7, #36	; 0x24
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr
 8006a82:	bf00      	nop
 8006a84:	58024400 	.word	0x58024400
 8006a88:	03d09000 	.word	0x03d09000
 8006a8c:	003d0900 	.word	0x003d0900
 8006a90:	007a1200 	.word	0x007a1200
 8006a94:	46000000 	.word	0x46000000
 8006a98:	4c742400 	.word	0x4c742400
 8006a9c:	4a742400 	.word	0x4a742400
 8006aa0:	4af42400 	.word	0x4af42400

08006aa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b082      	sub	sp, #8
 8006aa8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006aaa:	f7ff fe81 	bl	80067b0 <HAL_RCC_GetSysClockFreq>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	4b10      	ldr	r3, [pc, #64]	; (8006af4 <HAL_RCC_GetHCLKFreq+0x50>)
 8006ab2:	699b      	ldr	r3, [r3, #24]
 8006ab4:	0a1b      	lsrs	r3, r3, #8
 8006ab6:	f003 030f 	and.w	r3, r3, #15
 8006aba:	490f      	ldr	r1, [pc, #60]	; (8006af8 <HAL_RCC_GetHCLKFreq+0x54>)
 8006abc:	5ccb      	ldrb	r3, [r1, r3]
 8006abe:	f003 031f 	and.w	r3, r3, #31
 8006ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ac6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006ac8:	4b0a      	ldr	r3, [pc, #40]	; (8006af4 <HAL_RCC_GetHCLKFreq+0x50>)
 8006aca:	699b      	ldr	r3, [r3, #24]
 8006acc:	f003 030f 	and.w	r3, r3, #15
 8006ad0:	4a09      	ldr	r2, [pc, #36]	; (8006af8 <HAL_RCC_GetHCLKFreq+0x54>)
 8006ad2:	5cd3      	ldrb	r3, [r2, r3]
 8006ad4:	f003 031f 	and.w	r3, r3, #31
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	fa22 f303 	lsr.w	r3, r2, r3
 8006ade:	4a07      	ldr	r2, [pc, #28]	; (8006afc <HAL_RCC_GetHCLKFreq+0x58>)
 8006ae0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006ae2:	4a07      	ldr	r2, [pc, #28]	; (8006b00 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006ae8:	4b04      	ldr	r3, [pc, #16]	; (8006afc <HAL_RCC_GetHCLKFreq+0x58>)
 8006aea:	681b      	ldr	r3, [r3, #0]
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3708      	adds	r7, #8
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}
 8006af4:	58024400 	.word	0x58024400
 8006af8:	0800b500 	.word	0x0800b500
 8006afc:	24000054 	.word	0x24000054
 8006b00:	24000050 	.word	0x24000050

08006b04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006b08:	f7ff ffcc 	bl	8006aa4 <HAL_RCC_GetHCLKFreq>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	4b06      	ldr	r3, [pc, #24]	; (8006b28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b10:	69db      	ldr	r3, [r3, #28]
 8006b12:	091b      	lsrs	r3, r3, #4
 8006b14:	f003 0307 	and.w	r3, r3, #7
 8006b18:	4904      	ldr	r1, [pc, #16]	; (8006b2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8006b1a:	5ccb      	ldrb	r3, [r1, r3]
 8006b1c:	f003 031f 	and.w	r3, r3, #31
 8006b20:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	58024400 	.word	0x58024400
 8006b2c:	0800b500 	.word	0x0800b500

08006b30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006b34:	f7ff ffb6 	bl	8006aa4 <HAL_RCC_GetHCLKFreq>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	4b06      	ldr	r3, [pc, #24]	; (8006b54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b3c:	69db      	ldr	r3, [r3, #28]
 8006b3e:	0a1b      	lsrs	r3, r3, #8
 8006b40:	f003 0307 	and.w	r3, r3, #7
 8006b44:	4904      	ldr	r1, [pc, #16]	; (8006b58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006b46:	5ccb      	ldrb	r3, [r1, r3]
 8006b48:	f003 031f 	and.w	r3, r3, #31
 8006b4c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	bd80      	pop	{r7, pc}
 8006b54:	58024400 	.word	0x58024400
 8006b58:	0800b500 	.word	0x0800b500

08006b5c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b086      	sub	sp, #24
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006b64:	2300      	movs	r3, #0
 8006b66:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006b68:	2300      	movs	r3, #0
 8006b6a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d03f      	beq.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b7c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006b80:	d02a      	beq.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006b82:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006b86:	d824      	bhi.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006b88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b8c:	d018      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006b8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b92:	d81e      	bhi.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d003      	beq.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006b98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b9c:	d007      	beq.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006b9e:	e018      	b.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ba0:	4ba4      	ldr	r3, [pc, #656]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8006ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba4:	4aa3      	ldr	r2, [pc, #652]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8006ba6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006baa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006bac:	e015      	b.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	3304      	adds	r3, #4
 8006bb2:	2102      	movs	r1, #2
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f001 f989 	bl	8007ecc <RCCEx_PLL2_Config>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006bbe:	e00c      	b.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	3324      	adds	r3, #36	; 0x24
 8006bc4:	2102      	movs	r1, #2
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f001 fa32 	bl	8008030 <RCCEx_PLL3_Config>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006bd0:	e003      	b.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	75fb      	strb	r3, [r7, #23]
      break;
 8006bd6:	e000      	b.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006bd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bda:	7dfb      	ldrb	r3, [r7, #23]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d109      	bne.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006be0:	4b94      	ldr	r3, [pc, #592]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8006be2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006be4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bec:	4991      	ldr	r1, [pc, #580]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	650b      	str	r3, [r1, #80]	; 0x50
 8006bf2:	e001      	b.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bf4:	7dfb      	ldrb	r3, [r7, #23]
 8006bf6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d03d      	beq.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c08:	2b04      	cmp	r3, #4
 8006c0a:	d826      	bhi.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006c0c:	a201      	add	r2, pc, #4	; (adr r2, 8006c14 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c12:	bf00      	nop
 8006c14:	08006c29 	.word	0x08006c29
 8006c18:	08006c37 	.word	0x08006c37
 8006c1c:	08006c49 	.word	0x08006c49
 8006c20:	08006c61 	.word	0x08006c61
 8006c24:	08006c61 	.word	0x08006c61
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c28:	4b82      	ldr	r3, [pc, #520]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8006c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c2c:	4a81      	ldr	r2, [pc, #516]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8006c2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006c34:	e015      	b.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	3304      	adds	r3, #4
 8006c3a:	2100      	movs	r1, #0
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f001 f945 	bl	8007ecc <RCCEx_PLL2_Config>
 8006c42:	4603      	mov	r3, r0
 8006c44:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006c46:	e00c      	b.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	3324      	adds	r3, #36	; 0x24
 8006c4c:	2100      	movs	r1, #0
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f001 f9ee 	bl	8008030 <RCCEx_PLL3_Config>
 8006c54:	4603      	mov	r3, r0
 8006c56:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006c58:	e003      	b.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	75fb      	strb	r3, [r7, #23]
      break;
 8006c5e:	e000      	b.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006c60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c62:	7dfb      	ldrb	r3, [r7, #23]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d109      	bne.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006c68:	4b72      	ldr	r3, [pc, #456]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8006c6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c6c:	f023 0207 	bic.w	r2, r3, #7
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c74:	496f      	ldr	r1, [pc, #444]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8006c76:	4313      	orrs	r3, r2
 8006c78:	650b      	str	r3, [r1, #80]	; 0x50
 8006c7a:	e001      	b.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c7c:	7dfb      	ldrb	r3, [r7, #23]
 8006c7e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d051      	beq.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006c92:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8006c96:	d036      	beq.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006c98:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8006c9c:	d830      	bhi.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8006c9e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ca2:	d032      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8006ca4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ca8:	d82a      	bhi.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8006caa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006cae:	d02e      	beq.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8006cb0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006cb4:	d824      	bhi.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8006cb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006cba:	d018      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006cbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006cc0:	d81e      	bhi.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d003      	beq.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x172>
 8006cc6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006cca:	d007      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x180>
 8006ccc:	e018      	b.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cce:	4b59      	ldr	r3, [pc, #356]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8006cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd2:	4a58      	ldr	r2, [pc, #352]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8006cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cd8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006cda:	e019      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	3304      	adds	r3, #4
 8006ce0:	2100      	movs	r1, #0
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f001 f8f2 	bl	8007ecc <RCCEx_PLL2_Config>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006cec:	e010      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	3324      	adds	r3, #36	; 0x24
 8006cf2:	2100      	movs	r1, #0
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f001 f99b 	bl	8008030 <RCCEx_PLL3_Config>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006cfe:	e007      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	75fb      	strb	r3, [r7, #23]
      break;
 8006d04:	e004      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8006d06:	bf00      	nop
 8006d08:	e002      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8006d0a:	bf00      	nop
 8006d0c:	e000      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8006d0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d10:	7dfb      	ldrb	r3, [r7, #23]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d10a      	bne.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006d16:	4b47      	ldr	r3, [pc, #284]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8006d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d1a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006d24:	4943      	ldr	r1, [pc, #268]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8006d26:	4313      	orrs	r3, r2
 8006d28:	658b      	str	r3, [r1, #88]	; 0x58
 8006d2a:	e001      	b.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d2c:	7dfb      	ldrb	r3, [r7, #23]
 8006d2e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d051      	beq.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006d42:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006d46:	d036      	beq.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8006d48:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006d4c:	d830      	bhi.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006d4e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006d52:	d032      	beq.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8006d54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006d58:	d82a      	bhi.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006d5a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006d5e:	d02e      	beq.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x262>
 8006d60:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006d64:	d824      	bhi.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006d66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d6a:	d018      	beq.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x242>
 8006d6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d70:	d81e      	bhi.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d003      	beq.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x222>
 8006d76:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d7a:	d007      	beq.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006d7c:	e018      	b.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d7e:	4b2d      	ldr	r3, [pc, #180]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8006d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d82:	4a2c      	ldr	r2, [pc, #176]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8006d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006d8a:	e019      	b.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	3304      	adds	r3, #4
 8006d90:	2100      	movs	r1, #0
 8006d92:	4618      	mov	r0, r3
 8006d94:	f001 f89a 	bl	8007ecc <RCCEx_PLL2_Config>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006d9c:	e010      	b.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	3324      	adds	r3, #36	; 0x24
 8006da2:	2100      	movs	r1, #0
 8006da4:	4618      	mov	r0, r3
 8006da6:	f001 f943 	bl	8008030 <RCCEx_PLL3_Config>
 8006daa:	4603      	mov	r3, r0
 8006dac:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006dae:	e007      	b.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006db0:	2301      	movs	r3, #1
 8006db2:	75fb      	strb	r3, [r7, #23]
      break;
 8006db4:	e004      	b.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8006db6:	bf00      	nop
 8006db8:	e002      	b.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8006dba:	bf00      	nop
 8006dbc:	e000      	b.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8006dbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006dc0:	7dfb      	ldrb	r3, [r7, #23]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d10a      	bne.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006dc6:	4b1b      	ldr	r3, [pc, #108]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8006dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dca:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006dd4:	4917      	ldr	r1, [pc, #92]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	658b      	str	r3, [r1, #88]	; 0x58
 8006dda:	e001      	b.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ddc:	7dfb      	ldrb	r3, [r7, #23]
 8006dde:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d035      	beq.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006df0:	2b30      	cmp	r3, #48	; 0x30
 8006df2:	d01c      	beq.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006df4:	2b30      	cmp	r3, #48	; 0x30
 8006df6:	d817      	bhi.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8006df8:	2b20      	cmp	r3, #32
 8006dfa:	d00c      	beq.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8006dfc:	2b20      	cmp	r3, #32
 8006dfe:	d813      	bhi.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d019      	beq.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8006e04:	2b10      	cmp	r3, #16
 8006e06:	d10f      	bne.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e08:	4b0a      	ldr	r3, [pc, #40]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8006e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e0c:	4a09      	ldr	r2, [pc, #36]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8006e0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8006e14:	e011      	b.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	3304      	adds	r3, #4
 8006e1a:	2102      	movs	r1, #2
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f001 f855 	bl	8007ecc <RCCEx_PLL2_Config>
 8006e22:	4603      	mov	r3, r0
 8006e24:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8006e26:	e008      	b.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	75fb      	strb	r3, [r7, #23]
      break;
 8006e2c:	e005      	b.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8006e2e:	bf00      	nop
 8006e30:	e003      	b.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8006e32:	bf00      	nop
 8006e34:	58024400 	.word	0x58024400
      break;
 8006e38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e3a:	7dfb      	ldrb	r3, [r7, #23]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d109      	bne.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006e40:	4ba3      	ldr	r3, [pc, #652]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8006e42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e44:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e4c:	49a0      	ldr	r1, [pc, #640]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006e52:	e001      	b.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e54:	7dfb      	ldrb	r3, [r7, #23]
 8006e56:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d047      	beq.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e6c:	d030      	beq.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8006e6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e72:	d82a      	bhi.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006e74:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e78:	d02c      	beq.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8006e7a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e7e:	d824      	bhi.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006e80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e84:	d018      	beq.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006e86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e8a:	d81e      	bhi.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d003      	beq.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006e90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e94:	d007      	beq.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006e96:	e018      	b.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e98:	4b8d      	ldr	r3, [pc, #564]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8006e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e9c:	4a8c      	ldr	r2, [pc, #560]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8006e9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ea2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006ea4:	e017      	b.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	3304      	adds	r3, #4
 8006eaa:	2100      	movs	r1, #0
 8006eac:	4618      	mov	r0, r3
 8006eae:	f001 f80d 	bl	8007ecc <RCCEx_PLL2_Config>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006eb6:	e00e      	b.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	3324      	adds	r3, #36	; 0x24
 8006ebc:	2100      	movs	r1, #0
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f001 f8b6 	bl	8008030 <RCCEx_PLL3_Config>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006ec8:	e005      	b.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	75fb      	strb	r3, [r7, #23]
      break;
 8006ece:	e002      	b.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8006ed0:	bf00      	nop
 8006ed2:	e000      	b.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8006ed4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ed6:	7dfb      	ldrb	r3, [r7, #23]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d109      	bne.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006edc:	4b7c      	ldr	r3, [pc, #496]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8006ede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ee0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ee8:	4979      	ldr	r1, [pc, #484]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8006eea:	4313      	orrs	r3, r2
 8006eec:	650b      	str	r3, [r1, #80]	; 0x50
 8006eee:	e001      	b.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ef0:	7dfb      	ldrb	r3, [r7, #23]
 8006ef2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d049      	beq.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f08:	d02e      	beq.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8006f0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f0e:	d828      	bhi.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8006f10:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006f14:	d02a      	beq.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8006f16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006f1a:	d822      	bhi.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8006f1c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006f20:	d026      	beq.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8006f22:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006f26:	d81c      	bhi.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8006f28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f2c:	d010      	beq.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8006f2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f32:	d816      	bhi.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d01d      	beq.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8006f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f3c:	d111      	bne.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	3304      	adds	r3, #4
 8006f42:	2101      	movs	r1, #1
 8006f44:	4618      	mov	r0, r3
 8006f46:	f000 ffc1 	bl	8007ecc <RCCEx_PLL2_Config>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006f4e:	e012      	b.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	3324      	adds	r3, #36	; 0x24
 8006f54:	2101      	movs	r1, #1
 8006f56:	4618      	mov	r0, r3
 8006f58:	f001 f86a 	bl	8008030 <RCCEx_PLL3_Config>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006f60:	e009      	b.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	75fb      	strb	r3, [r7, #23]
      break;
 8006f66:	e006      	b.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006f68:	bf00      	nop
 8006f6a:	e004      	b.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006f6c:	bf00      	nop
 8006f6e:	e002      	b.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006f70:	bf00      	nop
 8006f72:	e000      	b.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006f74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f76:	7dfb      	ldrb	r3, [r7, #23]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d109      	bne.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006f7c:	4b54      	ldr	r3, [pc, #336]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8006f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f80:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f88:	4951      	ldr	r1, [pc, #324]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	650b      	str	r3, [r1, #80]	; 0x50
 8006f8e:	e001      	b.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f90:	7dfb      	ldrb	r3, [r7, #23]
 8006f92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d04b      	beq.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006fa6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006faa:	d02e      	beq.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8006fac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006fb0:	d828      	bhi.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fb6:	d02a      	beq.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8006fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fbc:	d822      	bhi.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006fbe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006fc2:	d026      	beq.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8006fc4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006fc8:	d81c      	bhi.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006fca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fce:	d010      	beq.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8006fd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fd4:	d816      	bhi.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d01d      	beq.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8006fda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006fde:	d111      	bne.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	3304      	adds	r3, #4
 8006fe4:	2101      	movs	r1, #1
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f000 ff70 	bl	8007ecc <RCCEx_PLL2_Config>
 8006fec:	4603      	mov	r3, r0
 8006fee:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006ff0:	e012      	b.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	3324      	adds	r3, #36	; 0x24
 8006ff6:	2101      	movs	r1, #1
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f001 f819 	bl	8008030 <RCCEx_PLL3_Config>
 8006ffe:	4603      	mov	r3, r0
 8007000:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007002:	e009      	b.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	75fb      	strb	r3, [r7, #23]
      break;
 8007008:	e006      	b.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800700a:	bf00      	nop
 800700c:	e004      	b.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800700e:	bf00      	nop
 8007010:	e002      	b.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8007012:	bf00      	nop
 8007014:	e000      	b.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8007016:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007018:	7dfb      	ldrb	r3, [r7, #23]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d10a      	bne.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800701e:	4b2c      	ldr	r3, [pc, #176]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8007020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007022:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800702c:	4928      	ldr	r1, [pc, #160]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800702e:	4313      	orrs	r3, r2
 8007030:	658b      	str	r3, [r1, #88]	; 0x58
 8007032:	e001      	b.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007034:	7dfb      	ldrb	r3, [r7, #23]
 8007036:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007040:	2b00      	cmp	r3, #0
 8007042:	d02f      	beq.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007048:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800704c:	d00e      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x510>
 800704e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007052:	d814      	bhi.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8007054:	2b00      	cmp	r3, #0
 8007056:	d015      	beq.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8007058:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800705c:	d10f      	bne.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800705e:	4b1c      	ldr	r3, [pc, #112]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8007060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007062:	4a1b      	ldr	r2, [pc, #108]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8007064:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007068:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800706a:	e00c      	b.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	3304      	adds	r3, #4
 8007070:	2101      	movs	r1, #1
 8007072:	4618      	mov	r0, r3
 8007074:	f000 ff2a 	bl	8007ecc <RCCEx_PLL2_Config>
 8007078:	4603      	mov	r3, r0
 800707a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800707c:	e003      	b.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	75fb      	strb	r3, [r7, #23]
      break;
 8007082:	e000      	b.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8007084:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007086:	7dfb      	ldrb	r3, [r7, #23]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d109      	bne.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800708c:	4b10      	ldr	r3, [pc, #64]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800708e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007090:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007098:	490d      	ldr	r1, [pc, #52]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800709a:	4313      	orrs	r3, r2
 800709c:	650b      	str	r3, [r1, #80]	; 0x50
 800709e:	e001      	b.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070a0:	7dfb      	ldrb	r3, [r7, #23]
 80070a2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d034      	beq.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070b4:	2b03      	cmp	r3, #3
 80070b6:	d81d      	bhi.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80070b8:	a201      	add	r2, pc, #4	; (adr r2, 80070c0 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80070ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070be:	bf00      	nop
 80070c0:	080070fb 	.word	0x080070fb
 80070c4:	080070d5 	.word	0x080070d5
 80070c8:	080070e3 	.word	0x080070e3
 80070cc:	080070fb 	.word	0x080070fb
 80070d0:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070d4:	4bb1      	ldr	r3, [pc, #708]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80070d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d8:	4ab0      	ldr	r2, [pc, #704]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80070da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80070e0:	e00c      	b.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	3304      	adds	r3, #4
 80070e6:	2102      	movs	r1, #2
 80070e8:	4618      	mov	r0, r3
 80070ea:	f000 feef 	bl	8007ecc <RCCEx_PLL2_Config>
 80070ee:	4603      	mov	r3, r0
 80070f0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80070f2:	e003      	b.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	75fb      	strb	r3, [r7, #23]
      break;
 80070f8:	e000      	b.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 80070fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070fc:	7dfb      	ldrb	r3, [r7, #23]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d109      	bne.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007102:	4ba6      	ldr	r3, [pc, #664]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007106:	f023 0203 	bic.w	r2, r3, #3
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800710e:	49a3      	ldr	r1, [pc, #652]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007110:	4313      	orrs	r3, r2
 8007112:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007114:	e001      	b.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007116:	7dfb      	ldrb	r3, [r7, #23]
 8007118:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007122:	2b00      	cmp	r3, #0
 8007124:	f000 8086 	beq.w	8007234 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007128:	4b9d      	ldr	r3, [pc, #628]	; (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a9c      	ldr	r2, [pc, #624]	; (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800712e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007132:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007134:	f7fb fc16 	bl	8002964 <HAL_GetTick>
 8007138:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800713a:	e009      	b.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800713c:	f7fb fc12 	bl	8002964 <HAL_GetTick>
 8007140:	4602      	mov	r2, r0
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	1ad3      	subs	r3, r2, r3
 8007146:	2b64      	cmp	r3, #100	; 0x64
 8007148:	d902      	bls.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800714a:	2303      	movs	r3, #3
 800714c:	75fb      	strb	r3, [r7, #23]
        break;
 800714e:	e005      	b.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007150:	4b93      	ldr	r3, [pc, #588]	; (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007158:	2b00      	cmp	r3, #0
 800715a:	d0ef      	beq.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 800715c:	7dfb      	ldrb	r3, [r7, #23]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d166      	bne.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007162:	4b8e      	ldr	r3, [pc, #568]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007164:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800716c:	4053      	eors	r3, r2
 800716e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007172:	2b00      	cmp	r3, #0
 8007174:	d013      	beq.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007176:	4b89      	ldr	r3, [pc, #548]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800717a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800717e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007180:	4b86      	ldr	r3, [pc, #536]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007184:	4a85      	ldr	r2, [pc, #532]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007186:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800718a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800718c:	4b83      	ldr	r3, [pc, #524]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800718e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007190:	4a82      	ldr	r2, [pc, #520]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007192:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007196:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007198:	4a80      	ldr	r2, [pc, #512]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80071a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071a8:	d115      	bne.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071aa:	f7fb fbdb 	bl	8002964 <HAL_GetTick>
 80071ae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80071b0:	e00b      	b.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071b2:	f7fb fbd7 	bl	8002964 <HAL_GetTick>
 80071b6:	4602      	mov	r2, r0
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	1ad3      	subs	r3, r2, r3
 80071bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d902      	bls.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 80071c4:	2303      	movs	r3, #3
 80071c6:	75fb      	strb	r3, [r7, #23]
            break;
 80071c8:	e005      	b.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80071ca:	4b74      	ldr	r3, [pc, #464]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80071cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ce:	f003 0302 	and.w	r3, r3, #2
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d0ed      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 80071d6:	7dfb      	ldrb	r3, [r7, #23]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d126      	bne.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80071e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071ea:	d10d      	bne.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 80071ec:	4b6b      	ldr	r3, [pc, #428]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80071ee:	691b      	ldr	r3, [r3, #16]
 80071f0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80071fa:	0919      	lsrs	r1, r3, #4
 80071fc:	4b69      	ldr	r3, [pc, #420]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80071fe:	400b      	ands	r3, r1
 8007200:	4966      	ldr	r1, [pc, #408]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007202:	4313      	orrs	r3, r2
 8007204:	610b      	str	r3, [r1, #16]
 8007206:	e005      	b.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8007208:	4b64      	ldr	r3, [pc, #400]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800720a:	691b      	ldr	r3, [r3, #16]
 800720c:	4a63      	ldr	r2, [pc, #396]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800720e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007212:	6113      	str	r3, [r2, #16]
 8007214:	4b61      	ldr	r3, [pc, #388]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007216:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800721e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007222:	495e      	ldr	r1, [pc, #376]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007224:	4313      	orrs	r3, r2
 8007226:	670b      	str	r3, [r1, #112]	; 0x70
 8007228:	e004      	b.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800722a:	7dfb      	ldrb	r3, [r7, #23]
 800722c:	75bb      	strb	r3, [r7, #22]
 800722e:	e001      	b.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007230:	7dfb      	ldrb	r3, [r7, #23]
 8007232:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 0301 	and.w	r3, r3, #1
 800723c:	2b00      	cmp	r3, #0
 800723e:	d07e      	beq.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007244:	2b28      	cmp	r3, #40	; 0x28
 8007246:	d867      	bhi.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8007248:	a201      	add	r2, pc, #4	; (adr r2, 8007250 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800724a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800724e:	bf00      	nop
 8007250:	0800731f 	.word	0x0800731f
 8007254:	08007319 	.word	0x08007319
 8007258:	08007319 	.word	0x08007319
 800725c:	08007319 	.word	0x08007319
 8007260:	08007319 	.word	0x08007319
 8007264:	08007319 	.word	0x08007319
 8007268:	08007319 	.word	0x08007319
 800726c:	08007319 	.word	0x08007319
 8007270:	080072f5 	.word	0x080072f5
 8007274:	08007319 	.word	0x08007319
 8007278:	08007319 	.word	0x08007319
 800727c:	08007319 	.word	0x08007319
 8007280:	08007319 	.word	0x08007319
 8007284:	08007319 	.word	0x08007319
 8007288:	08007319 	.word	0x08007319
 800728c:	08007319 	.word	0x08007319
 8007290:	08007307 	.word	0x08007307
 8007294:	08007319 	.word	0x08007319
 8007298:	08007319 	.word	0x08007319
 800729c:	08007319 	.word	0x08007319
 80072a0:	08007319 	.word	0x08007319
 80072a4:	08007319 	.word	0x08007319
 80072a8:	08007319 	.word	0x08007319
 80072ac:	08007319 	.word	0x08007319
 80072b0:	0800731f 	.word	0x0800731f
 80072b4:	08007319 	.word	0x08007319
 80072b8:	08007319 	.word	0x08007319
 80072bc:	08007319 	.word	0x08007319
 80072c0:	08007319 	.word	0x08007319
 80072c4:	08007319 	.word	0x08007319
 80072c8:	08007319 	.word	0x08007319
 80072cc:	08007319 	.word	0x08007319
 80072d0:	0800731f 	.word	0x0800731f
 80072d4:	08007319 	.word	0x08007319
 80072d8:	08007319 	.word	0x08007319
 80072dc:	08007319 	.word	0x08007319
 80072e0:	08007319 	.word	0x08007319
 80072e4:	08007319 	.word	0x08007319
 80072e8:	08007319 	.word	0x08007319
 80072ec:	08007319 	.word	0x08007319
 80072f0:	0800731f 	.word	0x0800731f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	3304      	adds	r3, #4
 80072f8:	2101      	movs	r1, #1
 80072fa:	4618      	mov	r0, r3
 80072fc:	f000 fde6 	bl	8007ecc <RCCEx_PLL2_Config>
 8007300:	4603      	mov	r3, r0
 8007302:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007304:	e00c      	b.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	3324      	adds	r3, #36	; 0x24
 800730a:	2101      	movs	r1, #1
 800730c:	4618      	mov	r0, r3
 800730e:	f000 fe8f 	bl	8008030 <RCCEx_PLL3_Config>
 8007312:	4603      	mov	r3, r0
 8007314:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007316:	e003      	b.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	75fb      	strb	r3, [r7, #23]
      break;
 800731c:	e000      	b.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800731e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007320:	7dfb      	ldrb	r3, [r7, #23]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d109      	bne.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007326:	4b1d      	ldr	r3, [pc, #116]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800732a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007332:	491a      	ldr	r1, [pc, #104]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007334:	4313      	orrs	r3, r2
 8007336:	654b      	str	r3, [r1, #84]	; 0x54
 8007338:	e001      	b.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800733a:	7dfb      	ldrb	r3, [r7, #23]
 800733c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f003 0302 	and.w	r3, r3, #2
 8007346:	2b00      	cmp	r3, #0
 8007348:	d03e      	beq.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800734e:	2b05      	cmp	r3, #5
 8007350:	d820      	bhi.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8007352:	a201      	add	r2, pc, #4	; (adr r2, 8007358 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8007354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007358:	080073a9 	.word	0x080073a9
 800735c:	08007371 	.word	0x08007371
 8007360:	08007383 	.word	0x08007383
 8007364:	080073a9 	.word	0x080073a9
 8007368:	080073a9 	.word	0x080073a9
 800736c:	080073a9 	.word	0x080073a9
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	3304      	adds	r3, #4
 8007374:	2101      	movs	r1, #1
 8007376:	4618      	mov	r0, r3
 8007378:	f000 fda8 	bl	8007ecc <RCCEx_PLL2_Config>
 800737c:	4603      	mov	r3, r0
 800737e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007380:	e013      	b.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	3324      	adds	r3, #36	; 0x24
 8007386:	2101      	movs	r1, #1
 8007388:	4618      	mov	r0, r3
 800738a:	f000 fe51 	bl	8008030 <RCCEx_PLL3_Config>
 800738e:	4603      	mov	r3, r0
 8007390:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007392:	e00a      	b.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007394:	2301      	movs	r3, #1
 8007396:	75fb      	strb	r3, [r7, #23]
      break;
 8007398:	e007      	b.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800739a:	bf00      	nop
 800739c:	58024400 	.word	0x58024400
 80073a0:	58024800 	.word	0x58024800
 80073a4:	00ffffcf 	.word	0x00ffffcf
      break;
 80073a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073aa:	7dfb      	ldrb	r3, [r7, #23]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d109      	bne.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80073b0:	4b9f      	ldr	r3, [pc, #636]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80073b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073b4:	f023 0207 	bic.w	r2, r3, #7
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073bc:	499c      	ldr	r1, [pc, #624]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80073be:	4313      	orrs	r3, r2
 80073c0:	654b      	str	r3, [r1, #84]	; 0x54
 80073c2:	e001      	b.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073c4:	7dfb      	ldrb	r3, [r7, #23]
 80073c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f003 0304 	and.w	r3, r3, #4
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d039      	beq.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073da:	2b05      	cmp	r3, #5
 80073dc:	d820      	bhi.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 80073de:	a201      	add	r2, pc, #4	; (adr r2, 80073e4 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 80073e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e4:	08007427 	.word	0x08007427
 80073e8:	080073fd 	.word	0x080073fd
 80073ec:	0800740f 	.word	0x0800740f
 80073f0:	08007427 	.word	0x08007427
 80073f4:	08007427 	.word	0x08007427
 80073f8:	08007427 	.word	0x08007427
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	3304      	adds	r3, #4
 8007400:	2101      	movs	r1, #1
 8007402:	4618      	mov	r0, r3
 8007404:	f000 fd62 	bl	8007ecc <RCCEx_PLL2_Config>
 8007408:	4603      	mov	r3, r0
 800740a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800740c:	e00c      	b.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	3324      	adds	r3, #36	; 0x24
 8007412:	2101      	movs	r1, #1
 8007414:	4618      	mov	r0, r3
 8007416:	f000 fe0b 	bl	8008030 <RCCEx_PLL3_Config>
 800741a:	4603      	mov	r3, r0
 800741c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800741e:	e003      	b.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007420:	2301      	movs	r3, #1
 8007422:	75fb      	strb	r3, [r7, #23]
      break;
 8007424:	e000      	b.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8007426:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007428:	7dfb      	ldrb	r3, [r7, #23]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d10a      	bne.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800742e:	4b80      	ldr	r3, [pc, #512]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007432:	f023 0207 	bic.w	r2, r3, #7
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800743c:	497c      	ldr	r1, [pc, #496]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800743e:	4313      	orrs	r3, r2
 8007440:	658b      	str	r3, [r1, #88]	; 0x58
 8007442:	e001      	b.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007444:	7dfb      	ldrb	r3, [r7, #23]
 8007446:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f003 0320 	and.w	r3, r3, #32
 8007450:	2b00      	cmp	r3, #0
 8007452:	d04b      	beq.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800745a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800745e:	d02e      	beq.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x962>
 8007460:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007464:	d828      	bhi.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8007466:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800746a:	d02a      	beq.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x966>
 800746c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007470:	d822      	bhi.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8007472:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007476:	d026      	beq.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8007478:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800747c:	d81c      	bhi.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800747e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007482:	d010      	beq.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8007484:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007488:	d816      	bhi.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800748a:	2b00      	cmp	r3, #0
 800748c:	d01d      	beq.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800748e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007492:	d111      	bne.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	3304      	adds	r3, #4
 8007498:	2100      	movs	r1, #0
 800749a:	4618      	mov	r0, r3
 800749c:	f000 fd16 	bl	8007ecc <RCCEx_PLL2_Config>
 80074a0:	4603      	mov	r3, r0
 80074a2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80074a4:	e012      	b.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	3324      	adds	r3, #36	; 0x24
 80074aa:	2102      	movs	r1, #2
 80074ac:	4618      	mov	r0, r3
 80074ae:	f000 fdbf 	bl	8008030 <RCCEx_PLL3_Config>
 80074b2:	4603      	mov	r3, r0
 80074b4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80074b6:	e009      	b.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074b8:	2301      	movs	r3, #1
 80074ba:	75fb      	strb	r3, [r7, #23]
      break;
 80074bc:	e006      	b.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80074be:	bf00      	nop
 80074c0:	e004      	b.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80074c2:	bf00      	nop
 80074c4:	e002      	b.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80074c6:	bf00      	nop
 80074c8:	e000      	b.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80074ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074cc:	7dfb      	ldrb	r3, [r7, #23]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d10a      	bne.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80074d2:	4b57      	ldr	r3, [pc, #348]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80074d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074d6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074e0:	4953      	ldr	r1, [pc, #332]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80074e2:	4313      	orrs	r3, r2
 80074e4:	654b      	str	r3, [r1, #84]	; 0x54
 80074e6:	e001      	b.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074e8:	7dfb      	ldrb	r3, [r7, #23]
 80074ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d04b      	beq.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80074fe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007502:	d02e      	beq.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8007504:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007508:	d828      	bhi.n	800755c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800750a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800750e:	d02a      	beq.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8007510:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007514:	d822      	bhi.n	800755c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8007516:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800751a:	d026      	beq.n	800756a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800751c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007520:	d81c      	bhi.n	800755c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8007522:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007526:	d010      	beq.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8007528:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800752c:	d816      	bhi.n	800755c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800752e:	2b00      	cmp	r3, #0
 8007530:	d01d      	beq.n	800756e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8007532:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007536:	d111      	bne.n	800755c <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	3304      	adds	r3, #4
 800753c:	2100      	movs	r1, #0
 800753e:	4618      	mov	r0, r3
 8007540:	f000 fcc4 	bl	8007ecc <RCCEx_PLL2_Config>
 8007544:	4603      	mov	r3, r0
 8007546:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007548:	e012      	b.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	3324      	adds	r3, #36	; 0x24
 800754e:	2102      	movs	r1, #2
 8007550:	4618      	mov	r0, r3
 8007552:	f000 fd6d 	bl	8008030 <RCCEx_PLL3_Config>
 8007556:	4603      	mov	r3, r0
 8007558:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800755a:	e009      	b.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800755c:	2301      	movs	r3, #1
 800755e:	75fb      	strb	r3, [r7, #23]
      break;
 8007560:	e006      	b.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8007562:	bf00      	nop
 8007564:	e004      	b.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8007566:	bf00      	nop
 8007568:	e002      	b.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800756a:	bf00      	nop
 800756c:	e000      	b.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800756e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007570:	7dfb      	ldrb	r3, [r7, #23]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d10a      	bne.n	800758c <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007576:	4b2e      	ldr	r3, [pc, #184]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800757a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007584:	492a      	ldr	r1, [pc, #168]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007586:	4313      	orrs	r3, r2
 8007588:	658b      	str	r3, [r1, #88]	; 0x58
 800758a:	e001      	b.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800758c:	7dfb      	ldrb	r3, [r7, #23]
 800758e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007598:	2b00      	cmp	r3, #0
 800759a:	d04d      	beq.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80075a2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80075a6:	d02e      	beq.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 80075a8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80075ac:	d828      	bhi.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80075ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075b2:	d02a      	beq.n	800760a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80075b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075b8:	d822      	bhi.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80075ba:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80075be:	d026      	beq.n	800760e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80075c0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80075c4:	d81c      	bhi.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80075c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80075ca:	d010      	beq.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0xa92>
 80075cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80075d0:	d816      	bhi.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d01d      	beq.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80075d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075da:	d111      	bne.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	3304      	adds	r3, #4
 80075e0:	2100      	movs	r1, #0
 80075e2:	4618      	mov	r0, r3
 80075e4:	f000 fc72 	bl	8007ecc <RCCEx_PLL2_Config>
 80075e8:	4603      	mov	r3, r0
 80075ea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80075ec:	e012      	b.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	3324      	adds	r3, #36	; 0x24
 80075f2:	2102      	movs	r1, #2
 80075f4:	4618      	mov	r0, r3
 80075f6:	f000 fd1b 	bl	8008030 <RCCEx_PLL3_Config>
 80075fa:	4603      	mov	r3, r0
 80075fc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80075fe:	e009      	b.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007600:	2301      	movs	r3, #1
 8007602:	75fb      	strb	r3, [r7, #23]
      break;
 8007604:	e006      	b.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8007606:	bf00      	nop
 8007608:	e004      	b.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800760a:	bf00      	nop
 800760c:	e002      	b.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800760e:	bf00      	nop
 8007610:	e000      	b.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8007612:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007614:	7dfb      	ldrb	r3, [r7, #23]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d10c      	bne.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800761a:	4b05      	ldr	r3, [pc, #20]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800761c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800761e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007628:	4901      	ldr	r1, [pc, #4]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800762a:	4313      	orrs	r3, r2
 800762c:	658b      	str	r3, [r1, #88]	; 0x58
 800762e:	e003      	b.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8007630:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007634:	7dfb      	ldrb	r3, [r7, #23]
 8007636:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f003 0308 	and.w	r3, r3, #8
 8007640:	2b00      	cmp	r3, #0
 8007642:	d018      	beq.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007648:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800764c:	d10a      	bne.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	3324      	adds	r3, #36	; 0x24
 8007652:	2102      	movs	r1, #2
 8007654:	4618      	mov	r0, r3
 8007656:	f000 fceb 	bl	8008030 <RCCEx_PLL3_Config>
 800765a:	4603      	mov	r3, r0
 800765c:	2b00      	cmp	r3, #0
 800765e:	d001      	beq.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8007660:	2301      	movs	r3, #1
 8007662:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8007664:	4b8a      	ldr	r3, [pc, #552]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8007666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007668:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007670:	4987      	ldr	r1, [pc, #540]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8007672:	4313      	orrs	r3, r2
 8007674:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f003 0310 	and.w	r3, r3, #16
 800767e:	2b00      	cmp	r3, #0
 8007680:	d01a      	beq.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007688:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800768c:	d10a      	bne.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	3324      	adds	r3, #36	; 0x24
 8007692:	2102      	movs	r1, #2
 8007694:	4618      	mov	r0, r3
 8007696:	f000 fccb 	bl	8008030 <RCCEx_PLL3_Config>
 800769a:	4603      	mov	r3, r0
 800769c:	2b00      	cmp	r3, #0
 800769e:	d001      	beq.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80076a4:	4b7a      	ldr	r3, [pc, #488]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80076a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076b2:	4977      	ldr	r1, [pc, #476]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80076b4:	4313      	orrs	r3, r2
 80076b6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d034      	beq.n	800772e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80076ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076ce:	d01d      	beq.n	800770c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80076d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076d4:	d817      	bhi.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d003      	beq.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80076da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076de:	d009      	beq.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80076e0:	e011      	b.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	3304      	adds	r3, #4
 80076e6:	2100      	movs	r1, #0
 80076e8:	4618      	mov	r0, r3
 80076ea:	f000 fbef 	bl	8007ecc <RCCEx_PLL2_Config>
 80076ee:	4603      	mov	r3, r0
 80076f0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80076f2:	e00c      	b.n	800770e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	3324      	adds	r3, #36	; 0x24
 80076f8:	2102      	movs	r1, #2
 80076fa:	4618      	mov	r0, r3
 80076fc:	f000 fc98 	bl	8008030 <RCCEx_PLL3_Config>
 8007700:	4603      	mov	r3, r0
 8007702:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007704:	e003      	b.n	800770e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007706:	2301      	movs	r3, #1
 8007708:	75fb      	strb	r3, [r7, #23]
      break;
 800770a:	e000      	b.n	800770e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800770c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800770e:	7dfb      	ldrb	r3, [r7, #23]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d10a      	bne.n	800772a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007714:	4b5e      	ldr	r3, [pc, #376]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8007716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007718:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007722:	495b      	ldr	r1, [pc, #364]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8007724:	4313      	orrs	r3, r2
 8007726:	658b      	str	r3, [r1, #88]	; 0x58
 8007728:	e001      	b.n	800772e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800772a:	7dfb      	ldrb	r3, [r7, #23]
 800772c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007736:	2b00      	cmp	r3, #0
 8007738:	d033      	beq.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007740:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007744:	d01c      	beq.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8007746:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800774a:	d816      	bhi.n	800777a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800774c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007750:	d003      	beq.n	800775a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007752:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007756:	d007      	beq.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8007758:	e00f      	b.n	800777a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800775a:	4b4d      	ldr	r3, [pc, #308]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800775c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800775e:	4a4c      	ldr	r2, [pc, #304]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8007760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007764:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007766:	e00c      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	3324      	adds	r3, #36	; 0x24
 800776c:	2101      	movs	r1, #1
 800776e:	4618      	mov	r0, r3
 8007770:	f000 fc5e 	bl	8008030 <RCCEx_PLL3_Config>
 8007774:	4603      	mov	r3, r0
 8007776:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007778:	e003      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	75fb      	strb	r3, [r7, #23]
      break;
 800777e:	e000      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8007780:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007782:	7dfb      	ldrb	r3, [r7, #23]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d10a      	bne.n	800779e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007788:	4b41      	ldr	r3, [pc, #260]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800778a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800778c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007796:	493e      	ldr	r1, [pc, #248]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8007798:	4313      	orrs	r3, r2
 800779a:	654b      	str	r3, [r1, #84]	; 0x54
 800779c:	e001      	b.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800779e:	7dfb      	ldrb	r3, [r7, #23]
 80077a0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d029      	beq.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d003      	beq.n	80077be <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80077b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077ba:	d007      	beq.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80077bc:	e00f      	b.n	80077de <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077be:	4b34      	ldr	r3, [pc, #208]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80077c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c2:	4a33      	ldr	r2, [pc, #204]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80077c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80077ca:	e00b      	b.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	3304      	adds	r3, #4
 80077d0:	2102      	movs	r1, #2
 80077d2:	4618      	mov	r0, r3
 80077d4:	f000 fb7a 	bl	8007ecc <RCCEx_PLL2_Config>
 80077d8:	4603      	mov	r3, r0
 80077da:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80077dc:	e002      	b.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	75fb      	strb	r3, [r7, #23]
      break;
 80077e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077e4:	7dfb      	ldrb	r3, [r7, #23]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d109      	bne.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80077ea:	4b29      	ldr	r3, [pc, #164]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80077ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077f6:	4926      	ldr	r1, [pc, #152]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80077f8:	4313      	orrs	r3, r2
 80077fa:	64cb      	str	r3, [r1, #76]	; 0x4c
 80077fc:	e001      	b.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077fe:	7dfb      	ldrb	r3, [r7, #23]
 8007800:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800780a:	2b00      	cmp	r3, #0
 800780c:	d00a      	beq.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	3324      	adds	r3, #36	; 0x24
 8007812:	2102      	movs	r1, #2
 8007814:	4618      	mov	r0, r3
 8007816:	f000 fc0b 	bl	8008030 <RCCEx_PLL3_Config>
 800781a:	4603      	mov	r3, r0
 800781c:	2b00      	cmp	r3, #0
 800781e:	d001      	beq.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 8007820:	2301      	movs	r3, #1
 8007822:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800782c:	2b00      	cmp	r3, #0
 800782e:	d033      	beq.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007834:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007838:	d017      	beq.n	800786a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800783a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800783e:	d811      	bhi.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007840:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007844:	d013      	beq.n	800786e <HAL_RCCEx_PeriphCLKConfig+0xd12>
 8007846:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800784a:	d80b      	bhi.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800784c:	2b00      	cmp	r3, #0
 800784e:	d010      	beq.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 8007850:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007854:	d106      	bne.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007856:	4b0e      	ldr	r3, [pc, #56]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8007858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800785a:	4a0d      	ldr	r2, [pc, #52]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800785c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007860:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007862:	e007      	b.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007864:	2301      	movs	r3, #1
 8007866:	75fb      	strb	r3, [r7, #23]
      break;
 8007868:	e004      	b.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800786a:	bf00      	nop
 800786c:	e002      	b.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800786e:	bf00      	nop
 8007870:	e000      	b.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8007872:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007874:	7dfb      	ldrb	r3, [r7, #23]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d10c      	bne.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800787a:	4b05      	ldr	r3, [pc, #20]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800787c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800787e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007886:	4902      	ldr	r1, [pc, #8]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8007888:	4313      	orrs	r3, r2
 800788a:	654b      	str	r3, [r1, #84]	; 0x54
 800788c:	e004      	b.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 800788e:	bf00      	nop
 8007890:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007894:	7dfb      	ldrb	r3, [r7, #23]
 8007896:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d008      	beq.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80078a4:	4b29      	ldr	r3, [pc, #164]	; (800794c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80078a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078b0:	4926      	ldr	r1, [pc, #152]	; (800794c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80078b2:	4313      	orrs	r3, r2
 80078b4:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d008      	beq.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80078c2:	4b22      	ldr	r3, [pc, #136]	; (800794c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80078c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078c6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078ce:	491f      	ldr	r1, [pc, #124]	; (800794c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80078d0:	4313      	orrs	r3, r2
 80078d2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d00d      	beq.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80078e0:	4b1a      	ldr	r3, [pc, #104]	; (800794c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80078e2:	691b      	ldr	r3, [r3, #16]
 80078e4:	4a19      	ldr	r2, [pc, #100]	; (800794c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80078e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80078ea:	6113      	str	r3, [r2, #16]
 80078ec:	4b17      	ldr	r3, [pc, #92]	; (800794c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80078ee:	691a      	ldr	r2, [r3, #16]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80078f6:	4915      	ldr	r1, [pc, #84]	; (800794c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80078f8:	4313      	orrs	r3, r2
 80078fa:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	2b00      	cmp	r3, #0
 8007902:	da08      	bge.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007904:	4b11      	ldr	r3, [pc, #68]	; (800794c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007908:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007910:	490e      	ldr	r1, [pc, #56]	; (800794c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007912:	4313      	orrs	r3, r2
 8007914:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800791e:	2b00      	cmp	r3, #0
 8007920:	d009      	beq.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007922:	4b0a      	ldr	r3, [pc, #40]	; (800794c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007926:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007930:	4906      	ldr	r1, [pc, #24]	; (800794c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007932:	4313      	orrs	r3, r2
 8007934:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007936:	7dbb      	ldrb	r3, [r7, #22]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d101      	bne.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800793c:	2300      	movs	r3, #0
 800793e:	e000      	b.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8007940:	2301      	movs	r3, #1
}
 8007942:	4618      	mov	r0, r3
 8007944:	3718      	adds	r7, #24
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop
 800794c:	58024400 	.word	0x58024400

08007950 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007954:	f7ff f8a6 	bl	8006aa4 <HAL_RCC_GetHCLKFreq>
 8007958:	4602      	mov	r2, r0
 800795a:	4b06      	ldr	r3, [pc, #24]	; (8007974 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800795c:	6a1b      	ldr	r3, [r3, #32]
 800795e:	091b      	lsrs	r3, r3, #4
 8007960:	f003 0307 	and.w	r3, r3, #7
 8007964:	4904      	ldr	r1, [pc, #16]	; (8007978 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007966:	5ccb      	ldrb	r3, [r1, r3]
 8007968:	f003 031f 	and.w	r3, r3, #31
 800796c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007970:	4618      	mov	r0, r3
 8007972:	bd80      	pop	{r7, pc}
 8007974:	58024400 	.word	0x58024400
 8007978:	0800b500 	.word	0x0800b500

0800797c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800797c:	b480      	push	{r7}
 800797e:	b089      	sub	sp, #36	; 0x24
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007984:	4ba1      	ldr	r3, [pc, #644]	; (8007c0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007988:	f003 0303 	and.w	r3, r3, #3
 800798c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800798e:	4b9f      	ldr	r3, [pc, #636]	; (8007c0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007992:	0b1b      	lsrs	r3, r3, #12
 8007994:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007998:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800799a:	4b9c      	ldr	r3, [pc, #624]	; (8007c0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800799c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800799e:	091b      	lsrs	r3, r3, #4
 80079a0:	f003 0301 	and.w	r3, r3, #1
 80079a4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80079a6:	4b99      	ldr	r3, [pc, #612]	; (8007c0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079aa:	08db      	lsrs	r3, r3, #3
 80079ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80079b0:	693a      	ldr	r2, [r7, #16]
 80079b2:	fb02 f303 	mul.w	r3, r2, r3
 80079b6:	ee07 3a90 	vmov	s15, r3
 80079ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	f000 8111 	beq.w	8007bec <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80079ca:	69bb      	ldr	r3, [r7, #24]
 80079cc:	2b02      	cmp	r3, #2
 80079ce:	f000 8083 	beq.w	8007ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80079d2:	69bb      	ldr	r3, [r7, #24]
 80079d4:	2b02      	cmp	r3, #2
 80079d6:	f200 80a1 	bhi.w	8007b1c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80079da:	69bb      	ldr	r3, [r7, #24]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d003      	beq.n	80079e8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80079e0:	69bb      	ldr	r3, [r7, #24]
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d056      	beq.n	8007a94 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80079e6:	e099      	b.n	8007b1c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079e8:	4b88      	ldr	r3, [pc, #544]	; (8007c0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f003 0320 	and.w	r3, r3, #32
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d02d      	beq.n	8007a50 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80079f4:	4b85      	ldr	r3, [pc, #532]	; (8007c0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	08db      	lsrs	r3, r3, #3
 80079fa:	f003 0303 	and.w	r3, r3, #3
 80079fe:	4a84      	ldr	r2, [pc, #528]	; (8007c10 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007a00:	fa22 f303 	lsr.w	r3, r2, r3
 8007a04:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	ee07 3a90 	vmov	s15, r3
 8007a0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	ee07 3a90 	vmov	s15, r3
 8007a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a1e:	4b7b      	ldr	r3, [pc, #492]	; (8007c0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a26:	ee07 3a90 	vmov	s15, r3
 8007a2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a32:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007c14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a4a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007a4e:	e087      	b.n	8007b60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	ee07 3a90 	vmov	s15, r3
 8007a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a5a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007c18 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007a5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a62:	4b6a      	ldr	r3, [pc, #424]	; (8007c0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a6a:	ee07 3a90 	vmov	s15, r3
 8007a6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a72:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a76:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007c14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007a92:	e065      	b.n	8007b60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	ee07 3a90 	vmov	s15, r3
 8007a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a9e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007c1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007aa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007aa6:	4b59      	ldr	r3, [pc, #356]	; (8007c0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aae:	ee07 3a90 	vmov	s15, r3
 8007ab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ab6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007aba:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007c14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007abe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ac6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007aca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ad2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ad6:	e043      	b.n	8007b60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	ee07 3a90 	vmov	s15, r3
 8007ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ae2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007c20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007ae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007aea:	4b48      	ldr	r3, [pc, #288]	; (8007c0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007af2:	ee07 3a90 	vmov	s15, r3
 8007af6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007afa:	ed97 6a03 	vldr	s12, [r7, #12]
 8007afe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007c14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007b02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b1a:	e021      	b.n	8007b60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	ee07 3a90 	vmov	s15, r3
 8007b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b26:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007c1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b2e:	4b37      	ldr	r3, [pc, #220]	; (8007c0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b36:	ee07 3a90 	vmov	s15, r3
 8007b3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b42:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007c14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007b46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b5e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007b60:	4b2a      	ldr	r3, [pc, #168]	; (8007c0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b64:	0a5b      	lsrs	r3, r3, #9
 8007b66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b6a:	ee07 3a90 	vmov	s15, r3
 8007b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b86:	ee17 2a90 	vmov	r2, s15
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007b8e:	4b1f      	ldr	r3, [pc, #124]	; (8007c0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b92:	0c1b      	lsrs	r3, r3, #16
 8007b94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b98:	ee07 3a90 	vmov	s15, r3
 8007b9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ba0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ba4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ba8:	edd7 6a07 	vldr	s13, [r7, #28]
 8007bac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bb4:	ee17 2a90 	vmov	r2, s15
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007bbc:	4b13      	ldr	r3, [pc, #76]	; (8007c0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc0:	0e1b      	lsrs	r3, r3, #24
 8007bc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bc6:	ee07 3a90 	vmov	s15, r3
 8007bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007bd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007bd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007bda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007be2:	ee17 2a90 	vmov	r2, s15
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007bea:	e008      	b.n	8007bfe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	609a      	str	r2, [r3, #8]
}
 8007bfe:	bf00      	nop
 8007c00:	3724      	adds	r7, #36	; 0x24
 8007c02:	46bd      	mov	sp, r7
 8007c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c08:	4770      	bx	lr
 8007c0a:	bf00      	nop
 8007c0c:	58024400 	.word	0x58024400
 8007c10:	03d09000 	.word	0x03d09000
 8007c14:	46000000 	.word	0x46000000
 8007c18:	4c742400 	.word	0x4c742400
 8007c1c:	4a742400 	.word	0x4a742400
 8007c20:	4af42400 	.word	0x4af42400

08007c24 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b089      	sub	sp, #36	; 0x24
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007c2c:	4ba1      	ldr	r3, [pc, #644]	; (8007eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c30:	f003 0303 	and.w	r3, r3, #3
 8007c34:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007c36:	4b9f      	ldr	r3, [pc, #636]	; (8007eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c3a:	0d1b      	lsrs	r3, r3, #20
 8007c3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c40:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007c42:	4b9c      	ldr	r3, [pc, #624]	; (8007eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c46:	0a1b      	lsrs	r3, r3, #8
 8007c48:	f003 0301 	and.w	r3, r3, #1
 8007c4c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007c4e:	4b99      	ldr	r3, [pc, #612]	; (8007eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c52:	08db      	lsrs	r3, r3, #3
 8007c54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c58:	693a      	ldr	r2, [r7, #16]
 8007c5a:	fb02 f303 	mul.w	r3, r2, r3
 8007c5e:	ee07 3a90 	vmov	s15, r3
 8007c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c66:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	f000 8111 	beq.w	8007e94 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	2b02      	cmp	r3, #2
 8007c76:	f000 8083 	beq.w	8007d80 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007c7a:	69bb      	ldr	r3, [r7, #24]
 8007c7c:	2b02      	cmp	r3, #2
 8007c7e:	f200 80a1 	bhi.w	8007dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007c82:	69bb      	ldr	r3, [r7, #24]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d003      	beq.n	8007c90 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007c88:	69bb      	ldr	r3, [r7, #24]
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d056      	beq.n	8007d3c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007c8e:	e099      	b.n	8007dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c90:	4b88      	ldr	r3, [pc, #544]	; (8007eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f003 0320 	and.w	r3, r3, #32
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d02d      	beq.n	8007cf8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007c9c:	4b85      	ldr	r3, [pc, #532]	; (8007eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	08db      	lsrs	r3, r3, #3
 8007ca2:	f003 0303 	and.w	r3, r3, #3
 8007ca6:	4a84      	ldr	r2, [pc, #528]	; (8007eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8007cac:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	ee07 3a90 	vmov	s15, r3
 8007cb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	ee07 3a90 	vmov	s15, r3
 8007cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cc6:	4b7b      	ldr	r3, [pc, #492]	; (8007eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cce:	ee07 3a90 	vmov	s15, r3
 8007cd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cda:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007ebc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007cde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ce6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cf2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007cf6:	e087      	b.n	8007e08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	ee07 3a90 	vmov	s15, r3
 8007cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d02:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007d06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d0a:	4b6a      	ldr	r3, [pc, #424]	; (8007eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d12:	ee07 3a90 	vmov	s15, r3
 8007d16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d1e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007ebc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007d3a:	e065      	b.n	8007e08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	ee07 3a90 	vmov	s15, r3
 8007d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d46:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007d4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d4e:	4b59      	ldr	r3, [pc, #356]	; (8007eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d56:	ee07 3a90 	vmov	s15, r3
 8007d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d62:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007ebc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007d7e:	e043      	b.n	8007e08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	ee07 3a90 	vmov	s15, r3
 8007d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d8a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007d8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d92:	4b48      	ldr	r3, [pc, #288]	; (8007eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d9a:	ee07 3a90 	vmov	s15, r3
 8007d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007da2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007da6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007ebc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007daa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007db2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007db6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dbe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007dc2:	e021      	b.n	8007e08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	ee07 3a90 	vmov	s15, r3
 8007dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007dd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dd6:	4b37      	ldr	r3, [pc, #220]	; (8007eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dde:	ee07 3a90 	vmov	s15, r3
 8007de2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007de6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dea:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007ebc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007dee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007df2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007df6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007dfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e06:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007e08:	4b2a      	ldr	r3, [pc, #168]	; (8007eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e0c:	0a5b      	lsrs	r3, r3, #9
 8007e0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e12:	ee07 3a90 	vmov	s15, r3
 8007e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e22:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e2e:	ee17 2a90 	vmov	r2, s15
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007e36:	4b1f      	ldr	r3, [pc, #124]	; (8007eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e3a:	0c1b      	lsrs	r3, r3, #16
 8007e3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e40:	ee07 3a90 	vmov	s15, r3
 8007e44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e50:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e5c:	ee17 2a90 	vmov	r2, s15
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007e64:	4b13      	ldr	r3, [pc, #76]	; (8007eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e68:	0e1b      	lsrs	r3, r3, #24
 8007e6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e6e:	ee07 3a90 	vmov	s15, r3
 8007e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e8a:	ee17 2a90 	vmov	r2, s15
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007e92:	e008      	b.n	8007ea6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2200      	movs	r2, #0
 8007e98:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	609a      	str	r2, [r3, #8]
}
 8007ea6:	bf00      	nop
 8007ea8:	3724      	adds	r7, #36	; 0x24
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb0:	4770      	bx	lr
 8007eb2:	bf00      	nop
 8007eb4:	58024400 	.word	0x58024400
 8007eb8:	03d09000 	.word	0x03d09000
 8007ebc:	46000000 	.word	0x46000000
 8007ec0:	4c742400 	.word	0x4c742400
 8007ec4:	4a742400 	.word	0x4a742400
 8007ec8:	4af42400 	.word	0x4af42400

08007ecc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007eda:	4b53      	ldr	r3, [pc, #332]	; (8008028 <RCCEx_PLL2_Config+0x15c>)
 8007edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ede:	f003 0303 	and.w	r3, r3, #3
 8007ee2:	2b03      	cmp	r3, #3
 8007ee4:	d101      	bne.n	8007eea <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e099      	b.n	800801e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007eea:	4b4f      	ldr	r3, [pc, #316]	; (8008028 <RCCEx_PLL2_Config+0x15c>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a4e      	ldr	r2, [pc, #312]	; (8008028 <RCCEx_PLL2_Config+0x15c>)
 8007ef0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007ef4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ef6:	f7fa fd35 	bl	8002964 <HAL_GetTick>
 8007efa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007efc:	e008      	b.n	8007f10 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007efe:	f7fa fd31 	bl	8002964 <HAL_GetTick>
 8007f02:	4602      	mov	r2, r0
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	1ad3      	subs	r3, r2, r3
 8007f08:	2b02      	cmp	r3, #2
 8007f0a:	d901      	bls.n	8007f10 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007f0c:	2303      	movs	r3, #3
 8007f0e:	e086      	b.n	800801e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007f10:	4b45      	ldr	r3, [pc, #276]	; (8008028 <RCCEx_PLL2_Config+0x15c>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d1f0      	bne.n	8007efe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007f1c:	4b42      	ldr	r3, [pc, #264]	; (8008028 <RCCEx_PLL2_Config+0x15c>)
 8007f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f20:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	031b      	lsls	r3, r3, #12
 8007f2a:	493f      	ldr	r1, [pc, #252]	; (8008028 <RCCEx_PLL2_Config+0x15c>)
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	628b      	str	r3, [r1, #40]	; 0x28
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	3b01      	subs	r3, #1
 8007f36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	689b      	ldr	r3, [r3, #8]
 8007f3e:	3b01      	subs	r3, #1
 8007f40:	025b      	lsls	r3, r3, #9
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	431a      	orrs	r2, r3
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	68db      	ldr	r3, [r3, #12]
 8007f4a:	3b01      	subs	r3, #1
 8007f4c:	041b      	lsls	r3, r3, #16
 8007f4e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007f52:	431a      	orrs	r2, r3
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	691b      	ldr	r3, [r3, #16]
 8007f58:	3b01      	subs	r3, #1
 8007f5a:	061b      	lsls	r3, r3, #24
 8007f5c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007f60:	4931      	ldr	r1, [pc, #196]	; (8008028 <RCCEx_PLL2_Config+0x15c>)
 8007f62:	4313      	orrs	r3, r2
 8007f64:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007f66:	4b30      	ldr	r3, [pc, #192]	; (8008028 <RCCEx_PLL2_Config+0x15c>)
 8007f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f6a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	695b      	ldr	r3, [r3, #20]
 8007f72:	492d      	ldr	r1, [pc, #180]	; (8008028 <RCCEx_PLL2_Config+0x15c>)
 8007f74:	4313      	orrs	r3, r2
 8007f76:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007f78:	4b2b      	ldr	r3, [pc, #172]	; (8008028 <RCCEx_PLL2_Config+0x15c>)
 8007f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f7c:	f023 0220 	bic.w	r2, r3, #32
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	699b      	ldr	r3, [r3, #24]
 8007f84:	4928      	ldr	r1, [pc, #160]	; (8008028 <RCCEx_PLL2_Config+0x15c>)
 8007f86:	4313      	orrs	r3, r2
 8007f88:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007f8a:	4b27      	ldr	r3, [pc, #156]	; (8008028 <RCCEx_PLL2_Config+0x15c>)
 8007f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f8e:	4a26      	ldr	r2, [pc, #152]	; (8008028 <RCCEx_PLL2_Config+0x15c>)
 8007f90:	f023 0310 	bic.w	r3, r3, #16
 8007f94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007f96:	4b24      	ldr	r3, [pc, #144]	; (8008028 <RCCEx_PLL2_Config+0x15c>)
 8007f98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f9a:	4b24      	ldr	r3, [pc, #144]	; (800802c <RCCEx_PLL2_Config+0x160>)
 8007f9c:	4013      	ands	r3, r2
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	69d2      	ldr	r2, [r2, #28]
 8007fa2:	00d2      	lsls	r2, r2, #3
 8007fa4:	4920      	ldr	r1, [pc, #128]	; (8008028 <RCCEx_PLL2_Config+0x15c>)
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007faa:	4b1f      	ldr	r3, [pc, #124]	; (8008028 <RCCEx_PLL2_Config+0x15c>)
 8007fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fae:	4a1e      	ldr	r2, [pc, #120]	; (8008028 <RCCEx_PLL2_Config+0x15c>)
 8007fb0:	f043 0310 	orr.w	r3, r3, #16
 8007fb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d106      	bne.n	8007fca <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007fbc:	4b1a      	ldr	r3, [pc, #104]	; (8008028 <RCCEx_PLL2_Config+0x15c>)
 8007fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc0:	4a19      	ldr	r2, [pc, #100]	; (8008028 <RCCEx_PLL2_Config+0x15c>)
 8007fc2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007fc6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007fc8:	e00f      	b.n	8007fea <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d106      	bne.n	8007fde <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007fd0:	4b15      	ldr	r3, [pc, #84]	; (8008028 <RCCEx_PLL2_Config+0x15c>)
 8007fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fd4:	4a14      	ldr	r2, [pc, #80]	; (8008028 <RCCEx_PLL2_Config+0x15c>)
 8007fd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007fda:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007fdc:	e005      	b.n	8007fea <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007fde:	4b12      	ldr	r3, [pc, #72]	; (8008028 <RCCEx_PLL2_Config+0x15c>)
 8007fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe2:	4a11      	ldr	r2, [pc, #68]	; (8008028 <RCCEx_PLL2_Config+0x15c>)
 8007fe4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007fe8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007fea:	4b0f      	ldr	r3, [pc, #60]	; (8008028 <RCCEx_PLL2_Config+0x15c>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a0e      	ldr	r2, [pc, #56]	; (8008028 <RCCEx_PLL2_Config+0x15c>)
 8007ff0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007ff4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ff6:	f7fa fcb5 	bl	8002964 <HAL_GetTick>
 8007ffa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007ffc:	e008      	b.n	8008010 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007ffe:	f7fa fcb1 	bl	8002964 <HAL_GetTick>
 8008002:	4602      	mov	r2, r0
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	1ad3      	subs	r3, r2, r3
 8008008:	2b02      	cmp	r3, #2
 800800a:	d901      	bls.n	8008010 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800800c:	2303      	movs	r3, #3
 800800e:	e006      	b.n	800801e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008010:	4b05      	ldr	r3, [pc, #20]	; (8008028 <RCCEx_PLL2_Config+0x15c>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008018:	2b00      	cmp	r3, #0
 800801a:	d0f0      	beq.n	8007ffe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800801c:	7bfb      	ldrb	r3, [r7, #15]
}
 800801e:	4618      	mov	r0, r3
 8008020:	3710      	adds	r7, #16
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}
 8008026:	bf00      	nop
 8008028:	58024400 	.word	0x58024400
 800802c:	ffff0007 	.word	0xffff0007

08008030 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b084      	sub	sp, #16
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800803a:	2300      	movs	r3, #0
 800803c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800803e:	4b53      	ldr	r3, [pc, #332]	; (800818c <RCCEx_PLL3_Config+0x15c>)
 8008040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008042:	f003 0303 	and.w	r3, r3, #3
 8008046:	2b03      	cmp	r3, #3
 8008048:	d101      	bne.n	800804e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	e099      	b.n	8008182 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800804e:	4b4f      	ldr	r3, [pc, #316]	; (800818c <RCCEx_PLL3_Config+0x15c>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a4e      	ldr	r2, [pc, #312]	; (800818c <RCCEx_PLL3_Config+0x15c>)
 8008054:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008058:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800805a:	f7fa fc83 	bl	8002964 <HAL_GetTick>
 800805e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008060:	e008      	b.n	8008074 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008062:	f7fa fc7f 	bl	8002964 <HAL_GetTick>
 8008066:	4602      	mov	r2, r0
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	1ad3      	subs	r3, r2, r3
 800806c:	2b02      	cmp	r3, #2
 800806e:	d901      	bls.n	8008074 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008070:	2303      	movs	r3, #3
 8008072:	e086      	b.n	8008182 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008074:	4b45      	ldr	r3, [pc, #276]	; (800818c <RCCEx_PLL3_Config+0x15c>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800807c:	2b00      	cmp	r3, #0
 800807e:	d1f0      	bne.n	8008062 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008080:	4b42      	ldr	r3, [pc, #264]	; (800818c <RCCEx_PLL3_Config+0x15c>)
 8008082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008084:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	051b      	lsls	r3, r3, #20
 800808e:	493f      	ldr	r1, [pc, #252]	; (800818c <RCCEx_PLL3_Config+0x15c>)
 8008090:	4313      	orrs	r3, r2
 8008092:	628b      	str	r3, [r1, #40]	; 0x28
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	3b01      	subs	r3, #1
 800809a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	3b01      	subs	r3, #1
 80080a4:	025b      	lsls	r3, r3, #9
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	431a      	orrs	r2, r3
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	68db      	ldr	r3, [r3, #12]
 80080ae:	3b01      	subs	r3, #1
 80080b0:	041b      	lsls	r3, r3, #16
 80080b2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80080b6:	431a      	orrs	r2, r3
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	691b      	ldr	r3, [r3, #16]
 80080bc:	3b01      	subs	r3, #1
 80080be:	061b      	lsls	r3, r3, #24
 80080c0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80080c4:	4931      	ldr	r1, [pc, #196]	; (800818c <RCCEx_PLL3_Config+0x15c>)
 80080c6:	4313      	orrs	r3, r2
 80080c8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80080ca:	4b30      	ldr	r3, [pc, #192]	; (800818c <RCCEx_PLL3_Config+0x15c>)
 80080cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	695b      	ldr	r3, [r3, #20]
 80080d6:	492d      	ldr	r1, [pc, #180]	; (800818c <RCCEx_PLL3_Config+0x15c>)
 80080d8:	4313      	orrs	r3, r2
 80080da:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80080dc:	4b2b      	ldr	r3, [pc, #172]	; (800818c <RCCEx_PLL3_Config+0x15c>)
 80080de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080e0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	699b      	ldr	r3, [r3, #24]
 80080e8:	4928      	ldr	r1, [pc, #160]	; (800818c <RCCEx_PLL3_Config+0x15c>)
 80080ea:	4313      	orrs	r3, r2
 80080ec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80080ee:	4b27      	ldr	r3, [pc, #156]	; (800818c <RCCEx_PLL3_Config+0x15c>)
 80080f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f2:	4a26      	ldr	r2, [pc, #152]	; (800818c <RCCEx_PLL3_Config+0x15c>)
 80080f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80080fa:	4b24      	ldr	r3, [pc, #144]	; (800818c <RCCEx_PLL3_Config+0x15c>)
 80080fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080fe:	4b24      	ldr	r3, [pc, #144]	; (8008190 <RCCEx_PLL3_Config+0x160>)
 8008100:	4013      	ands	r3, r2
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	69d2      	ldr	r2, [r2, #28]
 8008106:	00d2      	lsls	r2, r2, #3
 8008108:	4920      	ldr	r1, [pc, #128]	; (800818c <RCCEx_PLL3_Config+0x15c>)
 800810a:	4313      	orrs	r3, r2
 800810c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800810e:	4b1f      	ldr	r3, [pc, #124]	; (800818c <RCCEx_PLL3_Config+0x15c>)
 8008110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008112:	4a1e      	ldr	r2, [pc, #120]	; (800818c <RCCEx_PLL3_Config+0x15c>)
 8008114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008118:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d106      	bne.n	800812e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008120:	4b1a      	ldr	r3, [pc, #104]	; (800818c <RCCEx_PLL3_Config+0x15c>)
 8008122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008124:	4a19      	ldr	r2, [pc, #100]	; (800818c <RCCEx_PLL3_Config+0x15c>)
 8008126:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800812a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800812c:	e00f      	b.n	800814e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	2b01      	cmp	r3, #1
 8008132:	d106      	bne.n	8008142 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008134:	4b15      	ldr	r3, [pc, #84]	; (800818c <RCCEx_PLL3_Config+0x15c>)
 8008136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008138:	4a14      	ldr	r2, [pc, #80]	; (800818c <RCCEx_PLL3_Config+0x15c>)
 800813a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800813e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008140:	e005      	b.n	800814e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008142:	4b12      	ldr	r3, [pc, #72]	; (800818c <RCCEx_PLL3_Config+0x15c>)
 8008144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008146:	4a11      	ldr	r2, [pc, #68]	; (800818c <RCCEx_PLL3_Config+0x15c>)
 8008148:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800814c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800814e:	4b0f      	ldr	r3, [pc, #60]	; (800818c <RCCEx_PLL3_Config+0x15c>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a0e      	ldr	r2, [pc, #56]	; (800818c <RCCEx_PLL3_Config+0x15c>)
 8008154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008158:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800815a:	f7fa fc03 	bl	8002964 <HAL_GetTick>
 800815e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008160:	e008      	b.n	8008174 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008162:	f7fa fbff 	bl	8002964 <HAL_GetTick>
 8008166:	4602      	mov	r2, r0
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	1ad3      	subs	r3, r2, r3
 800816c:	2b02      	cmp	r3, #2
 800816e:	d901      	bls.n	8008174 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008170:	2303      	movs	r3, #3
 8008172:	e006      	b.n	8008182 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008174:	4b05      	ldr	r3, [pc, #20]	; (800818c <RCCEx_PLL3_Config+0x15c>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800817c:	2b00      	cmp	r3, #0
 800817e:	d0f0      	beq.n	8008162 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008180:	7bfb      	ldrb	r3, [r7, #15]
}
 8008182:	4618      	mov	r0, r3
 8008184:	3710      	adds	r7, #16
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
 800818a:	bf00      	nop
 800818c:	58024400 	.word	0x58024400
 8008190:	ffff0007 	.word	0xffff0007

08008194 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b082      	sub	sp, #8
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d101      	bne.n	80081a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80081a2:	2301      	movs	r3, #1
 80081a4:	e049      	b.n	800823a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081ac:	b2db      	uxtb	r3, r3
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d106      	bne.n	80081c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2200      	movs	r2, #0
 80081b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f7f9 ff3c 	bl	8002038 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2202      	movs	r2, #2
 80081c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	3304      	adds	r3, #4
 80081d0:	4619      	mov	r1, r3
 80081d2:	4610      	mov	r0, r2
 80081d4:	f000 fd84 	bl	8008ce0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2201      	movs	r2, #1
 80081dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2201      	movs	r2, #1
 80081e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2201      	movs	r2, #1
 80081ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2201      	movs	r2, #1
 80081f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2201      	movs	r2, #1
 80081fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2201      	movs	r2, #1
 8008204:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2201      	movs	r2, #1
 800820c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2201      	movs	r2, #1
 8008214:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2201      	movs	r2, #1
 800821c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2201      	movs	r2, #1
 8008224:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2201      	movs	r2, #1
 800822c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2201      	movs	r2, #1
 8008234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008238:	2300      	movs	r3, #0
}
 800823a:	4618      	mov	r0, r3
 800823c:	3708      	adds	r7, #8
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
	...

08008244 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008244:	b480      	push	{r7}
 8008246:	b085      	sub	sp, #20
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008252:	b2db      	uxtb	r3, r3
 8008254:	2b01      	cmp	r3, #1
 8008256:	d001      	beq.n	800825c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008258:	2301      	movs	r3, #1
 800825a:	e05e      	b.n	800831a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2202      	movs	r2, #2
 8008260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	68da      	ldr	r2, [r3, #12]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f042 0201 	orr.w	r2, r2, #1
 8008272:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a2b      	ldr	r2, [pc, #172]	; (8008328 <HAL_TIM_Base_Start_IT+0xe4>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d02c      	beq.n	80082d8 <HAL_TIM_Base_Start_IT+0x94>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008286:	d027      	beq.n	80082d8 <HAL_TIM_Base_Start_IT+0x94>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a27      	ldr	r2, [pc, #156]	; (800832c <HAL_TIM_Base_Start_IT+0xe8>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d022      	beq.n	80082d8 <HAL_TIM_Base_Start_IT+0x94>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a26      	ldr	r2, [pc, #152]	; (8008330 <HAL_TIM_Base_Start_IT+0xec>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d01d      	beq.n	80082d8 <HAL_TIM_Base_Start_IT+0x94>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a24      	ldr	r2, [pc, #144]	; (8008334 <HAL_TIM_Base_Start_IT+0xf0>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d018      	beq.n	80082d8 <HAL_TIM_Base_Start_IT+0x94>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a23      	ldr	r2, [pc, #140]	; (8008338 <HAL_TIM_Base_Start_IT+0xf4>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d013      	beq.n	80082d8 <HAL_TIM_Base_Start_IT+0x94>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a21      	ldr	r2, [pc, #132]	; (800833c <HAL_TIM_Base_Start_IT+0xf8>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d00e      	beq.n	80082d8 <HAL_TIM_Base_Start_IT+0x94>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a20      	ldr	r2, [pc, #128]	; (8008340 <HAL_TIM_Base_Start_IT+0xfc>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d009      	beq.n	80082d8 <HAL_TIM_Base_Start_IT+0x94>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a1e      	ldr	r2, [pc, #120]	; (8008344 <HAL_TIM_Base_Start_IT+0x100>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d004      	beq.n	80082d8 <HAL_TIM_Base_Start_IT+0x94>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a1d      	ldr	r2, [pc, #116]	; (8008348 <HAL_TIM_Base_Start_IT+0x104>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d115      	bne.n	8008304 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	689a      	ldr	r2, [r3, #8]
 80082de:	4b1b      	ldr	r3, [pc, #108]	; (800834c <HAL_TIM_Base_Start_IT+0x108>)
 80082e0:	4013      	ands	r3, r2
 80082e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2b06      	cmp	r3, #6
 80082e8:	d015      	beq.n	8008316 <HAL_TIM_Base_Start_IT+0xd2>
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082f0:	d011      	beq.n	8008316 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	681a      	ldr	r2, [r3, #0]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f042 0201 	orr.w	r2, r2, #1
 8008300:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008302:	e008      	b.n	8008316 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	681a      	ldr	r2, [r3, #0]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f042 0201 	orr.w	r2, r2, #1
 8008312:	601a      	str	r2, [r3, #0]
 8008314:	e000      	b.n	8008318 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008316:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008318:	2300      	movs	r3, #0
}
 800831a:	4618      	mov	r0, r3
 800831c:	3714      	adds	r7, #20
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr
 8008326:	bf00      	nop
 8008328:	40010000 	.word	0x40010000
 800832c:	40000400 	.word	0x40000400
 8008330:	40000800 	.word	0x40000800
 8008334:	40000c00 	.word	0x40000c00
 8008338:	40010400 	.word	0x40010400
 800833c:	40001800 	.word	0x40001800
 8008340:	40014000 	.word	0x40014000
 8008344:	4000e000 	.word	0x4000e000
 8008348:	4000e400 	.word	0x4000e400
 800834c:	00010007 	.word	0x00010007

08008350 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b082      	sub	sp, #8
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d101      	bne.n	8008362 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800835e:	2301      	movs	r3, #1
 8008360:	e049      	b.n	80083f6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008368:	b2db      	uxtb	r3, r3
 800836a:	2b00      	cmp	r3, #0
 800836c:	d106      	bne.n	800837c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2200      	movs	r2, #0
 8008372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f7f9 ff58 	bl	800222c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2202      	movs	r2, #2
 8008380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681a      	ldr	r2, [r3, #0]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	3304      	adds	r3, #4
 800838c:	4619      	mov	r1, r3
 800838e:	4610      	mov	r0, r2
 8008390:	f000 fca6 	bl	8008ce0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2201      	movs	r2, #1
 8008398:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2201      	movs	r2, #1
 80083a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2201      	movs	r2, #1
 80083a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2201      	movs	r2, #1
 80083b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2201      	movs	r2, #1
 80083b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2201      	movs	r2, #1
 80083c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2201      	movs	r2, #1
 80083c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2201      	movs	r2, #1
 80083d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2201      	movs	r2, #1
 80083d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2201      	movs	r2, #1
 80083e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2201      	movs	r2, #1
 80083e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2201      	movs	r2, #1
 80083f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80083f4:	2300      	movs	r3, #0
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3708      	adds	r7, #8
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
	...

08008400 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b084      	sub	sp, #16
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d109      	bne.n	8008424 <HAL_TIM_PWM_Start+0x24>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008416:	b2db      	uxtb	r3, r3
 8008418:	2b01      	cmp	r3, #1
 800841a:	bf14      	ite	ne
 800841c:	2301      	movne	r3, #1
 800841e:	2300      	moveq	r3, #0
 8008420:	b2db      	uxtb	r3, r3
 8008422:	e03c      	b.n	800849e <HAL_TIM_PWM_Start+0x9e>
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	2b04      	cmp	r3, #4
 8008428:	d109      	bne.n	800843e <HAL_TIM_PWM_Start+0x3e>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008430:	b2db      	uxtb	r3, r3
 8008432:	2b01      	cmp	r3, #1
 8008434:	bf14      	ite	ne
 8008436:	2301      	movne	r3, #1
 8008438:	2300      	moveq	r3, #0
 800843a:	b2db      	uxtb	r3, r3
 800843c:	e02f      	b.n	800849e <HAL_TIM_PWM_Start+0x9e>
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	2b08      	cmp	r3, #8
 8008442:	d109      	bne.n	8008458 <HAL_TIM_PWM_Start+0x58>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800844a:	b2db      	uxtb	r3, r3
 800844c:	2b01      	cmp	r3, #1
 800844e:	bf14      	ite	ne
 8008450:	2301      	movne	r3, #1
 8008452:	2300      	moveq	r3, #0
 8008454:	b2db      	uxtb	r3, r3
 8008456:	e022      	b.n	800849e <HAL_TIM_PWM_Start+0x9e>
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	2b0c      	cmp	r3, #12
 800845c:	d109      	bne.n	8008472 <HAL_TIM_PWM_Start+0x72>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008464:	b2db      	uxtb	r3, r3
 8008466:	2b01      	cmp	r3, #1
 8008468:	bf14      	ite	ne
 800846a:	2301      	movne	r3, #1
 800846c:	2300      	moveq	r3, #0
 800846e:	b2db      	uxtb	r3, r3
 8008470:	e015      	b.n	800849e <HAL_TIM_PWM_Start+0x9e>
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	2b10      	cmp	r3, #16
 8008476:	d109      	bne.n	800848c <HAL_TIM_PWM_Start+0x8c>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800847e:	b2db      	uxtb	r3, r3
 8008480:	2b01      	cmp	r3, #1
 8008482:	bf14      	ite	ne
 8008484:	2301      	movne	r3, #1
 8008486:	2300      	moveq	r3, #0
 8008488:	b2db      	uxtb	r3, r3
 800848a:	e008      	b.n	800849e <HAL_TIM_PWM_Start+0x9e>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008492:	b2db      	uxtb	r3, r3
 8008494:	2b01      	cmp	r3, #1
 8008496:	bf14      	ite	ne
 8008498:	2301      	movne	r3, #1
 800849a:	2300      	moveq	r3, #0
 800849c:	b2db      	uxtb	r3, r3
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d001      	beq.n	80084a6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80084a2:	2301      	movs	r3, #1
 80084a4:	e0ab      	b.n	80085fe <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d104      	bne.n	80084b6 <HAL_TIM_PWM_Start+0xb6>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2202      	movs	r2, #2
 80084b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80084b4:	e023      	b.n	80084fe <HAL_TIM_PWM_Start+0xfe>
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	2b04      	cmp	r3, #4
 80084ba:	d104      	bne.n	80084c6 <HAL_TIM_PWM_Start+0xc6>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2202      	movs	r2, #2
 80084c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80084c4:	e01b      	b.n	80084fe <HAL_TIM_PWM_Start+0xfe>
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	2b08      	cmp	r3, #8
 80084ca:	d104      	bne.n	80084d6 <HAL_TIM_PWM_Start+0xd6>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2202      	movs	r2, #2
 80084d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80084d4:	e013      	b.n	80084fe <HAL_TIM_PWM_Start+0xfe>
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	2b0c      	cmp	r3, #12
 80084da:	d104      	bne.n	80084e6 <HAL_TIM_PWM_Start+0xe6>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2202      	movs	r2, #2
 80084e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80084e4:	e00b      	b.n	80084fe <HAL_TIM_PWM_Start+0xfe>
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	2b10      	cmp	r3, #16
 80084ea:	d104      	bne.n	80084f6 <HAL_TIM_PWM_Start+0xf6>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2202      	movs	r2, #2
 80084f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80084f4:	e003      	b.n	80084fe <HAL_TIM_PWM_Start+0xfe>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2202      	movs	r2, #2
 80084fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	2201      	movs	r2, #1
 8008504:	6839      	ldr	r1, [r7, #0]
 8008506:	4618      	mov	r0, r3
 8008508:	f001 f804 	bl	8009514 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a3d      	ldr	r2, [pc, #244]	; (8008608 <HAL_TIM_PWM_Start+0x208>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d013      	beq.n	800853e <HAL_TIM_PWM_Start+0x13e>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a3c      	ldr	r2, [pc, #240]	; (800860c <HAL_TIM_PWM_Start+0x20c>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d00e      	beq.n	800853e <HAL_TIM_PWM_Start+0x13e>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a3a      	ldr	r2, [pc, #232]	; (8008610 <HAL_TIM_PWM_Start+0x210>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d009      	beq.n	800853e <HAL_TIM_PWM_Start+0x13e>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a39      	ldr	r2, [pc, #228]	; (8008614 <HAL_TIM_PWM_Start+0x214>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d004      	beq.n	800853e <HAL_TIM_PWM_Start+0x13e>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a37      	ldr	r2, [pc, #220]	; (8008618 <HAL_TIM_PWM_Start+0x218>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d101      	bne.n	8008542 <HAL_TIM_PWM_Start+0x142>
 800853e:	2301      	movs	r3, #1
 8008540:	e000      	b.n	8008544 <HAL_TIM_PWM_Start+0x144>
 8008542:	2300      	movs	r3, #0
 8008544:	2b00      	cmp	r3, #0
 8008546:	d007      	beq.n	8008558 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008556:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a2a      	ldr	r2, [pc, #168]	; (8008608 <HAL_TIM_PWM_Start+0x208>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d02c      	beq.n	80085bc <HAL_TIM_PWM_Start+0x1bc>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800856a:	d027      	beq.n	80085bc <HAL_TIM_PWM_Start+0x1bc>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a2a      	ldr	r2, [pc, #168]	; (800861c <HAL_TIM_PWM_Start+0x21c>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d022      	beq.n	80085bc <HAL_TIM_PWM_Start+0x1bc>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a29      	ldr	r2, [pc, #164]	; (8008620 <HAL_TIM_PWM_Start+0x220>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d01d      	beq.n	80085bc <HAL_TIM_PWM_Start+0x1bc>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a27      	ldr	r2, [pc, #156]	; (8008624 <HAL_TIM_PWM_Start+0x224>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d018      	beq.n	80085bc <HAL_TIM_PWM_Start+0x1bc>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a1f      	ldr	r2, [pc, #124]	; (800860c <HAL_TIM_PWM_Start+0x20c>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d013      	beq.n	80085bc <HAL_TIM_PWM_Start+0x1bc>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a23      	ldr	r2, [pc, #140]	; (8008628 <HAL_TIM_PWM_Start+0x228>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d00e      	beq.n	80085bc <HAL_TIM_PWM_Start+0x1bc>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4a1b      	ldr	r2, [pc, #108]	; (8008610 <HAL_TIM_PWM_Start+0x210>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d009      	beq.n	80085bc <HAL_TIM_PWM_Start+0x1bc>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a1f      	ldr	r2, [pc, #124]	; (800862c <HAL_TIM_PWM_Start+0x22c>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d004      	beq.n	80085bc <HAL_TIM_PWM_Start+0x1bc>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a1e      	ldr	r2, [pc, #120]	; (8008630 <HAL_TIM_PWM_Start+0x230>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d115      	bne.n	80085e8 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	689a      	ldr	r2, [r3, #8]
 80085c2:	4b1c      	ldr	r3, [pc, #112]	; (8008634 <HAL_TIM_PWM_Start+0x234>)
 80085c4:	4013      	ands	r3, r2
 80085c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2b06      	cmp	r3, #6
 80085cc:	d015      	beq.n	80085fa <HAL_TIM_PWM_Start+0x1fa>
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085d4:	d011      	beq.n	80085fa <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f042 0201 	orr.w	r2, r2, #1
 80085e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085e6:	e008      	b.n	80085fa <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f042 0201 	orr.w	r2, r2, #1
 80085f6:	601a      	str	r2, [r3, #0]
 80085f8:	e000      	b.n	80085fc <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80085fc:	2300      	movs	r3, #0
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3710      	adds	r7, #16
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
 8008606:	bf00      	nop
 8008608:	40010000 	.word	0x40010000
 800860c:	40010400 	.word	0x40010400
 8008610:	40014000 	.word	0x40014000
 8008614:	40014400 	.word	0x40014400
 8008618:	40014800 	.word	0x40014800
 800861c:	40000400 	.word	0x40000400
 8008620:	40000800 	.word	0x40000800
 8008624:	40000c00 	.word	0x40000c00
 8008628:	40001800 	.word	0x40001800
 800862c:	4000e000 	.word	0x4000e000
 8008630:	4000e400 	.word	0x4000e400
 8008634:	00010007 	.word	0x00010007

08008638 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b082      	sub	sp, #8
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	691b      	ldr	r3, [r3, #16]
 8008646:	f003 0302 	and.w	r3, r3, #2
 800864a:	2b02      	cmp	r3, #2
 800864c:	d122      	bne.n	8008694 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	68db      	ldr	r3, [r3, #12]
 8008654:	f003 0302 	and.w	r3, r3, #2
 8008658:	2b02      	cmp	r3, #2
 800865a:	d11b      	bne.n	8008694 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f06f 0202 	mvn.w	r2, #2
 8008664:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2201      	movs	r2, #1
 800866a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	699b      	ldr	r3, [r3, #24]
 8008672:	f003 0303 	and.w	r3, r3, #3
 8008676:	2b00      	cmp	r3, #0
 8008678:	d003      	beq.n	8008682 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 fb12 	bl	8008ca4 <HAL_TIM_IC_CaptureCallback>
 8008680:	e005      	b.n	800868e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 fb04 	bl	8008c90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f000 fb15 	bl	8008cb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2200      	movs	r2, #0
 8008692:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	691b      	ldr	r3, [r3, #16]
 800869a:	f003 0304 	and.w	r3, r3, #4
 800869e:	2b04      	cmp	r3, #4
 80086a0:	d122      	bne.n	80086e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	68db      	ldr	r3, [r3, #12]
 80086a8:	f003 0304 	and.w	r3, r3, #4
 80086ac:	2b04      	cmp	r3, #4
 80086ae:	d11b      	bne.n	80086e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f06f 0204 	mvn.w	r2, #4
 80086b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2202      	movs	r2, #2
 80086be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	699b      	ldr	r3, [r3, #24]
 80086c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d003      	beq.n	80086d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f000 fae8 	bl	8008ca4 <HAL_TIM_IC_CaptureCallback>
 80086d4:	e005      	b.n	80086e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f000 fada 	bl	8008c90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f000 faeb 	bl	8008cb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2200      	movs	r2, #0
 80086e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	691b      	ldr	r3, [r3, #16]
 80086ee:	f003 0308 	and.w	r3, r3, #8
 80086f2:	2b08      	cmp	r3, #8
 80086f4:	d122      	bne.n	800873c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	68db      	ldr	r3, [r3, #12]
 80086fc:	f003 0308 	and.w	r3, r3, #8
 8008700:	2b08      	cmp	r3, #8
 8008702:	d11b      	bne.n	800873c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f06f 0208 	mvn.w	r2, #8
 800870c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2204      	movs	r2, #4
 8008712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	69db      	ldr	r3, [r3, #28]
 800871a:	f003 0303 	and.w	r3, r3, #3
 800871e:	2b00      	cmp	r3, #0
 8008720:	d003      	beq.n	800872a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f000 fabe 	bl	8008ca4 <HAL_TIM_IC_CaptureCallback>
 8008728:	e005      	b.n	8008736 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 fab0 	bl	8008c90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f000 fac1 	bl	8008cb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2200      	movs	r2, #0
 800873a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	691b      	ldr	r3, [r3, #16]
 8008742:	f003 0310 	and.w	r3, r3, #16
 8008746:	2b10      	cmp	r3, #16
 8008748:	d122      	bne.n	8008790 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	68db      	ldr	r3, [r3, #12]
 8008750:	f003 0310 	and.w	r3, r3, #16
 8008754:	2b10      	cmp	r3, #16
 8008756:	d11b      	bne.n	8008790 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f06f 0210 	mvn.w	r2, #16
 8008760:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2208      	movs	r2, #8
 8008766:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	69db      	ldr	r3, [r3, #28]
 800876e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008772:	2b00      	cmp	r3, #0
 8008774:	d003      	beq.n	800877e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 fa94 	bl	8008ca4 <HAL_TIM_IC_CaptureCallback>
 800877c:	e005      	b.n	800878a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f000 fa86 	bl	8008c90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 fa97 	bl	8008cb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2200      	movs	r2, #0
 800878e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	691b      	ldr	r3, [r3, #16]
 8008796:	f003 0301 	and.w	r3, r3, #1
 800879a:	2b01      	cmp	r3, #1
 800879c:	d10e      	bne.n	80087bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	68db      	ldr	r3, [r3, #12]
 80087a4:	f003 0301 	and.w	r3, r3, #1
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d107      	bne.n	80087bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f06f 0201 	mvn.w	r2, #1
 80087b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f7f8 ffba 	bl	8001730 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	691b      	ldr	r3, [r3, #16]
 80087c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087c6:	2b80      	cmp	r3, #128	; 0x80
 80087c8:	d10e      	bne.n	80087e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	68db      	ldr	r3, [r3, #12]
 80087d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087d4:	2b80      	cmp	r3, #128	; 0x80
 80087d6:	d107      	bne.n	80087e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80087e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f001 f802 	bl	80097ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	691b      	ldr	r3, [r3, #16]
 80087ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087f6:	d10e      	bne.n	8008816 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	68db      	ldr	r3, [r3, #12]
 80087fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008802:	2b80      	cmp	r3, #128	; 0x80
 8008804:	d107      	bne.n	8008816 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800880e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 fff5 	bl	8009800 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	691b      	ldr	r3, [r3, #16]
 800881c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008820:	2b40      	cmp	r3, #64	; 0x40
 8008822:	d10e      	bne.n	8008842 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	68db      	ldr	r3, [r3, #12]
 800882a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800882e:	2b40      	cmp	r3, #64	; 0x40
 8008830:	d107      	bne.n	8008842 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800883a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f000 fa45 	bl	8008ccc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	691b      	ldr	r3, [r3, #16]
 8008848:	f003 0320 	and.w	r3, r3, #32
 800884c:	2b20      	cmp	r3, #32
 800884e:	d10e      	bne.n	800886e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	68db      	ldr	r3, [r3, #12]
 8008856:	f003 0320 	and.w	r3, r3, #32
 800885a:	2b20      	cmp	r3, #32
 800885c:	d107      	bne.n	800886e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f06f 0220 	mvn.w	r2, #32
 8008866:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f000 ffb5 	bl	80097d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800886e:	bf00      	nop
 8008870:	3708      	adds	r7, #8
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
	...

08008878 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b086      	sub	sp, #24
 800887c:	af00      	add	r7, sp, #0
 800887e:	60f8      	str	r0, [r7, #12]
 8008880:	60b9      	str	r1, [r7, #8]
 8008882:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008884:	2300      	movs	r3, #0
 8008886:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800888e:	2b01      	cmp	r3, #1
 8008890:	d101      	bne.n	8008896 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008892:	2302      	movs	r3, #2
 8008894:	e0ff      	b.n	8008a96 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2201      	movs	r2, #1
 800889a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2b14      	cmp	r3, #20
 80088a2:	f200 80f0 	bhi.w	8008a86 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80088a6:	a201      	add	r2, pc, #4	; (adr r2, 80088ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80088a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ac:	08008901 	.word	0x08008901
 80088b0:	08008a87 	.word	0x08008a87
 80088b4:	08008a87 	.word	0x08008a87
 80088b8:	08008a87 	.word	0x08008a87
 80088bc:	08008941 	.word	0x08008941
 80088c0:	08008a87 	.word	0x08008a87
 80088c4:	08008a87 	.word	0x08008a87
 80088c8:	08008a87 	.word	0x08008a87
 80088cc:	08008983 	.word	0x08008983
 80088d0:	08008a87 	.word	0x08008a87
 80088d4:	08008a87 	.word	0x08008a87
 80088d8:	08008a87 	.word	0x08008a87
 80088dc:	080089c3 	.word	0x080089c3
 80088e0:	08008a87 	.word	0x08008a87
 80088e4:	08008a87 	.word	0x08008a87
 80088e8:	08008a87 	.word	0x08008a87
 80088ec:	08008a05 	.word	0x08008a05
 80088f0:	08008a87 	.word	0x08008a87
 80088f4:	08008a87 	.word	0x08008a87
 80088f8:	08008a87 	.word	0x08008a87
 80088fc:	08008a45 	.word	0x08008a45
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	68b9      	ldr	r1, [r7, #8]
 8008906:	4618      	mov	r0, r3
 8008908:	f000 fa90 	bl	8008e2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	699a      	ldr	r2, [r3, #24]
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f042 0208 	orr.w	r2, r2, #8
 800891a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	699a      	ldr	r2, [r3, #24]
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f022 0204 	bic.w	r2, r2, #4
 800892a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	6999      	ldr	r1, [r3, #24]
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	691a      	ldr	r2, [r3, #16]
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	430a      	orrs	r2, r1
 800893c:	619a      	str	r2, [r3, #24]
      break;
 800893e:	e0a5      	b.n	8008a8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	68b9      	ldr	r1, [r7, #8]
 8008946:	4618      	mov	r0, r3
 8008948:	f000 fb00 	bl	8008f4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	699a      	ldr	r2, [r3, #24]
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800895a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	699a      	ldr	r2, [r3, #24]
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800896a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	6999      	ldr	r1, [r3, #24]
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	691b      	ldr	r3, [r3, #16]
 8008976:	021a      	lsls	r2, r3, #8
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	430a      	orrs	r2, r1
 800897e:	619a      	str	r2, [r3, #24]
      break;
 8008980:	e084      	b.n	8008a8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	68b9      	ldr	r1, [r7, #8]
 8008988:	4618      	mov	r0, r3
 800898a:	f000 fb69 	bl	8009060 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	69da      	ldr	r2, [r3, #28]
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f042 0208 	orr.w	r2, r2, #8
 800899c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	69da      	ldr	r2, [r3, #28]
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f022 0204 	bic.w	r2, r2, #4
 80089ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	69d9      	ldr	r1, [r3, #28]
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	691a      	ldr	r2, [r3, #16]
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	430a      	orrs	r2, r1
 80089be:	61da      	str	r2, [r3, #28]
      break;
 80089c0:	e064      	b.n	8008a8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	68b9      	ldr	r1, [r7, #8]
 80089c8:	4618      	mov	r0, r3
 80089ca:	f000 fbd1 	bl	8009170 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	69da      	ldr	r2, [r3, #28]
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80089dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	69da      	ldr	r2, [r3, #28]
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	69d9      	ldr	r1, [r3, #28]
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	691b      	ldr	r3, [r3, #16]
 80089f8:	021a      	lsls	r2, r3, #8
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	430a      	orrs	r2, r1
 8008a00:	61da      	str	r2, [r3, #28]
      break;
 8008a02:	e043      	b.n	8008a8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	68b9      	ldr	r1, [r7, #8]
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f000 fc1a 	bl	8009244 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f042 0208 	orr.w	r2, r2, #8
 8008a1e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f022 0204 	bic.w	r2, r2, #4
 8008a2e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	691a      	ldr	r2, [r3, #16]
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	430a      	orrs	r2, r1
 8008a40:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008a42:	e023      	b.n	8008a8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	68b9      	ldr	r1, [r7, #8]
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f000 fc5e 	bl	800930c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a5e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a6e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	691b      	ldr	r3, [r3, #16]
 8008a7a:	021a      	lsls	r2, r3, #8
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	430a      	orrs	r2, r1
 8008a82:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008a84:	e002      	b.n	8008a8c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008a86:	2301      	movs	r3, #1
 8008a88:	75fb      	strb	r3, [r7, #23]
      break;
 8008a8a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008a94:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3718      	adds	r7, #24
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
 8008a9e:	bf00      	nop

08008aa0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b084      	sub	sp, #16
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d101      	bne.n	8008abc <HAL_TIM_ConfigClockSource+0x1c>
 8008ab8:	2302      	movs	r3, #2
 8008aba:	e0dc      	b.n	8008c76 <HAL_TIM_ConfigClockSource+0x1d6>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2201      	movs	r2, #1
 8008ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2202      	movs	r2, #2
 8008ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	689b      	ldr	r3, [r3, #8]
 8008ad2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008ad4:	68ba      	ldr	r2, [r7, #8]
 8008ad6:	4b6a      	ldr	r3, [pc, #424]	; (8008c80 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008ad8:	4013      	ands	r3, r2
 8008ada:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008ae2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	68ba      	ldr	r2, [r7, #8]
 8008aea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a64      	ldr	r2, [pc, #400]	; (8008c84 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	f000 80a9 	beq.w	8008c4a <HAL_TIM_ConfigClockSource+0x1aa>
 8008af8:	4a62      	ldr	r2, [pc, #392]	; (8008c84 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	f200 80ae 	bhi.w	8008c5c <HAL_TIM_ConfigClockSource+0x1bc>
 8008b00:	4a61      	ldr	r2, [pc, #388]	; (8008c88 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	f000 80a1 	beq.w	8008c4a <HAL_TIM_ConfigClockSource+0x1aa>
 8008b08:	4a5f      	ldr	r2, [pc, #380]	; (8008c88 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	f200 80a6 	bhi.w	8008c5c <HAL_TIM_ConfigClockSource+0x1bc>
 8008b10:	4a5e      	ldr	r2, [pc, #376]	; (8008c8c <HAL_TIM_ConfigClockSource+0x1ec>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	f000 8099 	beq.w	8008c4a <HAL_TIM_ConfigClockSource+0x1aa>
 8008b18:	4a5c      	ldr	r2, [pc, #368]	; (8008c8c <HAL_TIM_ConfigClockSource+0x1ec>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	f200 809e 	bhi.w	8008c5c <HAL_TIM_ConfigClockSource+0x1bc>
 8008b20:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008b24:	f000 8091 	beq.w	8008c4a <HAL_TIM_ConfigClockSource+0x1aa>
 8008b28:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008b2c:	f200 8096 	bhi.w	8008c5c <HAL_TIM_ConfigClockSource+0x1bc>
 8008b30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b34:	f000 8089 	beq.w	8008c4a <HAL_TIM_ConfigClockSource+0x1aa>
 8008b38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b3c:	f200 808e 	bhi.w	8008c5c <HAL_TIM_ConfigClockSource+0x1bc>
 8008b40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b44:	d03e      	beq.n	8008bc4 <HAL_TIM_ConfigClockSource+0x124>
 8008b46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b4a:	f200 8087 	bhi.w	8008c5c <HAL_TIM_ConfigClockSource+0x1bc>
 8008b4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b52:	f000 8086 	beq.w	8008c62 <HAL_TIM_ConfigClockSource+0x1c2>
 8008b56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b5a:	d87f      	bhi.n	8008c5c <HAL_TIM_ConfigClockSource+0x1bc>
 8008b5c:	2b70      	cmp	r3, #112	; 0x70
 8008b5e:	d01a      	beq.n	8008b96 <HAL_TIM_ConfigClockSource+0xf6>
 8008b60:	2b70      	cmp	r3, #112	; 0x70
 8008b62:	d87b      	bhi.n	8008c5c <HAL_TIM_ConfigClockSource+0x1bc>
 8008b64:	2b60      	cmp	r3, #96	; 0x60
 8008b66:	d050      	beq.n	8008c0a <HAL_TIM_ConfigClockSource+0x16a>
 8008b68:	2b60      	cmp	r3, #96	; 0x60
 8008b6a:	d877      	bhi.n	8008c5c <HAL_TIM_ConfigClockSource+0x1bc>
 8008b6c:	2b50      	cmp	r3, #80	; 0x50
 8008b6e:	d03c      	beq.n	8008bea <HAL_TIM_ConfigClockSource+0x14a>
 8008b70:	2b50      	cmp	r3, #80	; 0x50
 8008b72:	d873      	bhi.n	8008c5c <HAL_TIM_ConfigClockSource+0x1bc>
 8008b74:	2b40      	cmp	r3, #64	; 0x40
 8008b76:	d058      	beq.n	8008c2a <HAL_TIM_ConfigClockSource+0x18a>
 8008b78:	2b40      	cmp	r3, #64	; 0x40
 8008b7a:	d86f      	bhi.n	8008c5c <HAL_TIM_ConfigClockSource+0x1bc>
 8008b7c:	2b30      	cmp	r3, #48	; 0x30
 8008b7e:	d064      	beq.n	8008c4a <HAL_TIM_ConfigClockSource+0x1aa>
 8008b80:	2b30      	cmp	r3, #48	; 0x30
 8008b82:	d86b      	bhi.n	8008c5c <HAL_TIM_ConfigClockSource+0x1bc>
 8008b84:	2b20      	cmp	r3, #32
 8008b86:	d060      	beq.n	8008c4a <HAL_TIM_ConfigClockSource+0x1aa>
 8008b88:	2b20      	cmp	r3, #32
 8008b8a:	d867      	bhi.n	8008c5c <HAL_TIM_ConfigClockSource+0x1bc>
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d05c      	beq.n	8008c4a <HAL_TIM_ConfigClockSource+0x1aa>
 8008b90:	2b10      	cmp	r3, #16
 8008b92:	d05a      	beq.n	8008c4a <HAL_TIM_ConfigClockSource+0x1aa>
 8008b94:	e062      	b.n	8008c5c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6818      	ldr	r0, [r3, #0]
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	6899      	ldr	r1, [r3, #8]
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	685a      	ldr	r2, [r3, #4]
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	68db      	ldr	r3, [r3, #12]
 8008ba6:	f000 fc95 	bl	80094d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	689b      	ldr	r3, [r3, #8]
 8008bb0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008bb8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	68ba      	ldr	r2, [r7, #8]
 8008bc0:	609a      	str	r2, [r3, #8]
      break;
 8008bc2:	e04f      	b.n	8008c64 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6818      	ldr	r0, [r3, #0]
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	6899      	ldr	r1, [r3, #8]
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	685a      	ldr	r2, [r3, #4]
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	68db      	ldr	r3, [r3, #12]
 8008bd4:	f000 fc7e 	bl	80094d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	689a      	ldr	r2, [r3, #8]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008be6:	609a      	str	r2, [r3, #8]
      break;
 8008be8:	e03c      	b.n	8008c64 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6818      	ldr	r0, [r3, #0]
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	6859      	ldr	r1, [r3, #4]
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	68db      	ldr	r3, [r3, #12]
 8008bf6:	461a      	mov	r2, r3
 8008bf8:	f000 fbee 	bl	80093d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	2150      	movs	r1, #80	; 0x50
 8008c02:	4618      	mov	r0, r3
 8008c04:	f000 fc48 	bl	8009498 <TIM_ITRx_SetConfig>
      break;
 8008c08:	e02c      	b.n	8008c64 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6818      	ldr	r0, [r3, #0]
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	6859      	ldr	r1, [r3, #4]
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	68db      	ldr	r3, [r3, #12]
 8008c16:	461a      	mov	r2, r3
 8008c18:	f000 fc0d 	bl	8009436 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	2160      	movs	r1, #96	; 0x60
 8008c22:	4618      	mov	r0, r3
 8008c24:	f000 fc38 	bl	8009498 <TIM_ITRx_SetConfig>
      break;
 8008c28:	e01c      	b.n	8008c64 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6818      	ldr	r0, [r3, #0]
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	6859      	ldr	r1, [r3, #4]
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	68db      	ldr	r3, [r3, #12]
 8008c36:	461a      	mov	r2, r3
 8008c38:	f000 fbce 	bl	80093d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	2140      	movs	r1, #64	; 0x40
 8008c42:	4618      	mov	r0, r3
 8008c44:	f000 fc28 	bl	8009498 <TIM_ITRx_SetConfig>
      break;
 8008c48:	e00c      	b.n	8008c64 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4619      	mov	r1, r3
 8008c54:	4610      	mov	r0, r2
 8008c56:	f000 fc1f 	bl	8009498 <TIM_ITRx_SetConfig>
      break;
 8008c5a:	e003      	b.n	8008c64 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	73fb      	strb	r3, [r7, #15]
      break;
 8008c60:	e000      	b.n	8008c64 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8008c62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2201      	movs	r2, #1
 8008c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3710      	adds	r7, #16
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}
 8008c7e:	bf00      	nop
 8008c80:	ffceff88 	.word	0xffceff88
 8008c84:	00100040 	.word	0x00100040
 8008c88:	00100030 	.word	0x00100030
 8008c8c:	00100020 	.word	0x00100020

08008c90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b083      	sub	sp, #12
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008c98:	bf00      	nop
 8008c9a:	370c      	adds	r7, #12
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr

08008ca4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b083      	sub	sp, #12
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008cac:	bf00      	nop
 8008cae:	370c      	adds	r7, #12
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr

08008cb8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b083      	sub	sp, #12
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008cc0:	bf00      	nop
 8008cc2:	370c      	adds	r7, #12
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr

08008ccc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b083      	sub	sp, #12
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008cd4:	bf00      	nop
 8008cd6:	370c      	adds	r7, #12
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cde:	4770      	bx	lr

08008ce0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b085      	sub	sp, #20
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	4a44      	ldr	r2, [pc, #272]	; (8008e04 <TIM_Base_SetConfig+0x124>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d013      	beq.n	8008d20 <TIM_Base_SetConfig+0x40>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cfe:	d00f      	beq.n	8008d20 <TIM_Base_SetConfig+0x40>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	4a41      	ldr	r2, [pc, #260]	; (8008e08 <TIM_Base_SetConfig+0x128>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d00b      	beq.n	8008d20 <TIM_Base_SetConfig+0x40>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	4a40      	ldr	r2, [pc, #256]	; (8008e0c <TIM_Base_SetConfig+0x12c>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d007      	beq.n	8008d20 <TIM_Base_SetConfig+0x40>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	4a3f      	ldr	r2, [pc, #252]	; (8008e10 <TIM_Base_SetConfig+0x130>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d003      	beq.n	8008d20 <TIM_Base_SetConfig+0x40>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	4a3e      	ldr	r2, [pc, #248]	; (8008e14 <TIM_Base_SetConfig+0x134>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d108      	bne.n	8008d32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	68fa      	ldr	r2, [r7, #12]
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	4a33      	ldr	r2, [pc, #204]	; (8008e04 <TIM_Base_SetConfig+0x124>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d027      	beq.n	8008d8a <TIM_Base_SetConfig+0xaa>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d40:	d023      	beq.n	8008d8a <TIM_Base_SetConfig+0xaa>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	4a30      	ldr	r2, [pc, #192]	; (8008e08 <TIM_Base_SetConfig+0x128>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d01f      	beq.n	8008d8a <TIM_Base_SetConfig+0xaa>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	4a2f      	ldr	r2, [pc, #188]	; (8008e0c <TIM_Base_SetConfig+0x12c>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d01b      	beq.n	8008d8a <TIM_Base_SetConfig+0xaa>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	4a2e      	ldr	r2, [pc, #184]	; (8008e10 <TIM_Base_SetConfig+0x130>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d017      	beq.n	8008d8a <TIM_Base_SetConfig+0xaa>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	4a2d      	ldr	r2, [pc, #180]	; (8008e14 <TIM_Base_SetConfig+0x134>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d013      	beq.n	8008d8a <TIM_Base_SetConfig+0xaa>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	4a2c      	ldr	r2, [pc, #176]	; (8008e18 <TIM_Base_SetConfig+0x138>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d00f      	beq.n	8008d8a <TIM_Base_SetConfig+0xaa>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	4a2b      	ldr	r2, [pc, #172]	; (8008e1c <TIM_Base_SetConfig+0x13c>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d00b      	beq.n	8008d8a <TIM_Base_SetConfig+0xaa>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	4a2a      	ldr	r2, [pc, #168]	; (8008e20 <TIM_Base_SetConfig+0x140>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d007      	beq.n	8008d8a <TIM_Base_SetConfig+0xaa>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	4a29      	ldr	r2, [pc, #164]	; (8008e24 <TIM_Base_SetConfig+0x144>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d003      	beq.n	8008d8a <TIM_Base_SetConfig+0xaa>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	4a28      	ldr	r2, [pc, #160]	; (8008e28 <TIM_Base_SetConfig+0x148>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d108      	bne.n	8008d9c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	68db      	ldr	r3, [r3, #12]
 8008d96:	68fa      	ldr	r2, [r7, #12]
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	695b      	ldr	r3, [r3, #20]
 8008da6:	4313      	orrs	r3, r2
 8008da8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	68fa      	ldr	r2, [r7, #12]
 8008dae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	689a      	ldr	r2, [r3, #8]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	4a10      	ldr	r2, [pc, #64]	; (8008e04 <TIM_Base_SetConfig+0x124>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d00f      	beq.n	8008de8 <TIM_Base_SetConfig+0x108>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	4a12      	ldr	r2, [pc, #72]	; (8008e14 <TIM_Base_SetConfig+0x134>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d00b      	beq.n	8008de8 <TIM_Base_SetConfig+0x108>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	4a11      	ldr	r2, [pc, #68]	; (8008e18 <TIM_Base_SetConfig+0x138>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d007      	beq.n	8008de8 <TIM_Base_SetConfig+0x108>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	4a10      	ldr	r2, [pc, #64]	; (8008e1c <TIM_Base_SetConfig+0x13c>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d003      	beq.n	8008de8 <TIM_Base_SetConfig+0x108>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	4a0f      	ldr	r2, [pc, #60]	; (8008e20 <TIM_Base_SetConfig+0x140>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d103      	bne.n	8008df0 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	691a      	ldr	r2, [r3, #16]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2201      	movs	r2, #1
 8008df4:	615a      	str	r2, [r3, #20]
}
 8008df6:	bf00      	nop
 8008df8:	3714      	adds	r7, #20
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e00:	4770      	bx	lr
 8008e02:	bf00      	nop
 8008e04:	40010000 	.word	0x40010000
 8008e08:	40000400 	.word	0x40000400
 8008e0c:	40000800 	.word	0x40000800
 8008e10:	40000c00 	.word	0x40000c00
 8008e14:	40010400 	.word	0x40010400
 8008e18:	40014000 	.word	0x40014000
 8008e1c:	40014400 	.word	0x40014400
 8008e20:	40014800 	.word	0x40014800
 8008e24:	4000e000 	.word	0x4000e000
 8008e28:	4000e400 	.word	0x4000e400

08008e2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b087      	sub	sp, #28
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6a1b      	ldr	r3, [r3, #32]
 8008e3a:	f023 0201 	bic.w	r2, r3, #1
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6a1b      	ldr	r3, [r3, #32]
 8008e46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	699b      	ldr	r3, [r3, #24]
 8008e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008e54:	68fa      	ldr	r2, [r7, #12]
 8008e56:	4b37      	ldr	r3, [pc, #220]	; (8008f34 <TIM_OC1_SetConfig+0x108>)
 8008e58:	4013      	ands	r3, r2
 8008e5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f023 0303 	bic.w	r3, r3, #3
 8008e62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	68fa      	ldr	r2, [r7, #12]
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	f023 0302 	bic.w	r3, r3, #2
 8008e74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	689b      	ldr	r3, [r3, #8]
 8008e7a:	697a      	ldr	r2, [r7, #20]
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	4a2d      	ldr	r2, [pc, #180]	; (8008f38 <TIM_OC1_SetConfig+0x10c>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d00f      	beq.n	8008ea8 <TIM_OC1_SetConfig+0x7c>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	4a2c      	ldr	r2, [pc, #176]	; (8008f3c <TIM_OC1_SetConfig+0x110>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d00b      	beq.n	8008ea8 <TIM_OC1_SetConfig+0x7c>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	4a2b      	ldr	r2, [pc, #172]	; (8008f40 <TIM_OC1_SetConfig+0x114>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d007      	beq.n	8008ea8 <TIM_OC1_SetConfig+0x7c>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	4a2a      	ldr	r2, [pc, #168]	; (8008f44 <TIM_OC1_SetConfig+0x118>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d003      	beq.n	8008ea8 <TIM_OC1_SetConfig+0x7c>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	4a29      	ldr	r2, [pc, #164]	; (8008f48 <TIM_OC1_SetConfig+0x11c>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d10c      	bne.n	8008ec2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	f023 0308 	bic.w	r3, r3, #8
 8008eae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	68db      	ldr	r3, [r3, #12]
 8008eb4:	697a      	ldr	r2, [r7, #20]
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	f023 0304 	bic.w	r3, r3, #4
 8008ec0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	4a1c      	ldr	r2, [pc, #112]	; (8008f38 <TIM_OC1_SetConfig+0x10c>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d00f      	beq.n	8008eea <TIM_OC1_SetConfig+0xbe>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	4a1b      	ldr	r2, [pc, #108]	; (8008f3c <TIM_OC1_SetConfig+0x110>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d00b      	beq.n	8008eea <TIM_OC1_SetConfig+0xbe>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	4a1a      	ldr	r2, [pc, #104]	; (8008f40 <TIM_OC1_SetConfig+0x114>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d007      	beq.n	8008eea <TIM_OC1_SetConfig+0xbe>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	4a19      	ldr	r2, [pc, #100]	; (8008f44 <TIM_OC1_SetConfig+0x118>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d003      	beq.n	8008eea <TIM_OC1_SetConfig+0xbe>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	4a18      	ldr	r2, [pc, #96]	; (8008f48 <TIM_OC1_SetConfig+0x11c>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d111      	bne.n	8008f0e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ef0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ef8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	695b      	ldr	r3, [r3, #20]
 8008efe:	693a      	ldr	r2, [r7, #16]
 8008f00:	4313      	orrs	r3, r2
 8008f02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	699b      	ldr	r3, [r3, #24]
 8008f08:	693a      	ldr	r2, [r7, #16]
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	693a      	ldr	r2, [r7, #16]
 8008f12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	68fa      	ldr	r2, [r7, #12]
 8008f18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	685a      	ldr	r2, [r3, #4]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	697a      	ldr	r2, [r7, #20]
 8008f26:	621a      	str	r2, [r3, #32]
}
 8008f28:	bf00      	nop
 8008f2a:	371c      	adds	r7, #28
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f32:	4770      	bx	lr
 8008f34:	fffeff8f 	.word	0xfffeff8f
 8008f38:	40010000 	.word	0x40010000
 8008f3c:	40010400 	.word	0x40010400
 8008f40:	40014000 	.word	0x40014000
 8008f44:	40014400 	.word	0x40014400
 8008f48:	40014800 	.word	0x40014800

08008f4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b087      	sub	sp, #28
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6a1b      	ldr	r3, [r3, #32]
 8008f5a:	f023 0210 	bic.w	r2, r3, #16
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6a1b      	ldr	r3, [r3, #32]
 8008f66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	699b      	ldr	r3, [r3, #24]
 8008f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008f74:	68fa      	ldr	r2, [r7, #12]
 8008f76:	4b34      	ldr	r3, [pc, #208]	; (8009048 <TIM_OC2_SetConfig+0xfc>)
 8008f78:	4013      	ands	r3, r2
 8008f7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	021b      	lsls	r3, r3, #8
 8008f8a:	68fa      	ldr	r2, [r7, #12]
 8008f8c:	4313      	orrs	r3, r2
 8008f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	f023 0320 	bic.w	r3, r3, #32
 8008f96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	689b      	ldr	r3, [r3, #8]
 8008f9c:	011b      	lsls	r3, r3, #4
 8008f9e:	697a      	ldr	r2, [r7, #20]
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	4a29      	ldr	r2, [pc, #164]	; (800904c <TIM_OC2_SetConfig+0x100>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d003      	beq.n	8008fb4 <TIM_OC2_SetConfig+0x68>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	4a28      	ldr	r2, [pc, #160]	; (8009050 <TIM_OC2_SetConfig+0x104>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d10d      	bne.n	8008fd0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008fba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	68db      	ldr	r3, [r3, #12]
 8008fc0:	011b      	lsls	r3, r3, #4
 8008fc2:	697a      	ldr	r2, [r7, #20]
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	4a1e      	ldr	r2, [pc, #120]	; (800904c <TIM_OC2_SetConfig+0x100>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d00f      	beq.n	8008ff8 <TIM_OC2_SetConfig+0xac>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	4a1d      	ldr	r2, [pc, #116]	; (8009050 <TIM_OC2_SetConfig+0x104>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d00b      	beq.n	8008ff8 <TIM_OC2_SetConfig+0xac>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	4a1c      	ldr	r2, [pc, #112]	; (8009054 <TIM_OC2_SetConfig+0x108>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d007      	beq.n	8008ff8 <TIM_OC2_SetConfig+0xac>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	4a1b      	ldr	r2, [pc, #108]	; (8009058 <TIM_OC2_SetConfig+0x10c>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d003      	beq.n	8008ff8 <TIM_OC2_SetConfig+0xac>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	4a1a      	ldr	r2, [pc, #104]	; (800905c <TIM_OC2_SetConfig+0x110>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d113      	bne.n	8009020 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008ffe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009006:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	695b      	ldr	r3, [r3, #20]
 800900c:	009b      	lsls	r3, r3, #2
 800900e:	693a      	ldr	r2, [r7, #16]
 8009010:	4313      	orrs	r3, r2
 8009012:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	699b      	ldr	r3, [r3, #24]
 8009018:	009b      	lsls	r3, r3, #2
 800901a:	693a      	ldr	r2, [r7, #16]
 800901c:	4313      	orrs	r3, r2
 800901e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	693a      	ldr	r2, [r7, #16]
 8009024:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	68fa      	ldr	r2, [r7, #12]
 800902a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	685a      	ldr	r2, [r3, #4]
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	697a      	ldr	r2, [r7, #20]
 8009038:	621a      	str	r2, [r3, #32]
}
 800903a:	bf00      	nop
 800903c:	371c      	adds	r7, #28
 800903e:	46bd      	mov	sp, r7
 8009040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009044:	4770      	bx	lr
 8009046:	bf00      	nop
 8009048:	feff8fff 	.word	0xfeff8fff
 800904c:	40010000 	.word	0x40010000
 8009050:	40010400 	.word	0x40010400
 8009054:	40014000 	.word	0x40014000
 8009058:	40014400 	.word	0x40014400
 800905c:	40014800 	.word	0x40014800

08009060 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009060:	b480      	push	{r7}
 8009062:	b087      	sub	sp, #28
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6a1b      	ldr	r3, [r3, #32]
 800906e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6a1b      	ldr	r3, [r3, #32]
 800907a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	69db      	ldr	r3, [r3, #28]
 8009086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009088:	68fa      	ldr	r2, [r7, #12]
 800908a:	4b33      	ldr	r3, [pc, #204]	; (8009158 <TIM_OC3_SetConfig+0xf8>)
 800908c:	4013      	ands	r3, r2
 800908e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f023 0303 	bic.w	r3, r3, #3
 8009096:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	68fa      	ldr	r2, [r7, #12]
 800909e:	4313      	orrs	r3, r2
 80090a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80090a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	689b      	ldr	r3, [r3, #8]
 80090ae:	021b      	lsls	r3, r3, #8
 80090b0:	697a      	ldr	r2, [r7, #20]
 80090b2:	4313      	orrs	r3, r2
 80090b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	4a28      	ldr	r2, [pc, #160]	; (800915c <TIM_OC3_SetConfig+0xfc>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d003      	beq.n	80090c6 <TIM_OC3_SetConfig+0x66>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	4a27      	ldr	r2, [pc, #156]	; (8009160 <TIM_OC3_SetConfig+0x100>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d10d      	bne.n	80090e2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80090cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	68db      	ldr	r3, [r3, #12]
 80090d2:	021b      	lsls	r3, r3, #8
 80090d4:	697a      	ldr	r2, [r7, #20]
 80090d6:	4313      	orrs	r3, r2
 80090d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80090e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	4a1d      	ldr	r2, [pc, #116]	; (800915c <TIM_OC3_SetConfig+0xfc>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d00f      	beq.n	800910a <TIM_OC3_SetConfig+0xaa>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	4a1c      	ldr	r2, [pc, #112]	; (8009160 <TIM_OC3_SetConfig+0x100>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d00b      	beq.n	800910a <TIM_OC3_SetConfig+0xaa>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	4a1b      	ldr	r2, [pc, #108]	; (8009164 <TIM_OC3_SetConfig+0x104>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d007      	beq.n	800910a <TIM_OC3_SetConfig+0xaa>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	4a1a      	ldr	r2, [pc, #104]	; (8009168 <TIM_OC3_SetConfig+0x108>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d003      	beq.n	800910a <TIM_OC3_SetConfig+0xaa>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	4a19      	ldr	r2, [pc, #100]	; (800916c <TIM_OC3_SetConfig+0x10c>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d113      	bne.n	8009132 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009110:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009118:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	695b      	ldr	r3, [r3, #20]
 800911e:	011b      	lsls	r3, r3, #4
 8009120:	693a      	ldr	r2, [r7, #16]
 8009122:	4313      	orrs	r3, r2
 8009124:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	699b      	ldr	r3, [r3, #24]
 800912a:	011b      	lsls	r3, r3, #4
 800912c:	693a      	ldr	r2, [r7, #16]
 800912e:	4313      	orrs	r3, r2
 8009130:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	693a      	ldr	r2, [r7, #16]
 8009136:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	68fa      	ldr	r2, [r7, #12]
 800913c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	685a      	ldr	r2, [r3, #4]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	697a      	ldr	r2, [r7, #20]
 800914a:	621a      	str	r2, [r3, #32]
}
 800914c:	bf00      	nop
 800914e:	371c      	adds	r7, #28
 8009150:	46bd      	mov	sp, r7
 8009152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009156:	4770      	bx	lr
 8009158:	fffeff8f 	.word	0xfffeff8f
 800915c:	40010000 	.word	0x40010000
 8009160:	40010400 	.word	0x40010400
 8009164:	40014000 	.word	0x40014000
 8009168:	40014400 	.word	0x40014400
 800916c:	40014800 	.word	0x40014800

08009170 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009170:	b480      	push	{r7}
 8009172:	b087      	sub	sp, #28
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6a1b      	ldr	r3, [r3, #32]
 800917e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6a1b      	ldr	r3, [r3, #32]
 800918a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	685b      	ldr	r3, [r3, #4]
 8009190:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	69db      	ldr	r3, [r3, #28]
 8009196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009198:	68fa      	ldr	r2, [r7, #12]
 800919a:	4b24      	ldr	r3, [pc, #144]	; (800922c <TIM_OC4_SetConfig+0xbc>)
 800919c:	4013      	ands	r3, r2
 800919e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	021b      	lsls	r3, r3, #8
 80091ae:	68fa      	ldr	r2, [r7, #12]
 80091b0:	4313      	orrs	r3, r2
 80091b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80091ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	689b      	ldr	r3, [r3, #8]
 80091c0:	031b      	lsls	r3, r3, #12
 80091c2:	693a      	ldr	r2, [r7, #16]
 80091c4:	4313      	orrs	r3, r2
 80091c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	4a19      	ldr	r2, [pc, #100]	; (8009230 <TIM_OC4_SetConfig+0xc0>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d00f      	beq.n	80091f0 <TIM_OC4_SetConfig+0x80>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	4a18      	ldr	r2, [pc, #96]	; (8009234 <TIM_OC4_SetConfig+0xc4>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d00b      	beq.n	80091f0 <TIM_OC4_SetConfig+0x80>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	4a17      	ldr	r2, [pc, #92]	; (8009238 <TIM_OC4_SetConfig+0xc8>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d007      	beq.n	80091f0 <TIM_OC4_SetConfig+0x80>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	4a16      	ldr	r2, [pc, #88]	; (800923c <TIM_OC4_SetConfig+0xcc>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d003      	beq.n	80091f0 <TIM_OC4_SetConfig+0x80>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	4a15      	ldr	r2, [pc, #84]	; (8009240 <TIM_OC4_SetConfig+0xd0>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d109      	bne.n	8009204 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80091f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	695b      	ldr	r3, [r3, #20]
 80091fc:	019b      	lsls	r3, r3, #6
 80091fe:	697a      	ldr	r2, [r7, #20]
 8009200:	4313      	orrs	r3, r2
 8009202:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	697a      	ldr	r2, [r7, #20]
 8009208:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	68fa      	ldr	r2, [r7, #12]
 800920e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	685a      	ldr	r2, [r3, #4]
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	693a      	ldr	r2, [r7, #16]
 800921c:	621a      	str	r2, [r3, #32]
}
 800921e:	bf00      	nop
 8009220:	371c      	adds	r7, #28
 8009222:	46bd      	mov	sp, r7
 8009224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009228:	4770      	bx	lr
 800922a:	bf00      	nop
 800922c:	feff8fff 	.word	0xfeff8fff
 8009230:	40010000 	.word	0x40010000
 8009234:	40010400 	.word	0x40010400
 8009238:	40014000 	.word	0x40014000
 800923c:	40014400 	.word	0x40014400
 8009240:	40014800 	.word	0x40014800

08009244 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009244:	b480      	push	{r7}
 8009246:	b087      	sub	sp, #28
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6a1b      	ldr	r3, [r3, #32]
 8009252:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6a1b      	ldr	r3, [r3, #32]
 800925e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800926a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800926c:	68fa      	ldr	r2, [r7, #12]
 800926e:	4b21      	ldr	r3, [pc, #132]	; (80092f4 <TIM_OC5_SetConfig+0xb0>)
 8009270:	4013      	ands	r3, r2
 8009272:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	68fa      	ldr	r2, [r7, #12]
 800927a:	4313      	orrs	r3, r2
 800927c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009284:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	689b      	ldr	r3, [r3, #8]
 800928a:	041b      	lsls	r3, r3, #16
 800928c:	693a      	ldr	r2, [r7, #16]
 800928e:	4313      	orrs	r3, r2
 8009290:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	4a18      	ldr	r2, [pc, #96]	; (80092f8 <TIM_OC5_SetConfig+0xb4>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d00f      	beq.n	80092ba <TIM_OC5_SetConfig+0x76>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	4a17      	ldr	r2, [pc, #92]	; (80092fc <TIM_OC5_SetConfig+0xb8>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d00b      	beq.n	80092ba <TIM_OC5_SetConfig+0x76>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	4a16      	ldr	r2, [pc, #88]	; (8009300 <TIM_OC5_SetConfig+0xbc>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d007      	beq.n	80092ba <TIM_OC5_SetConfig+0x76>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	4a15      	ldr	r2, [pc, #84]	; (8009304 <TIM_OC5_SetConfig+0xc0>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d003      	beq.n	80092ba <TIM_OC5_SetConfig+0x76>
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	4a14      	ldr	r2, [pc, #80]	; (8009308 <TIM_OC5_SetConfig+0xc4>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d109      	bne.n	80092ce <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80092c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	695b      	ldr	r3, [r3, #20]
 80092c6:	021b      	lsls	r3, r3, #8
 80092c8:	697a      	ldr	r2, [r7, #20]
 80092ca:	4313      	orrs	r3, r2
 80092cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	697a      	ldr	r2, [r7, #20]
 80092d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	68fa      	ldr	r2, [r7, #12]
 80092d8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	685a      	ldr	r2, [r3, #4]
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	693a      	ldr	r2, [r7, #16]
 80092e6:	621a      	str	r2, [r3, #32]
}
 80092e8:	bf00      	nop
 80092ea:	371c      	adds	r7, #28
 80092ec:	46bd      	mov	sp, r7
 80092ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f2:	4770      	bx	lr
 80092f4:	fffeff8f 	.word	0xfffeff8f
 80092f8:	40010000 	.word	0x40010000
 80092fc:	40010400 	.word	0x40010400
 8009300:	40014000 	.word	0x40014000
 8009304:	40014400 	.word	0x40014400
 8009308:	40014800 	.word	0x40014800

0800930c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800930c:	b480      	push	{r7}
 800930e:	b087      	sub	sp, #28
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6a1b      	ldr	r3, [r3, #32]
 800931a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6a1b      	ldr	r3, [r3, #32]
 8009326:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009334:	68fa      	ldr	r2, [r7, #12]
 8009336:	4b22      	ldr	r3, [pc, #136]	; (80093c0 <TIM_OC6_SetConfig+0xb4>)
 8009338:	4013      	ands	r3, r2
 800933a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	021b      	lsls	r3, r3, #8
 8009342:	68fa      	ldr	r2, [r7, #12]
 8009344:	4313      	orrs	r3, r2
 8009346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800934e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	689b      	ldr	r3, [r3, #8]
 8009354:	051b      	lsls	r3, r3, #20
 8009356:	693a      	ldr	r2, [r7, #16]
 8009358:	4313      	orrs	r3, r2
 800935a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	4a19      	ldr	r2, [pc, #100]	; (80093c4 <TIM_OC6_SetConfig+0xb8>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d00f      	beq.n	8009384 <TIM_OC6_SetConfig+0x78>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	4a18      	ldr	r2, [pc, #96]	; (80093c8 <TIM_OC6_SetConfig+0xbc>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d00b      	beq.n	8009384 <TIM_OC6_SetConfig+0x78>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	4a17      	ldr	r2, [pc, #92]	; (80093cc <TIM_OC6_SetConfig+0xc0>)
 8009370:	4293      	cmp	r3, r2
 8009372:	d007      	beq.n	8009384 <TIM_OC6_SetConfig+0x78>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	4a16      	ldr	r2, [pc, #88]	; (80093d0 <TIM_OC6_SetConfig+0xc4>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d003      	beq.n	8009384 <TIM_OC6_SetConfig+0x78>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	4a15      	ldr	r2, [pc, #84]	; (80093d4 <TIM_OC6_SetConfig+0xc8>)
 8009380:	4293      	cmp	r3, r2
 8009382:	d109      	bne.n	8009398 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800938a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	695b      	ldr	r3, [r3, #20]
 8009390:	029b      	lsls	r3, r3, #10
 8009392:	697a      	ldr	r2, [r7, #20]
 8009394:	4313      	orrs	r3, r2
 8009396:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	697a      	ldr	r2, [r7, #20]
 800939c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	68fa      	ldr	r2, [r7, #12]
 80093a2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	685a      	ldr	r2, [r3, #4]
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	693a      	ldr	r2, [r7, #16]
 80093b0:	621a      	str	r2, [r3, #32]
}
 80093b2:	bf00      	nop
 80093b4:	371c      	adds	r7, #28
 80093b6:	46bd      	mov	sp, r7
 80093b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093bc:	4770      	bx	lr
 80093be:	bf00      	nop
 80093c0:	feff8fff 	.word	0xfeff8fff
 80093c4:	40010000 	.word	0x40010000
 80093c8:	40010400 	.word	0x40010400
 80093cc:	40014000 	.word	0x40014000
 80093d0:	40014400 	.word	0x40014400
 80093d4:	40014800 	.word	0x40014800

080093d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80093d8:	b480      	push	{r7}
 80093da:	b087      	sub	sp, #28
 80093dc:	af00      	add	r7, sp, #0
 80093de:	60f8      	str	r0, [r7, #12]
 80093e0:	60b9      	str	r1, [r7, #8]
 80093e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	6a1b      	ldr	r3, [r3, #32]
 80093e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	6a1b      	ldr	r3, [r3, #32]
 80093ee:	f023 0201 	bic.w	r2, r3, #1
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	699b      	ldr	r3, [r3, #24]
 80093fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009402:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	011b      	lsls	r3, r3, #4
 8009408:	693a      	ldr	r2, [r7, #16]
 800940a:	4313      	orrs	r3, r2
 800940c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	f023 030a 	bic.w	r3, r3, #10
 8009414:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009416:	697a      	ldr	r2, [r7, #20]
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	4313      	orrs	r3, r2
 800941c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	693a      	ldr	r2, [r7, #16]
 8009422:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	697a      	ldr	r2, [r7, #20]
 8009428:	621a      	str	r2, [r3, #32]
}
 800942a:	bf00      	nop
 800942c:	371c      	adds	r7, #28
 800942e:	46bd      	mov	sp, r7
 8009430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009434:	4770      	bx	lr

08009436 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009436:	b480      	push	{r7}
 8009438:	b087      	sub	sp, #28
 800943a:	af00      	add	r7, sp, #0
 800943c:	60f8      	str	r0, [r7, #12]
 800943e:	60b9      	str	r1, [r7, #8]
 8009440:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	6a1b      	ldr	r3, [r3, #32]
 8009446:	f023 0210 	bic.w	r2, r3, #16
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	699b      	ldr	r3, [r3, #24]
 8009452:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	6a1b      	ldr	r3, [r3, #32]
 8009458:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009460:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	031b      	lsls	r3, r3, #12
 8009466:	697a      	ldr	r2, [r7, #20]
 8009468:	4313      	orrs	r3, r2
 800946a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009472:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	011b      	lsls	r3, r3, #4
 8009478:	693a      	ldr	r2, [r7, #16]
 800947a:	4313      	orrs	r3, r2
 800947c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	697a      	ldr	r2, [r7, #20]
 8009482:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	693a      	ldr	r2, [r7, #16]
 8009488:	621a      	str	r2, [r3, #32]
}
 800948a:	bf00      	nop
 800948c:	371c      	adds	r7, #28
 800948e:	46bd      	mov	sp, r7
 8009490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009494:	4770      	bx	lr
	...

08009498 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009498:	b480      	push	{r7}
 800949a:	b085      	sub	sp, #20
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
 80094a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	689b      	ldr	r3, [r3, #8]
 80094a6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80094a8:	68fa      	ldr	r2, [r7, #12]
 80094aa:	4b09      	ldr	r3, [pc, #36]	; (80094d0 <TIM_ITRx_SetConfig+0x38>)
 80094ac:	4013      	ands	r3, r2
 80094ae:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80094b0:	683a      	ldr	r2, [r7, #0]
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	4313      	orrs	r3, r2
 80094b6:	f043 0307 	orr.w	r3, r3, #7
 80094ba:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	68fa      	ldr	r2, [r7, #12]
 80094c0:	609a      	str	r2, [r3, #8]
}
 80094c2:	bf00      	nop
 80094c4:	3714      	adds	r7, #20
 80094c6:	46bd      	mov	sp, r7
 80094c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094cc:	4770      	bx	lr
 80094ce:	bf00      	nop
 80094d0:	ffcfff8f 	.word	0xffcfff8f

080094d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b087      	sub	sp, #28
 80094d8:	af00      	add	r7, sp, #0
 80094da:	60f8      	str	r0, [r7, #12]
 80094dc:	60b9      	str	r1, [r7, #8]
 80094de:	607a      	str	r2, [r7, #4]
 80094e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	689b      	ldr	r3, [r3, #8]
 80094e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80094ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	021a      	lsls	r2, r3, #8
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	431a      	orrs	r2, r3
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	4313      	orrs	r3, r2
 80094fc:	697a      	ldr	r2, [r7, #20]
 80094fe:	4313      	orrs	r3, r2
 8009500:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	697a      	ldr	r2, [r7, #20]
 8009506:	609a      	str	r2, [r3, #8]
}
 8009508:	bf00      	nop
 800950a:	371c      	adds	r7, #28
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr

08009514 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009514:	b480      	push	{r7}
 8009516:	b087      	sub	sp, #28
 8009518:	af00      	add	r7, sp, #0
 800951a:	60f8      	str	r0, [r7, #12]
 800951c:	60b9      	str	r1, [r7, #8]
 800951e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	f003 031f 	and.w	r3, r3, #31
 8009526:	2201      	movs	r2, #1
 8009528:	fa02 f303 	lsl.w	r3, r2, r3
 800952c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	6a1a      	ldr	r2, [r3, #32]
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	43db      	mvns	r3, r3
 8009536:	401a      	ands	r2, r3
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	6a1a      	ldr	r2, [r3, #32]
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	f003 031f 	and.w	r3, r3, #31
 8009546:	6879      	ldr	r1, [r7, #4]
 8009548:	fa01 f303 	lsl.w	r3, r1, r3
 800954c:	431a      	orrs	r2, r3
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	621a      	str	r2, [r3, #32]
}
 8009552:	bf00      	nop
 8009554:	371c      	adds	r7, #28
 8009556:	46bd      	mov	sp, r7
 8009558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955c:	4770      	bx	lr
	...

08009560 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009560:	b480      	push	{r7}
 8009562:	b085      	sub	sp, #20
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009570:	2b01      	cmp	r3, #1
 8009572:	d101      	bne.n	8009578 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009574:	2302      	movs	r3, #2
 8009576:	e077      	b.n	8009668 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2201      	movs	r2, #1
 800957c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2202      	movs	r2, #2
 8009584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	689b      	ldr	r3, [r3, #8]
 8009596:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4a35      	ldr	r2, [pc, #212]	; (8009674 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d004      	beq.n	80095ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	4a34      	ldr	r2, [pc, #208]	; (8009678 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d108      	bne.n	80095be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80095b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	685b      	ldr	r3, [r3, #4]
 80095b8:	68fa      	ldr	r2, [r7, #12]
 80095ba:	4313      	orrs	r3, r2
 80095bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	68fa      	ldr	r2, [r7, #12]
 80095cc:	4313      	orrs	r3, r2
 80095ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	68fa      	ldr	r2, [r7, #12]
 80095d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	4a25      	ldr	r2, [pc, #148]	; (8009674 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d02c      	beq.n	800963c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095ea:	d027      	beq.n	800963c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4a22      	ldr	r2, [pc, #136]	; (800967c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d022      	beq.n	800963c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	4a21      	ldr	r2, [pc, #132]	; (8009680 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d01d      	beq.n	800963c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4a1f      	ldr	r2, [pc, #124]	; (8009684 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d018      	beq.n	800963c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	4a1a      	ldr	r2, [pc, #104]	; (8009678 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d013      	beq.n	800963c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	4a1b      	ldr	r2, [pc, #108]	; (8009688 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d00e      	beq.n	800963c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	4a1a      	ldr	r2, [pc, #104]	; (800968c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d009      	beq.n	800963c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4a18      	ldr	r2, [pc, #96]	; (8009690 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d004      	beq.n	800963c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4a17      	ldr	r2, [pc, #92]	; (8009694 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d10c      	bne.n	8009656 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009642:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	689b      	ldr	r3, [r3, #8]
 8009648:	68ba      	ldr	r2, [r7, #8]
 800964a:	4313      	orrs	r3, r2
 800964c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	68ba      	ldr	r2, [r7, #8]
 8009654:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2201      	movs	r2, #1
 800965a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2200      	movs	r2, #0
 8009662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009666:	2300      	movs	r3, #0
}
 8009668:	4618      	mov	r0, r3
 800966a:	3714      	adds	r7, #20
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr
 8009674:	40010000 	.word	0x40010000
 8009678:	40010400 	.word	0x40010400
 800967c:	40000400 	.word	0x40000400
 8009680:	40000800 	.word	0x40000800
 8009684:	40000c00 	.word	0x40000c00
 8009688:	40001800 	.word	0x40001800
 800968c:	40014000 	.word	0x40014000
 8009690:	4000e000 	.word	0x4000e000
 8009694:	4000e400 	.word	0x4000e400

08009698 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009698:	b480      	push	{r7}
 800969a:	b085      	sub	sp, #20
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
 80096a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80096a2:	2300      	movs	r3, #0
 80096a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	d101      	bne.n	80096b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80096b0:	2302      	movs	r3, #2
 80096b2:	e087      	b.n	80097c4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2201      	movs	r2, #1
 80096b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	68db      	ldr	r3, [r3, #12]
 80096c6:	4313      	orrs	r3, r2
 80096c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	689b      	ldr	r3, [r3, #8]
 80096d4:	4313      	orrs	r3, r2
 80096d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	685b      	ldr	r3, [r3, #4]
 80096e2:	4313      	orrs	r3, r2
 80096e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4313      	orrs	r3, r2
 80096f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	691b      	ldr	r3, [r3, #16]
 80096fe:	4313      	orrs	r3, r2
 8009700:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	695b      	ldr	r3, [r3, #20]
 800970c:	4313      	orrs	r3, r2
 800970e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800971a:	4313      	orrs	r3, r2
 800971c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	699b      	ldr	r3, [r3, #24]
 8009728:	041b      	lsls	r3, r3, #16
 800972a:	4313      	orrs	r3, r2
 800972c:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4a27      	ldr	r2, [pc, #156]	; (80097d0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d004      	beq.n	8009742 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4a25      	ldr	r2, [pc, #148]	; (80097d4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d106      	bne.n	8009750 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	69db      	ldr	r3, [r3, #28]
 800974c:	4313      	orrs	r3, r2
 800974e:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4a1e      	ldr	r2, [pc, #120]	; (80097d0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d004      	beq.n	8009764 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	4a1d      	ldr	r2, [pc, #116]	; (80097d4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8009760:	4293      	cmp	r3, r2
 8009762:	d126      	bne.n	80097b2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800976e:	051b      	lsls	r3, r3, #20
 8009770:	4313      	orrs	r3, r2
 8009772:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	6a1b      	ldr	r3, [r3, #32]
 800977e:	4313      	orrs	r3, r2
 8009780:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800978c:	4313      	orrs	r3, r2
 800978e:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	4a0e      	ldr	r2, [pc, #56]	; (80097d0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d004      	beq.n	80097a4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	4a0d      	ldr	r2, [pc, #52]	; (80097d4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d106      	bne.n	80097b2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ae:	4313      	orrs	r3, r2
 80097b0:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	68fa      	ldr	r2, [r7, #12]
 80097b8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2200      	movs	r2, #0
 80097be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80097c2:	2300      	movs	r3, #0
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3714      	adds	r7, #20
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr
 80097d0:	40010000 	.word	0x40010000
 80097d4:	40010400 	.word	0x40010400

080097d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80097d8:	b480      	push	{r7}
 80097da:	b083      	sub	sp, #12
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80097e0:	bf00      	nop
 80097e2:	370c      	adds	r7, #12
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	4770      	bx	lr

080097ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80097ec:	b480      	push	{r7}
 80097ee:	b083      	sub	sp, #12
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80097f4:	bf00      	nop
 80097f6:	370c      	adds	r7, #12
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr

08009800 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009800:	b480      	push	{r7}
 8009802:	b083      	sub	sp, #12
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009808:	bf00      	nop
 800980a:	370c      	adds	r7, #12
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr

08009814 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b082      	sub	sp, #8
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d101      	bne.n	8009826 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009822:	2301      	movs	r3, #1
 8009824:	e042      	b.n	80098ac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800982c:	2b00      	cmp	r3, #0
 800982e:	d106      	bne.n	800983e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2200      	movs	r2, #0
 8009834:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f7f8 fdd5 	bl	80023e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2224      	movs	r2, #36	; 0x24
 8009842:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	681a      	ldr	r2, [r3, #0]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f022 0201 	bic.w	r2, r2, #1
 8009854:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f000 fbea 	bl	800a030 <UART_SetConfig>
 800985c:	4603      	mov	r3, r0
 800985e:	2b01      	cmp	r3, #1
 8009860:	d101      	bne.n	8009866 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009862:	2301      	movs	r3, #1
 8009864:	e022      	b.n	80098ac <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800986a:	2b00      	cmp	r3, #0
 800986c:	d002      	beq.n	8009874 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f001 fa4a 	bl	800ad08 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	685a      	ldr	r2, [r3, #4]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009882:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	689a      	ldr	r2, [r3, #8]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009892:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	681a      	ldr	r2, [r3, #0]
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f042 0201 	orr.w	r2, r2, #1
 80098a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f001 fad1 	bl	800ae4c <UART_CheckIdleState>
 80098aa:	4603      	mov	r3, r0
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3708      	adds	r7, #8
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}

080098b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b0ba      	sub	sp, #232	; 0xe8
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	69db      	ldr	r3, [r3, #28]
 80098c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	689b      	ldr	r3, [r3, #8]
 80098d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80098da:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80098de:	f640 030f 	movw	r3, #2063	; 0x80f
 80098e2:	4013      	ands	r3, r2
 80098e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80098e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d11b      	bne.n	8009928 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80098f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098f4:	f003 0320 	and.w	r3, r3, #32
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d015      	beq.n	8009928 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80098fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009900:	f003 0320 	and.w	r3, r3, #32
 8009904:	2b00      	cmp	r3, #0
 8009906:	d105      	bne.n	8009914 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009908:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800990c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009910:	2b00      	cmp	r3, #0
 8009912:	d009      	beq.n	8009928 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009918:	2b00      	cmp	r3, #0
 800991a:	f000 835a 	beq.w	8009fd2 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	4798      	blx	r3
      }
      return;
 8009926:	e354      	b.n	8009fd2 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009928:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800992c:	2b00      	cmp	r3, #0
 800992e:	f000 811f 	beq.w	8009b70 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009932:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009936:	4b8b      	ldr	r3, [pc, #556]	; (8009b64 <HAL_UART_IRQHandler+0x2b0>)
 8009938:	4013      	ands	r3, r2
 800993a:	2b00      	cmp	r3, #0
 800993c:	d106      	bne.n	800994c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800993e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009942:	4b89      	ldr	r3, [pc, #548]	; (8009b68 <HAL_UART_IRQHandler+0x2b4>)
 8009944:	4013      	ands	r3, r2
 8009946:	2b00      	cmp	r3, #0
 8009948:	f000 8112 	beq.w	8009b70 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800994c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009950:	f003 0301 	and.w	r3, r3, #1
 8009954:	2b00      	cmp	r3, #0
 8009956:	d011      	beq.n	800997c <HAL_UART_IRQHandler+0xc8>
 8009958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800995c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009960:	2b00      	cmp	r3, #0
 8009962:	d00b      	beq.n	800997c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	2201      	movs	r2, #1
 800996a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009972:	f043 0201 	orr.w	r2, r3, #1
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800997c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009980:	f003 0302 	and.w	r3, r3, #2
 8009984:	2b00      	cmp	r3, #0
 8009986:	d011      	beq.n	80099ac <HAL_UART_IRQHandler+0xf8>
 8009988:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800998c:	f003 0301 	and.w	r3, r3, #1
 8009990:	2b00      	cmp	r3, #0
 8009992:	d00b      	beq.n	80099ac <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	2202      	movs	r2, #2
 800999a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099a2:	f043 0204 	orr.w	r2, r3, #4
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80099ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099b0:	f003 0304 	and.w	r3, r3, #4
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d011      	beq.n	80099dc <HAL_UART_IRQHandler+0x128>
 80099b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80099bc:	f003 0301 	and.w	r3, r3, #1
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d00b      	beq.n	80099dc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	2204      	movs	r2, #4
 80099ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099d2:	f043 0202 	orr.w	r2, r3, #2
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80099dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099e0:	f003 0308 	and.w	r3, r3, #8
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d017      	beq.n	8009a18 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80099e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099ec:	f003 0320 	and.w	r3, r3, #32
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d105      	bne.n	8009a00 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80099f4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80099f8:	4b5a      	ldr	r3, [pc, #360]	; (8009b64 <HAL_UART_IRQHandler+0x2b0>)
 80099fa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d00b      	beq.n	8009a18 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	2208      	movs	r2, #8
 8009a06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a0e:	f043 0208 	orr.w	r2, r3, #8
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009a18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d012      	beq.n	8009a4a <HAL_UART_IRQHandler+0x196>
 8009a24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d00c      	beq.n	8009a4a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009a38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a40:	f043 0220 	orr.w	r2, r3, #32
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	f000 82c0 	beq.w	8009fd6 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a5a:	f003 0320 	and.w	r3, r3, #32
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d013      	beq.n	8009a8a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009a62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a66:	f003 0320 	and.w	r3, r3, #32
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d105      	bne.n	8009a7a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009a6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d007      	beq.n	8009a8a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d003      	beq.n	8009a8a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	689b      	ldr	r3, [r3, #8]
 8009a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a9e:	2b40      	cmp	r3, #64	; 0x40
 8009aa0:	d005      	beq.n	8009aae <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009aa2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009aa6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d04f      	beq.n	8009b4e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f001 fae0 	bl	800b074 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	689b      	ldr	r3, [r3, #8]
 8009aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009abe:	2b40      	cmp	r3, #64	; 0x40
 8009ac0:	d141      	bne.n	8009b46 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	3308      	adds	r3, #8
 8009ac8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009acc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009ad0:	e853 3f00 	ldrex	r3, [r3]
 8009ad4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009ad8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009adc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ae0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	3308      	adds	r3, #8
 8009aea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009aee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009af2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009af6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009afa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009afe:	e841 2300 	strex	r3, r2, [r1]
 8009b02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009b06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d1d9      	bne.n	8009ac2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d013      	beq.n	8009b3e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b1a:	4a14      	ldr	r2, [pc, #80]	; (8009b6c <HAL_UART_IRQHandler+0x2b8>)
 8009b1c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b22:	4618      	mov	r0, r3
 8009b24:	f7f9 fee0 	bl	80038e8 <HAL_DMA_Abort_IT>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d017      	beq.n	8009b5e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b34:	687a      	ldr	r2, [r7, #4]
 8009b36:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8009b38:	4610      	mov	r0, r2
 8009b3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b3c:	e00f      	b.n	8009b5e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f000 fa60 	bl	800a004 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b44:	e00b      	b.n	8009b5e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f000 fa5c 	bl	800a004 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b4c:	e007      	b.n	8009b5e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f000 fa58 	bl	800a004 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2200      	movs	r2, #0
 8009b58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8009b5c:	e23b      	b.n	8009fd6 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b5e:	bf00      	nop
    return;
 8009b60:	e239      	b.n	8009fd6 <HAL_UART_IRQHandler+0x722>
 8009b62:	bf00      	nop
 8009b64:	10000001 	.word	0x10000001
 8009b68:	04000120 	.word	0x04000120
 8009b6c:	0800b141 	.word	0x0800b141

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b74:	2b01      	cmp	r3, #1
 8009b76:	f040 81ce 	bne.w	8009f16 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b7e:	f003 0310 	and.w	r3, r3, #16
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	f000 81c7 	beq.w	8009f16 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b8c:	f003 0310 	and.w	r3, r3, #16
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	f000 81c0 	beq.w	8009f16 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	2210      	movs	r2, #16
 8009b9c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	689b      	ldr	r3, [r3, #8]
 8009ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ba8:	2b40      	cmp	r3, #64	; 0x40
 8009baa:	f040 813b 	bne.w	8009e24 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	4a8b      	ldr	r2, [pc, #556]	; (8009de4 <HAL_UART_IRQHandler+0x530>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d059      	beq.n	8009c6e <HAL_UART_IRQHandler+0x3ba>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4a89      	ldr	r2, [pc, #548]	; (8009de8 <HAL_UART_IRQHandler+0x534>)
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	d053      	beq.n	8009c6e <HAL_UART_IRQHandler+0x3ba>
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	4a87      	ldr	r2, [pc, #540]	; (8009dec <HAL_UART_IRQHandler+0x538>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d04d      	beq.n	8009c6e <HAL_UART_IRQHandler+0x3ba>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	4a85      	ldr	r2, [pc, #532]	; (8009df0 <HAL_UART_IRQHandler+0x53c>)
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d047      	beq.n	8009c6e <HAL_UART_IRQHandler+0x3ba>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4a83      	ldr	r2, [pc, #524]	; (8009df4 <HAL_UART_IRQHandler+0x540>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d041      	beq.n	8009c6e <HAL_UART_IRQHandler+0x3ba>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4a81      	ldr	r2, [pc, #516]	; (8009df8 <HAL_UART_IRQHandler+0x544>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d03b      	beq.n	8009c6e <HAL_UART_IRQHandler+0x3ba>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	4a7f      	ldr	r2, [pc, #508]	; (8009dfc <HAL_UART_IRQHandler+0x548>)
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	d035      	beq.n	8009c6e <HAL_UART_IRQHandler+0x3ba>
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	4a7d      	ldr	r2, [pc, #500]	; (8009e00 <HAL_UART_IRQHandler+0x54c>)
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d02f      	beq.n	8009c6e <HAL_UART_IRQHandler+0x3ba>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	4a7b      	ldr	r2, [pc, #492]	; (8009e04 <HAL_UART_IRQHandler+0x550>)
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d029      	beq.n	8009c6e <HAL_UART_IRQHandler+0x3ba>
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4a79      	ldr	r2, [pc, #484]	; (8009e08 <HAL_UART_IRQHandler+0x554>)
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d023      	beq.n	8009c6e <HAL_UART_IRQHandler+0x3ba>
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	4a77      	ldr	r2, [pc, #476]	; (8009e0c <HAL_UART_IRQHandler+0x558>)
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d01d      	beq.n	8009c6e <HAL_UART_IRQHandler+0x3ba>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	4a75      	ldr	r2, [pc, #468]	; (8009e10 <HAL_UART_IRQHandler+0x55c>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d017      	beq.n	8009c6e <HAL_UART_IRQHandler+0x3ba>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	4a73      	ldr	r2, [pc, #460]	; (8009e14 <HAL_UART_IRQHandler+0x560>)
 8009c46:	4293      	cmp	r3, r2
 8009c48:	d011      	beq.n	8009c6e <HAL_UART_IRQHandler+0x3ba>
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	4a71      	ldr	r2, [pc, #452]	; (8009e18 <HAL_UART_IRQHandler+0x564>)
 8009c52:	4293      	cmp	r3, r2
 8009c54:	d00b      	beq.n	8009c6e <HAL_UART_IRQHandler+0x3ba>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4a6f      	ldr	r2, [pc, #444]	; (8009e1c <HAL_UART_IRQHandler+0x568>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d005      	beq.n	8009c6e <HAL_UART_IRQHandler+0x3ba>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	4a6d      	ldr	r2, [pc, #436]	; (8009e20 <HAL_UART_IRQHandler+0x56c>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d105      	bne.n	8009c7a <HAL_UART_IRQHandler+0x3c6>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	685b      	ldr	r3, [r3, #4]
 8009c76:	b29b      	uxth	r3, r3
 8009c78:	e004      	b.n	8009c84 <HAL_UART_IRQHandler+0x3d0>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	b29b      	uxth	r3, r3
 8009c84:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009c88:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	f000 81a4 	beq.w	8009fda <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009c98:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009c9c:	429a      	cmp	r2, r3
 8009c9e:	f080 819c 	bcs.w	8009fda <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009ca8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009cb0:	69db      	ldr	r3, [r3, #28]
 8009cb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cb6:	f000 8086 	beq.w	8009dc6 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cc2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009cc6:	e853 3f00 	ldrex	r3, [r3]
 8009cca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009cce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009cd2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009cd6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	461a      	mov	r2, r3
 8009ce0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009ce4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009ce8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cec:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009cf0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009cf4:	e841 2300 	strex	r3, r2, [r1]
 8009cf8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009cfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d1da      	bne.n	8009cba <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	3308      	adds	r3, #8
 8009d0a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d0e:	e853 3f00 	ldrex	r3, [r3]
 8009d12:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009d14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d16:	f023 0301 	bic.w	r3, r3, #1
 8009d1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	3308      	adds	r3, #8
 8009d24:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009d28:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009d2c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d2e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009d30:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009d34:	e841 2300 	strex	r3, r2, [r1]
 8009d38:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009d3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d1e1      	bne.n	8009d04 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	3308      	adds	r3, #8
 8009d46:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d4a:	e853 3f00 	ldrex	r3, [r3]
 8009d4e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009d50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	3308      	adds	r3, #8
 8009d60:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009d64:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009d66:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d68:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009d6a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009d6c:	e841 2300 	strex	r3, r2, [r1]
 8009d70:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009d72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d1e3      	bne.n	8009d40 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2220      	movs	r2, #32
 8009d7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2200      	movs	r2, #0
 8009d84:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d8e:	e853 3f00 	ldrex	r3, [r3]
 8009d92:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009d94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d96:	f023 0310 	bic.w	r3, r3, #16
 8009d9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	461a      	mov	r2, r3
 8009da4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009da8:	65bb      	str	r3, [r7, #88]	; 0x58
 8009daa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009dae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009db0:	e841 2300 	strex	r3, r2, [r1]
 8009db4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009db6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d1e4      	bne.n	8009d86 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f7f9 fa73 	bl	80032ac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009dd2:	b29b      	uxth	r3, r3
 8009dd4:	1ad3      	subs	r3, r2, r3
 8009dd6:	b29b      	uxth	r3, r3
 8009dd8:	4619      	mov	r1, r3
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 f91c 	bl	800a018 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009de0:	e0fb      	b.n	8009fda <HAL_UART_IRQHandler+0x726>
 8009de2:	bf00      	nop
 8009de4:	40020010 	.word	0x40020010
 8009de8:	40020028 	.word	0x40020028
 8009dec:	40020040 	.word	0x40020040
 8009df0:	40020058 	.word	0x40020058
 8009df4:	40020070 	.word	0x40020070
 8009df8:	40020088 	.word	0x40020088
 8009dfc:	400200a0 	.word	0x400200a0
 8009e00:	400200b8 	.word	0x400200b8
 8009e04:	40020410 	.word	0x40020410
 8009e08:	40020428 	.word	0x40020428
 8009e0c:	40020440 	.word	0x40020440
 8009e10:	40020458 	.word	0x40020458
 8009e14:	40020470 	.word	0x40020470
 8009e18:	40020488 	.word	0x40020488
 8009e1c:	400204a0 	.word	0x400204a0
 8009e20:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009e30:	b29b      	uxth	r3, r3
 8009e32:	1ad3      	subs	r3, r2, r3
 8009e34:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	f000 80cc 	beq.w	8009fde <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8009e46:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	f000 80c7 	beq.w	8009fde <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e58:	e853 3f00 	ldrex	r3, [r3]
 8009e5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009e64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009e72:	647b      	str	r3, [r7, #68]	; 0x44
 8009e74:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009e78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e7a:	e841 2300 	strex	r3, r2, [r1]
 8009e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d1e4      	bne.n	8009e50 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	3308      	adds	r3, #8
 8009e8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e90:	e853 3f00 	ldrex	r3, [r3]
 8009e94:	623b      	str	r3, [r7, #32]
   return(result);
 8009e96:	6a3a      	ldr	r2, [r7, #32]
 8009e98:	4b54      	ldr	r3, [pc, #336]	; (8009fec <HAL_UART_IRQHandler+0x738>)
 8009e9a:	4013      	ands	r3, r2
 8009e9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	3308      	adds	r3, #8
 8009ea6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009eaa:	633a      	str	r2, [r7, #48]	; 0x30
 8009eac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009eb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009eb2:	e841 2300 	strex	r3, r2, [r1]
 8009eb6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d1e3      	bne.n	8009e86 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2220      	movs	r2, #32
 8009ec2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	e853 3f00 	ldrex	r3, [r3]
 8009ede:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	f023 0310 	bic.w	r3, r3, #16
 8009ee6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	461a      	mov	r2, r3
 8009ef0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009ef4:	61fb      	str	r3, [r7, #28]
 8009ef6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ef8:	69b9      	ldr	r1, [r7, #24]
 8009efa:	69fa      	ldr	r2, [r7, #28]
 8009efc:	e841 2300 	strex	r3, r2, [r1]
 8009f00:	617b      	str	r3, [r7, #20]
   return(result);
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d1e4      	bne.n	8009ed2 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009f08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009f0c:	4619      	mov	r1, r3
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f000 f882 	bl	800a018 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009f14:	e063      	b.n	8009fde <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d00e      	beq.n	8009f40 <HAL_UART_IRQHandler+0x68c>
 8009f22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d008      	beq.n	8009f40 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009f36:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f001 f942 	bl	800b1c2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009f3e:	e051      	b.n	8009fe4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009f40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d014      	beq.n	8009f76 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d105      	bne.n	8009f64 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009f58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d008      	beq.n	8009f76 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d03a      	beq.n	8009fe2 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	4798      	blx	r3
    }
    return;
 8009f74:	e035      	b.n	8009fe2 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d009      	beq.n	8009f96 <HAL_UART_IRQHandler+0x6e2>
 8009f82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d003      	beq.n	8009f96 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f001 f8ec 	bl	800b16c <UART_EndTransmit_IT>
    return;
 8009f94:	e026      	b.n	8009fe4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d009      	beq.n	8009fb6 <HAL_UART_IRQHandler+0x702>
 8009fa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009fa6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d003      	beq.n	8009fb6 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f001 f91b 	bl	800b1ea <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009fb4:	e016      	b.n	8009fe4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d010      	beq.n	8009fe4 <HAL_UART_IRQHandler+0x730>
 8009fc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	da0c      	bge.n	8009fe4 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f001 f903 	bl	800b1d6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009fd0:	e008      	b.n	8009fe4 <HAL_UART_IRQHandler+0x730>
      return;
 8009fd2:	bf00      	nop
 8009fd4:	e006      	b.n	8009fe4 <HAL_UART_IRQHandler+0x730>
    return;
 8009fd6:	bf00      	nop
 8009fd8:	e004      	b.n	8009fe4 <HAL_UART_IRQHandler+0x730>
      return;
 8009fda:	bf00      	nop
 8009fdc:	e002      	b.n	8009fe4 <HAL_UART_IRQHandler+0x730>
      return;
 8009fde:	bf00      	nop
 8009fe0:	e000      	b.n	8009fe4 <HAL_UART_IRQHandler+0x730>
    return;
 8009fe2:	bf00      	nop
  }
}
 8009fe4:	37e8      	adds	r7, #232	; 0xe8
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}
 8009fea:	bf00      	nop
 8009fec:	effffffe 	.word	0xeffffffe

08009ff0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b083      	sub	sp, #12
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009ff8:	bf00      	nop
 8009ffa:	370c      	adds	r7, #12
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a002:	4770      	bx	lr

0800a004 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a004:	b480      	push	{r7}
 800a006:	b083      	sub	sp, #12
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a00c:	bf00      	nop
 800a00e:	370c      	adds	r7, #12
 800a010:	46bd      	mov	sp, r7
 800a012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a016:	4770      	bx	lr

0800a018 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a018:	b480      	push	{r7}
 800a01a:	b083      	sub	sp, #12
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	460b      	mov	r3, r1
 800a022:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a024:	bf00      	nop
 800a026:	370c      	adds	r7, #12
 800a028:	46bd      	mov	sp, r7
 800a02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02e:	4770      	bx	lr

0800a030 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a030:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a034:	b092      	sub	sp, #72	; 0x48
 800a036:	af00      	add	r7, sp, #0
 800a038:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a03a:	2300      	movs	r3, #0
 800a03c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	689a      	ldr	r2, [r3, #8]
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	691b      	ldr	r3, [r3, #16]
 800a048:	431a      	orrs	r2, r3
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	695b      	ldr	r3, [r3, #20]
 800a04e:	431a      	orrs	r2, r3
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	69db      	ldr	r3, [r3, #28]
 800a054:	4313      	orrs	r3, r2
 800a056:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	681a      	ldr	r2, [r3, #0]
 800a05e:	4bbe      	ldr	r3, [pc, #760]	; (800a358 <UART_SetConfig+0x328>)
 800a060:	4013      	ands	r3, r2
 800a062:	697a      	ldr	r2, [r7, #20]
 800a064:	6812      	ldr	r2, [r2, #0]
 800a066:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a068:	430b      	orrs	r3, r1
 800a06a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	685b      	ldr	r3, [r3, #4]
 800a072:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	68da      	ldr	r2, [r3, #12]
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	430a      	orrs	r2, r1
 800a080:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	699b      	ldr	r3, [r3, #24]
 800a086:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	4ab3      	ldr	r2, [pc, #716]	; (800a35c <UART_SetConfig+0x32c>)
 800a08e:	4293      	cmp	r3, r2
 800a090:	d004      	beq.n	800a09c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a092:	697b      	ldr	r3, [r7, #20]
 800a094:	6a1b      	ldr	r3, [r3, #32]
 800a096:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a098:	4313      	orrs	r3, r2
 800a09a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	689a      	ldr	r2, [r3, #8]
 800a0a2:	4baf      	ldr	r3, [pc, #700]	; (800a360 <UART_SetConfig+0x330>)
 800a0a4:	4013      	ands	r3, r2
 800a0a6:	697a      	ldr	r2, [r7, #20]
 800a0a8:	6812      	ldr	r2, [r2, #0]
 800a0aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a0ac:	430b      	orrs	r3, r1
 800a0ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0b6:	f023 010f 	bic.w	r1, r3, #15
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	430a      	orrs	r2, r1
 800a0c4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	4aa6      	ldr	r2, [pc, #664]	; (800a364 <UART_SetConfig+0x334>)
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	d177      	bne.n	800a1c0 <UART_SetConfig+0x190>
 800a0d0:	4ba5      	ldr	r3, [pc, #660]	; (800a368 <UART_SetConfig+0x338>)
 800a0d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a0d8:	2b28      	cmp	r3, #40	; 0x28
 800a0da:	d86d      	bhi.n	800a1b8 <UART_SetConfig+0x188>
 800a0dc:	a201      	add	r2, pc, #4	; (adr r2, 800a0e4 <UART_SetConfig+0xb4>)
 800a0de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0e2:	bf00      	nop
 800a0e4:	0800a189 	.word	0x0800a189
 800a0e8:	0800a1b9 	.word	0x0800a1b9
 800a0ec:	0800a1b9 	.word	0x0800a1b9
 800a0f0:	0800a1b9 	.word	0x0800a1b9
 800a0f4:	0800a1b9 	.word	0x0800a1b9
 800a0f8:	0800a1b9 	.word	0x0800a1b9
 800a0fc:	0800a1b9 	.word	0x0800a1b9
 800a100:	0800a1b9 	.word	0x0800a1b9
 800a104:	0800a191 	.word	0x0800a191
 800a108:	0800a1b9 	.word	0x0800a1b9
 800a10c:	0800a1b9 	.word	0x0800a1b9
 800a110:	0800a1b9 	.word	0x0800a1b9
 800a114:	0800a1b9 	.word	0x0800a1b9
 800a118:	0800a1b9 	.word	0x0800a1b9
 800a11c:	0800a1b9 	.word	0x0800a1b9
 800a120:	0800a1b9 	.word	0x0800a1b9
 800a124:	0800a199 	.word	0x0800a199
 800a128:	0800a1b9 	.word	0x0800a1b9
 800a12c:	0800a1b9 	.word	0x0800a1b9
 800a130:	0800a1b9 	.word	0x0800a1b9
 800a134:	0800a1b9 	.word	0x0800a1b9
 800a138:	0800a1b9 	.word	0x0800a1b9
 800a13c:	0800a1b9 	.word	0x0800a1b9
 800a140:	0800a1b9 	.word	0x0800a1b9
 800a144:	0800a1a1 	.word	0x0800a1a1
 800a148:	0800a1b9 	.word	0x0800a1b9
 800a14c:	0800a1b9 	.word	0x0800a1b9
 800a150:	0800a1b9 	.word	0x0800a1b9
 800a154:	0800a1b9 	.word	0x0800a1b9
 800a158:	0800a1b9 	.word	0x0800a1b9
 800a15c:	0800a1b9 	.word	0x0800a1b9
 800a160:	0800a1b9 	.word	0x0800a1b9
 800a164:	0800a1a9 	.word	0x0800a1a9
 800a168:	0800a1b9 	.word	0x0800a1b9
 800a16c:	0800a1b9 	.word	0x0800a1b9
 800a170:	0800a1b9 	.word	0x0800a1b9
 800a174:	0800a1b9 	.word	0x0800a1b9
 800a178:	0800a1b9 	.word	0x0800a1b9
 800a17c:	0800a1b9 	.word	0x0800a1b9
 800a180:	0800a1b9 	.word	0x0800a1b9
 800a184:	0800a1b1 	.word	0x0800a1b1
 800a188:	2301      	movs	r3, #1
 800a18a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a18e:	e326      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a190:	2304      	movs	r3, #4
 800a192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a196:	e322      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a198:	2308      	movs	r3, #8
 800a19a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a19e:	e31e      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a1a0:	2310      	movs	r3, #16
 800a1a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1a6:	e31a      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a1a8:	2320      	movs	r3, #32
 800a1aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1ae:	e316      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a1b0:	2340      	movs	r3, #64	; 0x40
 800a1b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1b6:	e312      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a1b8:	2380      	movs	r3, #128	; 0x80
 800a1ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1be:	e30e      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a1c0:	697b      	ldr	r3, [r7, #20]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	4a69      	ldr	r2, [pc, #420]	; (800a36c <UART_SetConfig+0x33c>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d130      	bne.n	800a22c <UART_SetConfig+0x1fc>
 800a1ca:	4b67      	ldr	r3, [pc, #412]	; (800a368 <UART_SetConfig+0x338>)
 800a1cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1ce:	f003 0307 	and.w	r3, r3, #7
 800a1d2:	2b05      	cmp	r3, #5
 800a1d4:	d826      	bhi.n	800a224 <UART_SetConfig+0x1f4>
 800a1d6:	a201      	add	r2, pc, #4	; (adr r2, 800a1dc <UART_SetConfig+0x1ac>)
 800a1d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1dc:	0800a1f5 	.word	0x0800a1f5
 800a1e0:	0800a1fd 	.word	0x0800a1fd
 800a1e4:	0800a205 	.word	0x0800a205
 800a1e8:	0800a20d 	.word	0x0800a20d
 800a1ec:	0800a215 	.word	0x0800a215
 800a1f0:	0800a21d 	.word	0x0800a21d
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1fa:	e2f0      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a1fc:	2304      	movs	r3, #4
 800a1fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a202:	e2ec      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a204:	2308      	movs	r3, #8
 800a206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a20a:	e2e8      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a20c:	2310      	movs	r3, #16
 800a20e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a212:	e2e4      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a214:	2320      	movs	r3, #32
 800a216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a21a:	e2e0      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a21c:	2340      	movs	r3, #64	; 0x40
 800a21e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a222:	e2dc      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a224:	2380      	movs	r3, #128	; 0x80
 800a226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a22a:	e2d8      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	4a4f      	ldr	r2, [pc, #316]	; (800a370 <UART_SetConfig+0x340>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d130      	bne.n	800a298 <UART_SetConfig+0x268>
 800a236:	4b4c      	ldr	r3, [pc, #304]	; (800a368 <UART_SetConfig+0x338>)
 800a238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a23a:	f003 0307 	and.w	r3, r3, #7
 800a23e:	2b05      	cmp	r3, #5
 800a240:	d826      	bhi.n	800a290 <UART_SetConfig+0x260>
 800a242:	a201      	add	r2, pc, #4	; (adr r2, 800a248 <UART_SetConfig+0x218>)
 800a244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a248:	0800a261 	.word	0x0800a261
 800a24c:	0800a269 	.word	0x0800a269
 800a250:	0800a271 	.word	0x0800a271
 800a254:	0800a279 	.word	0x0800a279
 800a258:	0800a281 	.word	0x0800a281
 800a25c:	0800a289 	.word	0x0800a289
 800a260:	2300      	movs	r3, #0
 800a262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a266:	e2ba      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a268:	2304      	movs	r3, #4
 800a26a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a26e:	e2b6      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a270:	2308      	movs	r3, #8
 800a272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a276:	e2b2      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a278:	2310      	movs	r3, #16
 800a27a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a27e:	e2ae      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a280:	2320      	movs	r3, #32
 800a282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a286:	e2aa      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a288:	2340      	movs	r3, #64	; 0x40
 800a28a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a28e:	e2a6      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a290:	2380      	movs	r3, #128	; 0x80
 800a292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a296:	e2a2      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	4a35      	ldr	r2, [pc, #212]	; (800a374 <UART_SetConfig+0x344>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d130      	bne.n	800a304 <UART_SetConfig+0x2d4>
 800a2a2:	4b31      	ldr	r3, [pc, #196]	; (800a368 <UART_SetConfig+0x338>)
 800a2a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2a6:	f003 0307 	and.w	r3, r3, #7
 800a2aa:	2b05      	cmp	r3, #5
 800a2ac:	d826      	bhi.n	800a2fc <UART_SetConfig+0x2cc>
 800a2ae:	a201      	add	r2, pc, #4	; (adr r2, 800a2b4 <UART_SetConfig+0x284>)
 800a2b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2b4:	0800a2cd 	.word	0x0800a2cd
 800a2b8:	0800a2d5 	.word	0x0800a2d5
 800a2bc:	0800a2dd 	.word	0x0800a2dd
 800a2c0:	0800a2e5 	.word	0x0800a2e5
 800a2c4:	0800a2ed 	.word	0x0800a2ed
 800a2c8:	0800a2f5 	.word	0x0800a2f5
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2d2:	e284      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a2d4:	2304      	movs	r3, #4
 800a2d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2da:	e280      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a2dc:	2308      	movs	r3, #8
 800a2de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2e2:	e27c      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a2e4:	2310      	movs	r3, #16
 800a2e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2ea:	e278      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a2ec:	2320      	movs	r3, #32
 800a2ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2f2:	e274      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a2f4:	2340      	movs	r3, #64	; 0x40
 800a2f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2fa:	e270      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a2fc:	2380      	movs	r3, #128	; 0x80
 800a2fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a302:	e26c      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	4a1b      	ldr	r2, [pc, #108]	; (800a378 <UART_SetConfig+0x348>)
 800a30a:	4293      	cmp	r3, r2
 800a30c:	d142      	bne.n	800a394 <UART_SetConfig+0x364>
 800a30e:	4b16      	ldr	r3, [pc, #88]	; (800a368 <UART_SetConfig+0x338>)
 800a310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a312:	f003 0307 	and.w	r3, r3, #7
 800a316:	2b05      	cmp	r3, #5
 800a318:	d838      	bhi.n	800a38c <UART_SetConfig+0x35c>
 800a31a:	a201      	add	r2, pc, #4	; (adr r2, 800a320 <UART_SetConfig+0x2f0>)
 800a31c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a320:	0800a339 	.word	0x0800a339
 800a324:	0800a341 	.word	0x0800a341
 800a328:	0800a349 	.word	0x0800a349
 800a32c:	0800a351 	.word	0x0800a351
 800a330:	0800a37d 	.word	0x0800a37d
 800a334:	0800a385 	.word	0x0800a385
 800a338:	2300      	movs	r3, #0
 800a33a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a33e:	e24e      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a340:	2304      	movs	r3, #4
 800a342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a346:	e24a      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a348:	2308      	movs	r3, #8
 800a34a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a34e:	e246      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a350:	2310      	movs	r3, #16
 800a352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a356:	e242      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a358:	cfff69f3 	.word	0xcfff69f3
 800a35c:	58000c00 	.word	0x58000c00
 800a360:	11fff4ff 	.word	0x11fff4ff
 800a364:	40011000 	.word	0x40011000
 800a368:	58024400 	.word	0x58024400
 800a36c:	40004400 	.word	0x40004400
 800a370:	40004800 	.word	0x40004800
 800a374:	40004c00 	.word	0x40004c00
 800a378:	40005000 	.word	0x40005000
 800a37c:	2320      	movs	r3, #32
 800a37e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a382:	e22c      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a384:	2340      	movs	r3, #64	; 0x40
 800a386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a38a:	e228      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a38c:	2380      	movs	r3, #128	; 0x80
 800a38e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a392:	e224      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4ab1      	ldr	r2, [pc, #708]	; (800a660 <UART_SetConfig+0x630>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d176      	bne.n	800a48c <UART_SetConfig+0x45c>
 800a39e:	4bb1      	ldr	r3, [pc, #708]	; (800a664 <UART_SetConfig+0x634>)
 800a3a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a3a6:	2b28      	cmp	r3, #40	; 0x28
 800a3a8:	d86c      	bhi.n	800a484 <UART_SetConfig+0x454>
 800a3aa:	a201      	add	r2, pc, #4	; (adr r2, 800a3b0 <UART_SetConfig+0x380>)
 800a3ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3b0:	0800a455 	.word	0x0800a455
 800a3b4:	0800a485 	.word	0x0800a485
 800a3b8:	0800a485 	.word	0x0800a485
 800a3bc:	0800a485 	.word	0x0800a485
 800a3c0:	0800a485 	.word	0x0800a485
 800a3c4:	0800a485 	.word	0x0800a485
 800a3c8:	0800a485 	.word	0x0800a485
 800a3cc:	0800a485 	.word	0x0800a485
 800a3d0:	0800a45d 	.word	0x0800a45d
 800a3d4:	0800a485 	.word	0x0800a485
 800a3d8:	0800a485 	.word	0x0800a485
 800a3dc:	0800a485 	.word	0x0800a485
 800a3e0:	0800a485 	.word	0x0800a485
 800a3e4:	0800a485 	.word	0x0800a485
 800a3e8:	0800a485 	.word	0x0800a485
 800a3ec:	0800a485 	.word	0x0800a485
 800a3f0:	0800a465 	.word	0x0800a465
 800a3f4:	0800a485 	.word	0x0800a485
 800a3f8:	0800a485 	.word	0x0800a485
 800a3fc:	0800a485 	.word	0x0800a485
 800a400:	0800a485 	.word	0x0800a485
 800a404:	0800a485 	.word	0x0800a485
 800a408:	0800a485 	.word	0x0800a485
 800a40c:	0800a485 	.word	0x0800a485
 800a410:	0800a46d 	.word	0x0800a46d
 800a414:	0800a485 	.word	0x0800a485
 800a418:	0800a485 	.word	0x0800a485
 800a41c:	0800a485 	.word	0x0800a485
 800a420:	0800a485 	.word	0x0800a485
 800a424:	0800a485 	.word	0x0800a485
 800a428:	0800a485 	.word	0x0800a485
 800a42c:	0800a485 	.word	0x0800a485
 800a430:	0800a475 	.word	0x0800a475
 800a434:	0800a485 	.word	0x0800a485
 800a438:	0800a485 	.word	0x0800a485
 800a43c:	0800a485 	.word	0x0800a485
 800a440:	0800a485 	.word	0x0800a485
 800a444:	0800a485 	.word	0x0800a485
 800a448:	0800a485 	.word	0x0800a485
 800a44c:	0800a485 	.word	0x0800a485
 800a450:	0800a47d 	.word	0x0800a47d
 800a454:	2301      	movs	r3, #1
 800a456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a45a:	e1c0      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a45c:	2304      	movs	r3, #4
 800a45e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a462:	e1bc      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a464:	2308      	movs	r3, #8
 800a466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a46a:	e1b8      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a46c:	2310      	movs	r3, #16
 800a46e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a472:	e1b4      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a474:	2320      	movs	r3, #32
 800a476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a47a:	e1b0      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a47c:	2340      	movs	r3, #64	; 0x40
 800a47e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a482:	e1ac      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a484:	2380      	movs	r3, #128	; 0x80
 800a486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a48a:	e1a8      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a48c:	697b      	ldr	r3, [r7, #20]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	4a75      	ldr	r2, [pc, #468]	; (800a668 <UART_SetConfig+0x638>)
 800a492:	4293      	cmp	r3, r2
 800a494:	d130      	bne.n	800a4f8 <UART_SetConfig+0x4c8>
 800a496:	4b73      	ldr	r3, [pc, #460]	; (800a664 <UART_SetConfig+0x634>)
 800a498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a49a:	f003 0307 	and.w	r3, r3, #7
 800a49e:	2b05      	cmp	r3, #5
 800a4a0:	d826      	bhi.n	800a4f0 <UART_SetConfig+0x4c0>
 800a4a2:	a201      	add	r2, pc, #4	; (adr r2, 800a4a8 <UART_SetConfig+0x478>)
 800a4a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4a8:	0800a4c1 	.word	0x0800a4c1
 800a4ac:	0800a4c9 	.word	0x0800a4c9
 800a4b0:	0800a4d1 	.word	0x0800a4d1
 800a4b4:	0800a4d9 	.word	0x0800a4d9
 800a4b8:	0800a4e1 	.word	0x0800a4e1
 800a4bc:	0800a4e9 	.word	0x0800a4e9
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4c6:	e18a      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a4c8:	2304      	movs	r3, #4
 800a4ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4ce:	e186      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a4d0:	2308      	movs	r3, #8
 800a4d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4d6:	e182      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a4d8:	2310      	movs	r3, #16
 800a4da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4de:	e17e      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a4e0:	2320      	movs	r3, #32
 800a4e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4e6:	e17a      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a4e8:	2340      	movs	r3, #64	; 0x40
 800a4ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4ee:	e176      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a4f0:	2380      	movs	r3, #128	; 0x80
 800a4f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4f6:	e172      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	4a5b      	ldr	r2, [pc, #364]	; (800a66c <UART_SetConfig+0x63c>)
 800a4fe:	4293      	cmp	r3, r2
 800a500:	d130      	bne.n	800a564 <UART_SetConfig+0x534>
 800a502:	4b58      	ldr	r3, [pc, #352]	; (800a664 <UART_SetConfig+0x634>)
 800a504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a506:	f003 0307 	and.w	r3, r3, #7
 800a50a:	2b05      	cmp	r3, #5
 800a50c:	d826      	bhi.n	800a55c <UART_SetConfig+0x52c>
 800a50e:	a201      	add	r2, pc, #4	; (adr r2, 800a514 <UART_SetConfig+0x4e4>)
 800a510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a514:	0800a52d 	.word	0x0800a52d
 800a518:	0800a535 	.word	0x0800a535
 800a51c:	0800a53d 	.word	0x0800a53d
 800a520:	0800a545 	.word	0x0800a545
 800a524:	0800a54d 	.word	0x0800a54d
 800a528:	0800a555 	.word	0x0800a555
 800a52c:	2300      	movs	r3, #0
 800a52e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a532:	e154      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a534:	2304      	movs	r3, #4
 800a536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a53a:	e150      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a53c:	2308      	movs	r3, #8
 800a53e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a542:	e14c      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a544:	2310      	movs	r3, #16
 800a546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a54a:	e148      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a54c:	2320      	movs	r3, #32
 800a54e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a552:	e144      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a554:	2340      	movs	r3, #64	; 0x40
 800a556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a55a:	e140      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a55c:	2380      	movs	r3, #128	; 0x80
 800a55e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a562:	e13c      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a564:	697b      	ldr	r3, [r7, #20]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	4a41      	ldr	r2, [pc, #260]	; (800a670 <UART_SetConfig+0x640>)
 800a56a:	4293      	cmp	r3, r2
 800a56c:	f040 8082 	bne.w	800a674 <UART_SetConfig+0x644>
 800a570:	4b3c      	ldr	r3, [pc, #240]	; (800a664 <UART_SetConfig+0x634>)
 800a572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a574:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a578:	2b28      	cmp	r3, #40	; 0x28
 800a57a:	d86d      	bhi.n	800a658 <UART_SetConfig+0x628>
 800a57c:	a201      	add	r2, pc, #4	; (adr r2, 800a584 <UART_SetConfig+0x554>)
 800a57e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a582:	bf00      	nop
 800a584:	0800a629 	.word	0x0800a629
 800a588:	0800a659 	.word	0x0800a659
 800a58c:	0800a659 	.word	0x0800a659
 800a590:	0800a659 	.word	0x0800a659
 800a594:	0800a659 	.word	0x0800a659
 800a598:	0800a659 	.word	0x0800a659
 800a59c:	0800a659 	.word	0x0800a659
 800a5a0:	0800a659 	.word	0x0800a659
 800a5a4:	0800a631 	.word	0x0800a631
 800a5a8:	0800a659 	.word	0x0800a659
 800a5ac:	0800a659 	.word	0x0800a659
 800a5b0:	0800a659 	.word	0x0800a659
 800a5b4:	0800a659 	.word	0x0800a659
 800a5b8:	0800a659 	.word	0x0800a659
 800a5bc:	0800a659 	.word	0x0800a659
 800a5c0:	0800a659 	.word	0x0800a659
 800a5c4:	0800a639 	.word	0x0800a639
 800a5c8:	0800a659 	.word	0x0800a659
 800a5cc:	0800a659 	.word	0x0800a659
 800a5d0:	0800a659 	.word	0x0800a659
 800a5d4:	0800a659 	.word	0x0800a659
 800a5d8:	0800a659 	.word	0x0800a659
 800a5dc:	0800a659 	.word	0x0800a659
 800a5e0:	0800a659 	.word	0x0800a659
 800a5e4:	0800a641 	.word	0x0800a641
 800a5e8:	0800a659 	.word	0x0800a659
 800a5ec:	0800a659 	.word	0x0800a659
 800a5f0:	0800a659 	.word	0x0800a659
 800a5f4:	0800a659 	.word	0x0800a659
 800a5f8:	0800a659 	.word	0x0800a659
 800a5fc:	0800a659 	.word	0x0800a659
 800a600:	0800a659 	.word	0x0800a659
 800a604:	0800a649 	.word	0x0800a649
 800a608:	0800a659 	.word	0x0800a659
 800a60c:	0800a659 	.word	0x0800a659
 800a610:	0800a659 	.word	0x0800a659
 800a614:	0800a659 	.word	0x0800a659
 800a618:	0800a659 	.word	0x0800a659
 800a61c:	0800a659 	.word	0x0800a659
 800a620:	0800a659 	.word	0x0800a659
 800a624:	0800a651 	.word	0x0800a651
 800a628:	2301      	movs	r3, #1
 800a62a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a62e:	e0d6      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a630:	2304      	movs	r3, #4
 800a632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a636:	e0d2      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a638:	2308      	movs	r3, #8
 800a63a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a63e:	e0ce      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a640:	2310      	movs	r3, #16
 800a642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a646:	e0ca      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a648:	2320      	movs	r3, #32
 800a64a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a64e:	e0c6      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a650:	2340      	movs	r3, #64	; 0x40
 800a652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a656:	e0c2      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a658:	2380      	movs	r3, #128	; 0x80
 800a65a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a65e:	e0be      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a660:	40011400 	.word	0x40011400
 800a664:	58024400 	.word	0x58024400
 800a668:	40007800 	.word	0x40007800
 800a66c:	40007c00 	.word	0x40007c00
 800a670:	40011800 	.word	0x40011800
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	4aad      	ldr	r2, [pc, #692]	; (800a930 <UART_SetConfig+0x900>)
 800a67a:	4293      	cmp	r3, r2
 800a67c:	d176      	bne.n	800a76c <UART_SetConfig+0x73c>
 800a67e:	4bad      	ldr	r3, [pc, #692]	; (800a934 <UART_SetConfig+0x904>)
 800a680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a682:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a686:	2b28      	cmp	r3, #40	; 0x28
 800a688:	d86c      	bhi.n	800a764 <UART_SetConfig+0x734>
 800a68a:	a201      	add	r2, pc, #4	; (adr r2, 800a690 <UART_SetConfig+0x660>)
 800a68c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a690:	0800a735 	.word	0x0800a735
 800a694:	0800a765 	.word	0x0800a765
 800a698:	0800a765 	.word	0x0800a765
 800a69c:	0800a765 	.word	0x0800a765
 800a6a0:	0800a765 	.word	0x0800a765
 800a6a4:	0800a765 	.word	0x0800a765
 800a6a8:	0800a765 	.word	0x0800a765
 800a6ac:	0800a765 	.word	0x0800a765
 800a6b0:	0800a73d 	.word	0x0800a73d
 800a6b4:	0800a765 	.word	0x0800a765
 800a6b8:	0800a765 	.word	0x0800a765
 800a6bc:	0800a765 	.word	0x0800a765
 800a6c0:	0800a765 	.word	0x0800a765
 800a6c4:	0800a765 	.word	0x0800a765
 800a6c8:	0800a765 	.word	0x0800a765
 800a6cc:	0800a765 	.word	0x0800a765
 800a6d0:	0800a745 	.word	0x0800a745
 800a6d4:	0800a765 	.word	0x0800a765
 800a6d8:	0800a765 	.word	0x0800a765
 800a6dc:	0800a765 	.word	0x0800a765
 800a6e0:	0800a765 	.word	0x0800a765
 800a6e4:	0800a765 	.word	0x0800a765
 800a6e8:	0800a765 	.word	0x0800a765
 800a6ec:	0800a765 	.word	0x0800a765
 800a6f0:	0800a74d 	.word	0x0800a74d
 800a6f4:	0800a765 	.word	0x0800a765
 800a6f8:	0800a765 	.word	0x0800a765
 800a6fc:	0800a765 	.word	0x0800a765
 800a700:	0800a765 	.word	0x0800a765
 800a704:	0800a765 	.word	0x0800a765
 800a708:	0800a765 	.word	0x0800a765
 800a70c:	0800a765 	.word	0x0800a765
 800a710:	0800a755 	.word	0x0800a755
 800a714:	0800a765 	.word	0x0800a765
 800a718:	0800a765 	.word	0x0800a765
 800a71c:	0800a765 	.word	0x0800a765
 800a720:	0800a765 	.word	0x0800a765
 800a724:	0800a765 	.word	0x0800a765
 800a728:	0800a765 	.word	0x0800a765
 800a72c:	0800a765 	.word	0x0800a765
 800a730:	0800a75d 	.word	0x0800a75d
 800a734:	2301      	movs	r3, #1
 800a736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a73a:	e050      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a73c:	2304      	movs	r3, #4
 800a73e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a742:	e04c      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a744:	2308      	movs	r3, #8
 800a746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a74a:	e048      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a74c:	2310      	movs	r3, #16
 800a74e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a752:	e044      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a754:	2320      	movs	r3, #32
 800a756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a75a:	e040      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a75c:	2340      	movs	r3, #64	; 0x40
 800a75e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a762:	e03c      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a764:	2380      	movs	r3, #128	; 0x80
 800a766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a76a:	e038      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	4a71      	ldr	r2, [pc, #452]	; (800a938 <UART_SetConfig+0x908>)
 800a772:	4293      	cmp	r3, r2
 800a774:	d130      	bne.n	800a7d8 <UART_SetConfig+0x7a8>
 800a776:	4b6f      	ldr	r3, [pc, #444]	; (800a934 <UART_SetConfig+0x904>)
 800a778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a77a:	f003 0307 	and.w	r3, r3, #7
 800a77e:	2b05      	cmp	r3, #5
 800a780:	d826      	bhi.n	800a7d0 <UART_SetConfig+0x7a0>
 800a782:	a201      	add	r2, pc, #4	; (adr r2, 800a788 <UART_SetConfig+0x758>)
 800a784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a788:	0800a7a1 	.word	0x0800a7a1
 800a78c:	0800a7a9 	.word	0x0800a7a9
 800a790:	0800a7b1 	.word	0x0800a7b1
 800a794:	0800a7b9 	.word	0x0800a7b9
 800a798:	0800a7c1 	.word	0x0800a7c1
 800a79c:	0800a7c9 	.word	0x0800a7c9
 800a7a0:	2302      	movs	r3, #2
 800a7a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7a6:	e01a      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a7a8:	2304      	movs	r3, #4
 800a7aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7ae:	e016      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a7b0:	2308      	movs	r3, #8
 800a7b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7b6:	e012      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a7b8:	2310      	movs	r3, #16
 800a7ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7be:	e00e      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a7c0:	2320      	movs	r3, #32
 800a7c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7c6:	e00a      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a7c8:	2340      	movs	r3, #64	; 0x40
 800a7ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7ce:	e006      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a7d0:	2380      	movs	r3, #128	; 0x80
 800a7d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7d6:	e002      	b.n	800a7de <UART_SetConfig+0x7ae>
 800a7d8:	2380      	movs	r3, #128	; 0x80
 800a7da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	4a55      	ldr	r2, [pc, #340]	; (800a938 <UART_SetConfig+0x908>)
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	f040 80f8 	bne.w	800a9da <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a7ea:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a7ee:	2b20      	cmp	r3, #32
 800a7f0:	dc46      	bgt.n	800a880 <UART_SetConfig+0x850>
 800a7f2:	2b02      	cmp	r3, #2
 800a7f4:	db75      	blt.n	800a8e2 <UART_SetConfig+0x8b2>
 800a7f6:	3b02      	subs	r3, #2
 800a7f8:	2b1e      	cmp	r3, #30
 800a7fa:	d872      	bhi.n	800a8e2 <UART_SetConfig+0x8b2>
 800a7fc:	a201      	add	r2, pc, #4	; (adr r2, 800a804 <UART_SetConfig+0x7d4>)
 800a7fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a802:	bf00      	nop
 800a804:	0800a887 	.word	0x0800a887
 800a808:	0800a8e3 	.word	0x0800a8e3
 800a80c:	0800a88f 	.word	0x0800a88f
 800a810:	0800a8e3 	.word	0x0800a8e3
 800a814:	0800a8e3 	.word	0x0800a8e3
 800a818:	0800a8e3 	.word	0x0800a8e3
 800a81c:	0800a89f 	.word	0x0800a89f
 800a820:	0800a8e3 	.word	0x0800a8e3
 800a824:	0800a8e3 	.word	0x0800a8e3
 800a828:	0800a8e3 	.word	0x0800a8e3
 800a82c:	0800a8e3 	.word	0x0800a8e3
 800a830:	0800a8e3 	.word	0x0800a8e3
 800a834:	0800a8e3 	.word	0x0800a8e3
 800a838:	0800a8e3 	.word	0x0800a8e3
 800a83c:	0800a8af 	.word	0x0800a8af
 800a840:	0800a8e3 	.word	0x0800a8e3
 800a844:	0800a8e3 	.word	0x0800a8e3
 800a848:	0800a8e3 	.word	0x0800a8e3
 800a84c:	0800a8e3 	.word	0x0800a8e3
 800a850:	0800a8e3 	.word	0x0800a8e3
 800a854:	0800a8e3 	.word	0x0800a8e3
 800a858:	0800a8e3 	.word	0x0800a8e3
 800a85c:	0800a8e3 	.word	0x0800a8e3
 800a860:	0800a8e3 	.word	0x0800a8e3
 800a864:	0800a8e3 	.word	0x0800a8e3
 800a868:	0800a8e3 	.word	0x0800a8e3
 800a86c:	0800a8e3 	.word	0x0800a8e3
 800a870:	0800a8e3 	.word	0x0800a8e3
 800a874:	0800a8e3 	.word	0x0800a8e3
 800a878:	0800a8e3 	.word	0x0800a8e3
 800a87c:	0800a8d5 	.word	0x0800a8d5
 800a880:	2b40      	cmp	r3, #64	; 0x40
 800a882:	d02a      	beq.n	800a8da <UART_SetConfig+0x8aa>
 800a884:	e02d      	b.n	800a8e2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a886:	f7fd f863 	bl	8007950 <HAL_RCCEx_GetD3PCLK1Freq>
 800a88a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a88c:	e02f      	b.n	800a8ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a88e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a892:	4618      	mov	r0, r3
 800a894:	f7fd f872 	bl	800797c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a89a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a89c:	e027      	b.n	800a8ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a89e:	f107 0318 	add.w	r3, r7, #24
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f7fd f9be 	bl	8007c24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a8a8:	69fb      	ldr	r3, [r7, #28]
 800a8aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8ac:	e01f      	b.n	800a8ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a8ae:	4b21      	ldr	r3, [pc, #132]	; (800a934 <UART_SetConfig+0x904>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f003 0320 	and.w	r3, r3, #32
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d009      	beq.n	800a8ce <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a8ba:	4b1e      	ldr	r3, [pc, #120]	; (800a934 <UART_SetConfig+0x904>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	08db      	lsrs	r3, r3, #3
 800a8c0:	f003 0303 	and.w	r3, r3, #3
 800a8c4:	4a1d      	ldr	r2, [pc, #116]	; (800a93c <UART_SetConfig+0x90c>)
 800a8c6:	fa22 f303 	lsr.w	r3, r2, r3
 800a8ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a8cc:	e00f      	b.n	800a8ee <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a8ce:	4b1b      	ldr	r3, [pc, #108]	; (800a93c <UART_SetConfig+0x90c>)
 800a8d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8d2:	e00c      	b.n	800a8ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a8d4:	4b1a      	ldr	r3, [pc, #104]	; (800a940 <UART_SetConfig+0x910>)
 800a8d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8d8:	e009      	b.n	800a8ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a8da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a8de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8e0:	e005      	b.n	800a8ee <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a8ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a8ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	f000 81ee 	beq.w	800acd2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8fa:	4a12      	ldr	r2, [pc, #72]	; (800a944 <UART_SetConfig+0x914>)
 800a8fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a900:	461a      	mov	r2, r3
 800a902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a904:	fbb3 f3f2 	udiv	r3, r3, r2
 800a908:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a90a:	697b      	ldr	r3, [r7, #20]
 800a90c:	685a      	ldr	r2, [r3, #4]
 800a90e:	4613      	mov	r3, r2
 800a910:	005b      	lsls	r3, r3, #1
 800a912:	4413      	add	r3, r2
 800a914:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a916:	429a      	cmp	r2, r3
 800a918:	d305      	bcc.n	800a926 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	685b      	ldr	r3, [r3, #4]
 800a91e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a920:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a922:	429a      	cmp	r2, r3
 800a924:	d910      	bls.n	800a948 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800a926:	2301      	movs	r3, #1
 800a928:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a92c:	e1d1      	b.n	800acd2 <UART_SetConfig+0xca2>
 800a92e:	bf00      	nop
 800a930:	40011c00 	.word	0x40011c00
 800a934:	58024400 	.word	0x58024400
 800a938:	58000c00 	.word	0x58000c00
 800a93c:	03d09000 	.word	0x03d09000
 800a940:	003d0900 	.word	0x003d0900
 800a944:	0800b518 	.word	0x0800b518
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a94a:	2200      	movs	r2, #0
 800a94c:	60bb      	str	r3, [r7, #8]
 800a94e:	60fa      	str	r2, [r7, #12]
 800a950:	697b      	ldr	r3, [r7, #20]
 800a952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a954:	4ac0      	ldr	r2, [pc, #768]	; (800ac58 <UART_SetConfig+0xc28>)
 800a956:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a95a:	b29b      	uxth	r3, r3
 800a95c:	2200      	movs	r2, #0
 800a95e:	603b      	str	r3, [r7, #0]
 800a960:	607a      	str	r2, [r7, #4]
 800a962:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a966:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a96a:	f7f5 fcd1 	bl	8000310 <__aeabi_uldivmod>
 800a96e:	4602      	mov	r2, r0
 800a970:	460b      	mov	r3, r1
 800a972:	4610      	mov	r0, r2
 800a974:	4619      	mov	r1, r3
 800a976:	f04f 0200 	mov.w	r2, #0
 800a97a:	f04f 0300 	mov.w	r3, #0
 800a97e:	020b      	lsls	r3, r1, #8
 800a980:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a984:	0202      	lsls	r2, r0, #8
 800a986:	6979      	ldr	r1, [r7, #20]
 800a988:	6849      	ldr	r1, [r1, #4]
 800a98a:	0849      	lsrs	r1, r1, #1
 800a98c:	2000      	movs	r0, #0
 800a98e:	460c      	mov	r4, r1
 800a990:	4605      	mov	r5, r0
 800a992:	eb12 0804 	adds.w	r8, r2, r4
 800a996:	eb43 0905 	adc.w	r9, r3, r5
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	685b      	ldr	r3, [r3, #4]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	469a      	mov	sl, r3
 800a9a2:	4693      	mov	fp, r2
 800a9a4:	4652      	mov	r2, sl
 800a9a6:	465b      	mov	r3, fp
 800a9a8:	4640      	mov	r0, r8
 800a9aa:	4649      	mov	r1, r9
 800a9ac:	f7f5 fcb0 	bl	8000310 <__aeabi_uldivmod>
 800a9b0:	4602      	mov	r2, r0
 800a9b2:	460b      	mov	r3, r1
 800a9b4:	4613      	mov	r3, r2
 800a9b6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a9be:	d308      	bcc.n	800a9d2 <UART_SetConfig+0x9a2>
 800a9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a9c6:	d204      	bcs.n	800a9d2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a9ce:	60da      	str	r2, [r3, #12]
 800a9d0:	e17f      	b.n	800acd2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800a9d2:	2301      	movs	r3, #1
 800a9d4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a9d8:	e17b      	b.n	800acd2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a9da:	697b      	ldr	r3, [r7, #20]
 800a9dc:	69db      	ldr	r3, [r3, #28]
 800a9de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a9e2:	f040 80bd 	bne.w	800ab60 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800a9e6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a9ea:	2b20      	cmp	r3, #32
 800a9ec:	dc48      	bgt.n	800aa80 <UART_SetConfig+0xa50>
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	db7b      	blt.n	800aaea <UART_SetConfig+0xaba>
 800a9f2:	2b20      	cmp	r3, #32
 800a9f4:	d879      	bhi.n	800aaea <UART_SetConfig+0xaba>
 800a9f6:	a201      	add	r2, pc, #4	; (adr r2, 800a9fc <UART_SetConfig+0x9cc>)
 800a9f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9fc:	0800aa87 	.word	0x0800aa87
 800aa00:	0800aa8f 	.word	0x0800aa8f
 800aa04:	0800aaeb 	.word	0x0800aaeb
 800aa08:	0800aaeb 	.word	0x0800aaeb
 800aa0c:	0800aa97 	.word	0x0800aa97
 800aa10:	0800aaeb 	.word	0x0800aaeb
 800aa14:	0800aaeb 	.word	0x0800aaeb
 800aa18:	0800aaeb 	.word	0x0800aaeb
 800aa1c:	0800aaa7 	.word	0x0800aaa7
 800aa20:	0800aaeb 	.word	0x0800aaeb
 800aa24:	0800aaeb 	.word	0x0800aaeb
 800aa28:	0800aaeb 	.word	0x0800aaeb
 800aa2c:	0800aaeb 	.word	0x0800aaeb
 800aa30:	0800aaeb 	.word	0x0800aaeb
 800aa34:	0800aaeb 	.word	0x0800aaeb
 800aa38:	0800aaeb 	.word	0x0800aaeb
 800aa3c:	0800aab7 	.word	0x0800aab7
 800aa40:	0800aaeb 	.word	0x0800aaeb
 800aa44:	0800aaeb 	.word	0x0800aaeb
 800aa48:	0800aaeb 	.word	0x0800aaeb
 800aa4c:	0800aaeb 	.word	0x0800aaeb
 800aa50:	0800aaeb 	.word	0x0800aaeb
 800aa54:	0800aaeb 	.word	0x0800aaeb
 800aa58:	0800aaeb 	.word	0x0800aaeb
 800aa5c:	0800aaeb 	.word	0x0800aaeb
 800aa60:	0800aaeb 	.word	0x0800aaeb
 800aa64:	0800aaeb 	.word	0x0800aaeb
 800aa68:	0800aaeb 	.word	0x0800aaeb
 800aa6c:	0800aaeb 	.word	0x0800aaeb
 800aa70:	0800aaeb 	.word	0x0800aaeb
 800aa74:	0800aaeb 	.word	0x0800aaeb
 800aa78:	0800aaeb 	.word	0x0800aaeb
 800aa7c:	0800aadd 	.word	0x0800aadd
 800aa80:	2b40      	cmp	r3, #64	; 0x40
 800aa82:	d02e      	beq.n	800aae2 <UART_SetConfig+0xab2>
 800aa84:	e031      	b.n	800aaea <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa86:	f7fc f83d 	bl	8006b04 <HAL_RCC_GetPCLK1Freq>
 800aa8a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800aa8c:	e033      	b.n	800aaf6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aa8e:	f7fc f84f 	bl	8006b30 <HAL_RCC_GetPCLK2Freq>
 800aa92:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800aa94:	e02f      	b.n	800aaf6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f7fc ff6e 	bl	800797c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aaa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aaa4:	e027      	b.n	800aaf6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aaa6:	f107 0318 	add.w	r3, r7, #24
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f7fd f8ba 	bl	8007c24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aab0:	69fb      	ldr	r3, [r7, #28]
 800aab2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aab4:	e01f      	b.n	800aaf6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aab6:	4b69      	ldr	r3, [pc, #420]	; (800ac5c <UART_SetConfig+0xc2c>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f003 0320 	and.w	r3, r3, #32
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d009      	beq.n	800aad6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aac2:	4b66      	ldr	r3, [pc, #408]	; (800ac5c <UART_SetConfig+0xc2c>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	08db      	lsrs	r3, r3, #3
 800aac8:	f003 0303 	and.w	r3, r3, #3
 800aacc:	4a64      	ldr	r2, [pc, #400]	; (800ac60 <UART_SetConfig+0xc30>)
 800aace:	fa22 f303 	lsr.w	r3, r2, r3
 800aad2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aad4:	e00f      	b.n	800aaf6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800aad6:	4b62      	ldr	r3, [pc, #392]	; (800ac60 <UART_SetConfig+0xc30>)
 800aad8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aada:	e00c      	b.n	800aaf6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aadc:	4b61      	ldr	r3, [pc, #388]	; (800ac64 <UART_SetConfig+0xc34>)
 800aade:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aae0:	e009      	b.n	800aaf6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aae2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aae6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aae8:	e005      	b.n	800aaf6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800aaea:	2300      	movs	r3, #0
 800aaec:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800aaee:	2301      	movs	r3, #1
 800aaf0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800aaf4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aaf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	f000 80ea 	beq.w	800acd2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab02:	4a55      	ldr	r2, [pc, #340]	; (800ac58 <UART_SetConfig+0xc28>)
 800ab04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab08:	461a      	mov	r2, r3
 800ab0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab0c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab10:	005a      	lsls	r2, r3, #1
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	685b      	ldr	r3, [r3, #4]
 800ab16:	085b      	lsrs	r3, r3, #1
 800ab18:	441a      	add	r2, r3
 800ab1a:	697b      	ldr	r3, [r7, #20]
 800ab1c:	685b      	ldr	r3, [r3, #4]
 800ab1e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab22:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab26:	2b0f      	cmp	r3, #15
 800ab28:	d916      	bls.n	800ab58 <UART_SetConfig+0xb28>
 800ab2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab30:	d212      	bcs.n	800ab58 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ab32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab34:	b29b      	uxth	r3, r3
 800ab36:	f023 030f 	bic.w	r3, r3, #15
 800ab3a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ab3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab3e:	085b      	lsrs	r3, r3, #1
 800ab40:	b29b      	uxth	r3, r3
 800ab42:	f003 0307 	and.w	r3, r3, #7
 800ab46:	b29a      	uxth	r2, r3
 800ab48:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ab4a:	4313      	orrs	r3, r2
 800ab4c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ab54:	60da      	str	r2, [r3, #12]
 800ab56:	e0bc      	b.n	800acd2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ab58:	2301      	movs	r3, #1
 800ab5a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ab5e:	e0b8      	b.n	800acd2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ab60:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ab64:	2b20      	cmp	r3, #32
 800ab66:	dc4b      	bgt.n	800ac00 <UART_SetConfig+0xbd0>
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	f2c0 8087 	blt.w	800ac7c <UART_SetConfig+0xc4c>
 800ab6e:	2b20      	cmp	r3, #32
 800ab70:	f200 8084 	bhi.w	800ac7c <UART_SetConfig+0xc4c>
 800ab74:	a201      	add	r2, pc, #4	; (adr r2, 800ab7c <UART_SetConfig+0xb4c>)
 800ab76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab7a:	bf00      	nop
 800ab7c:	0800ac07 	.word	0x0800ac07
 800ab80:	0800ac0f 	.word	0x0800ac0f
 800ab84:	0800ac7d 	.word	0x0800ac7d
 800ab88:	0800ac7d 	.word	0x0800ac7d
 800ab8c:	0800ac17 	.word	0x0800ac17
 800ab90:	0800ac7d 	.word	0x0800ac7d
 800ab94:	0800ac7d 	.word	0x0800ac7d
 800ab98:	0800ac7d 	.word	0x0800ac7d
 800ab9c:	0800ac27 	.word	0x0800ac27
 800aba0:	0800ac7d 	.word	0x0800ac7d
 800aba4:	0800ac7d 	.word	0x0800ac7d
 800aba8:	0800ac7d 	.word	0x0800ac7d
 800abac:	0800ac7d 	.word	0x0800ac7d
 800abb0:	0800ac7d 	.word	0x0800ac7d
 800abb4:	0800ac7d 	.word	0x0800ac7d
 800abb8:	0800ac7d 	.word	0x0800ac7d
 800abbc:	0800ac37 	.word	0x0800ac37
 800abc0:	0800ac7d 	.word	0x0800ac7d
 800abc4:	0800ac7d 	.word	0x0800ac7d
 800abc8:	0800ac7d 	.word	0x0800ac7d
 800abcc:	0800ac7d 	.word	0x0800ac7d
 800abd0:	0800ac7d 	.word	0x0800ac7d
 800abd4:	0800ac7d 	.word	0x0800ac7d
 800abd8:	0800ac7d 	.word	0x0800ac7d
 800abdc:	0800ac7d 	.word	0x0800ac7d
 800abe0:	0800ac7d 	.word	0x0800ac7d
 800abe4:	0800ac7d 	.word	0x0800ac7d
 800abe8:	0800ac7d 	.word	0x0800ac7d
 800abec:	0800ac7d 	.word	0x0800ac7d
 800abf0:	0800ac7d 	.word	0x0800ac7d
 800abf4:	0800ac7d 	.word	0x0800ac7d
 800abf8:	0800ac7d 	.word	0x0800ac7d
 800abfc:	0800ac6f 	.word	0x0800ac6f
 800ac00:	2b40      	cmp	r3, #64	; 0x40
 800ac02:	d037      	beq.n	800ac74 <UART_SetConfig+0xc44>
 800ac04:	e03a      	b.n	800ac7c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac06:	f7fb ff7d 	bl	8006b04 <HAL_RCC_GetPCLK1Freq>
 800ac0a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ac0c:	e03c      	b.n	800ac88 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ac0e:	f7fb ff8f 	bl	8006b30 <HAL_RCC_GetPCLK2Freq>
 800ac12:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ac14:	e038      	b.n	800ac88 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f7fc feae 	bl	800797c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ac20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac24:	e030      	b.n	800ac88 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac26:	f107 0318 	add.w	r3, r7, #24
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f7fc fffa 	bl	8007c24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ac30:	69fb      	ldr	r3, [r7, #28]
 800ac32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac34:	e028      	b.n	800ac88 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac36:	4b09      	ldr	r3, [pc, #36]	; (800ac5c <UART_SetConfig+0xc2c>)
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f003 0320 	and.w	r3, r3, #32
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d012      	beq.n	800ac68 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ac42:	4b06      	ldr	r3, [pc, #24]	; (800ac5c <UART_SetConfig+0xc2c>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	08db      	lsrs	r3, r3, #3
 800ac48:	f003 0303 	and.w	r3, r3, #3
 800ac4c:	4a04      	ldr	r2, [pc, #16]	; (800ac60 <UART_SetConfig+0xc30>)
 800ac4e:	fa22 f303 	lsr.w	r3, r2, r3
 800ac52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ac54:	e018      	b.n	800ac88 <UART_SetConfig+0xc58>
 800ac56:	bf00      	nop
 800ac58:	0800b518 	.word	0x0800b518
 800ac5c:	58024400 	.word	0x58024400
 800ac60:	03d09000 	.word	0x03d09000
 800ac64:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800ac68:	4b24      	ldr	r3, [pc, #144]	; (800acfc <UART_SetConfig+0xccc>)
 800ac6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac6c:	e00c      	b.n	800ac88 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ac6e:	4b24      	ldr	r3, [pc, #144]	; (800ad00 <UART_SetConfig+0xcd0>)
 800ac70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac72:	e009      	b.n	800ac88 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac7a:	e005      	b.n	800ac88 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ac80:	2301      	movs	r3, #1
 800ac82:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ac86:	bf00      	nop
    }

    if (pclk != 0U)
 800ac88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d021      	beq.n	800acd2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac8e:	697b      	ldr	r3, [r7, #20]
 800ac90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac92:	4a1c      	ldr	r2, [pc, #112]	; (800ad04 <UART_SetConfig+0xcd4>)
 800ac94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac98:	461a      	mov	r2, r3
 800ac9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac9c:	fbb3 f2f2 	udiv	r2, r3, r2
 800aca0:	697b      	ldr	r3, [r7, #20]
 800aca2:	685b      	ldr	r3, [r3, #4]
 800aca4:	085b      	lsrs	r3, r3, #1
 800aca6:	441a      	add	r2, r3
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	685b      	ldr	r3, [r3, #4]
 800acac:	fbb2 f3f3 	udiv	r3, r2, r3
 800acb0:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800acb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acb4:	2b0f      	cmp	r3, #15
 800acb6:	d909      	bls.n	800accc <UART_SetConfig+0xc9c>
 800acb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acbe:	d205      	bcs.n	800accc <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800acc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acc2:	b29a      	uxth	r2, r3
 800acc4:	697b      	ldr	r3, [r7, #20]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	60da      	str	r2, [r3, #12]
 800acca:	e002      	b.n	800acd2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800accc:	2301      	movs	r3, #1
 800acce:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	2201      	movs	r2, #1
 800acd6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	2201      	movs	r2, #1
 800acde:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	2200      	movs	r2, #0
 800ace6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	2200      	movs	r2, #0
 800acec:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800acee:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800acf2:	4618      	mov	r0, r3
 800acf4:	3748      	adds	r7, #72	; 0x48
 800acf6:	46bd      	mov	sp, r7
 800acf8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800acfc:	03d09000 	.word	0x03d09000
 800ad00:	003d0900 	.word	0x003d0900
 800ad04:	0800b518 	.word	0x0800b518

0800ad08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b083      	sub	sp, #12
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad14:	f003 0301 	and.w	r3, r3, #1
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d00a      	beq.n	800ad32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	685b      	ldr	r3, [r3, #4]
 800ad22:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	430a      	orrs	r2, r1
 800ad30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad36:	f003 0302 	and.w	r3, r3, #2
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d00a      	beq.n	800ad54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	685b      	ldr	r3, [r3, #4]
 800ad44:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	430a      	orrs	r2, r1
 800ad52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad58:	f003 0304 	and.w	r3, r3, #4
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d00a      	beq.n	800ad76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	685b      	ldr	r3, [r3, #4]
 800ad66:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	430a      	orrs	r2, r1
 800ad74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad7a:	f003 0308 	and.w	r3, r3, #8
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d00a      	beq.n	800ad98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	685b      	ldr	r3, [r3, #4]
 800ad88:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	430a      	orrs	r2, r1
 800ad96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad9c:	f003 0310 	and.w	r3, r3, #16
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d00a      	beq.n	800adba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	689b      	ldr	r3, [r3, #8]
 800adaa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	430a      	orrs	r2, r1
 800adb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adbe:	f003 0320 	and.w	r3, r3, #32
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d00a      	beq.n	800addc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	689b      	ldr	r3, [r3, #8]
 800adcc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	430a      	orrs	r2, r1
 800adda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ade0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d01a      	beq.n	800ae1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	685b      	ldr	r3, [r3, #4]
 800adee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	430a      	orrs	r2, r1
 800adfc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae06:	d10a      	bne.n	800ae1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	685b      	ldr	r3, [r3, #4]
 800ae0e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	430a      	orrs	r2, r1
 800ae1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d00a      	beq.n	800ae40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	685b      	ldr	r3, [r3, #4]
 800ae30:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	430a      	orrs	r2, r1
 800ae3e:	605a      	str	r2, [r3, #4]
  }
}
 800ae40:	bf00      	nop
 800ae42:	370c      	adds	r7, #12
 800ae44:	46bd      	mov	sp, r7
 800ae46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4a:	4770      	bx	lr

0800ae4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b086      	sub	sp, #24
 800ae50:	af02      	add	r7, sp, #8
 800ae52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2200      	movs	r2, #0
 800ae58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ae5c:	f7f7 fd82 	bl	8002964 <HAL_GetTick>
 800ae60:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	f003 0308 	and.w	r3, r3, #8
 800ae6c:	2b08      	cmp	r3, #8
 800ae6e:	d10e      	bne.n	800ae8e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ae74:	9300      	str	r3, [sp, #0]
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	2200      	movs	r2, #0
 800ae7a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f000 f82f 	bl	800aee2 <UART_WaitOnFlagUntilTimeout>
 800ae84:	4603      	mov	r3, r0
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d001      	beq.n	800ae8e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ae8a:	2303      	movs	r3, #3
 800ae8c:	e025      	b.n	800aeda <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f003 0304 	and.w	r3, r3, #4
 800ae98:	2b04      	cmp	r3, #4
 800ae9a:	d10e      	bne.n	800aeba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aea0:	9300      	str	r3, [sp, #0]
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	2200      	movs	r2, #0
 800aea6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f000 f819 	bl	800aee2 <UART_WaitOnFlagUntilTimeout>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d001      	beq.n	800aeba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aeb6:	2303      	movs	r3, #3
 800aeb8:	e00f      	b.n	800aeda <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2220      	movs	r2, #32
 800aebe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2220      	movs	r2, #32
 800aec6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2200      	movs	r2, #0
 800aece:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2200      	movs	r2, #0
 800aed4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800aed8:	2300      	movs	r3, #0
}
 800aeda:	4618      	mov	r0, r3
 800aedc:	3710      	adds	r7, #16
 800aede:	46bd      	mov	sp, r7
 800aee0:	bd80      	pop	{r7, pc}

0800aee2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aee2:	b580      	push	{r7, lr}
 800aee4:	b09c      	sub	sp, #112	; 0x70
 800aee6:	af00      	add	r7, sp, #0
 800aee8:	60f8      	str	r0, [r7, #12]
 800aeea:	60b9      	str	r1, [r7, #8]
 800aeec:	603b      	str	r3, [r7, #0]
 800aeee:	4613      	mov	r3, r2
 800aef0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aef2:	e0a9      	b.n	800b048 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aef4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aefa:	f000 80a5 	beq.w	800b048 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aefe:	f7f7 fd31 	bl	8002964 <HAL_GetTick>
 800af02:	4602      	mov	r2, r0
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	1ad3      	subs	r3, r2, r3
 800af08:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800af0a:	429a      	cmp	r2, r3
 800af0c:	d302      	bcc.n	800af14 <UART_WaitOnFlagUntilTimeout+0x32>
 800af0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800af10:	2b00      	cmp	r3, #0
 800af12:	d140      	bne.n	800af96 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af1c:	e853 3f00 	ldrex	r3, [r3]
 800af20:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800af22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af24:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800af28:	667b      	str	r3, [r7, #100]	; 0x64
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	461a      	mov	r2, r3
 800af30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af32:	65fb      	str	r3, [r7, #92]	; 0x5c
 800af34:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af36:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800af38:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800af3a:	e841 2300 	strex	r3, r2, [r1]
 800af3e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800af40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af42:	2b00      	cmp	r3, #0
 800af44:	d1e6      	bne.n	800af14 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	3308      	adds	r3, #8
 800af4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af50:	e853 3f00 	ldrex	r3, [r3]
 800af54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800af56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af58:	f023 0301 	bic.w	r3, r3, #1
 800af5c:	663b      	str	r3, [r7, #96]	; 0x60
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	3308      	adds	r3, #8
 800af64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800af66:	64ba      	str	r2, [r7, #72]	; 0x48
 800af68:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800af6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af6e:	e841 2300 	strex	r3, r2, [r1]
 800af72:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800af74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af76:	2b00      	cmp	r3, #0
 800af78:	d1e5      	bne.n	800af46 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	2220      	movs	r2, #32
 800af7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	2220      	movs	r2, #32
 800af86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	2200      	movs	r2, #0
 800af8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800af92:	2303      	movs	r3, #3
 800af94:	e069      	b.n	800b06a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f003 0304 	and.w	r3, r3, #4
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d051      	beq.n	800b048 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	69db      	ldr	r3, [r3, #28]
 800afaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800afae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800afb2:	d149      	bne.n	800b048 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800afbc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afc6:	e853 3f00 	ldrex	r3, [r3]
 800afca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800afcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800afd2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	461a      	mov	r2, r3
 800afda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afdc:	637b      	str	r3, [r7, #52]	; 0x34
 800afde:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afe0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800afe2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800afe4:	e841 2300 	strex	r3, r2, [r1]
 800afe8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800afea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afec:	2b00      	cmp	r3, #0
 800afee:	d1e6      	bne.n	800afbe <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	3308      	adds	r3, #8
 800aff6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aff8:	697b      	ldr	r3, [r7, #20]
 800affa:	e853 3f00 	ldrex	r3, [r3]
 800affe:	613b      	str	r3, [r7, #16]
   return(result);
 800b000:	693b      	ldr	r3, [r7, #16]
 800b002:	f023 0301 	bic.w	r3, r3, #1
 800b006:	66bb      	str	r3, [r7, #104]	; 0x68
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	3308      	adds	r3, #8
 800b00e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b010:	623a      	str	r2, [r7, #32]
 800b012:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b014:	69f9      	ldr	r1, [r7, #28]
 800b016:	6a3a      	ldr	r2, [r7, #32]
 800b018:	e841 2300 	strex	r3, r2, [r1]
 800b01c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b01e:	69bb      	ldr	r3, [r7, #24]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d1e5      	bne.n	800aff0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	2220      	movs	r2, #32
 800b028:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	2220      	movs	r2, #32
 800b030:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	2220      	movs	r2, #32
 800b038:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	2200      	movs	r2, #0
 800b040:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b044:	2303      	movs	r3, #3
 800b046:	e010      	b.n	800b06a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	69da      	ldr	r2, [r3, #28]
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	4013      	ands	r3, r2
 800b052:	68ba      	ldr	r2, [r7, #8]
 800b054:	429a      	cmp	r2, r3
 800b056:	bf0c      	ite	eq
 800b058:	2301      	moveq	r3, #1
 800b05a:	2300      	movne	r3, #0
 800b05c:	b2db      	uxtb	r3, r3
 800b05e:	461a      	mov	r2, r3
 800b060:	79fb      	ldrb	r3, [r7, #7]
 800b062:	429a      	cmp	r2, r3
 800b064:	f43f af46 	beq.w	800aef4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b068:	2300      	movs	r3, #0
}
 800b06a:	4618      	mov	r0, r3
 800b06c:	3770      	adds	r7, #112	; 0x70
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}
	...

0800b074 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b074:	b480      	push	{r7}
 800b076:	b095      	sub	sp, #84	; 0x54
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b084:	e853 3f00 	ldrex	r3, [r3]
 800b088:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b08c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b090:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	461a      	mov	r2, r3
 800b098:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b09a:	643b      	str	r3, [r7, #64]	; 0x40
 800b09c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b09e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b0a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b0a2:	e841 2300 	strex	r3, r2, [r1]
 800b0a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b0a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d1e6      	bne.n	800b07c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	3308      	adds	r3, #8
 800b0b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0b6:	6a3b      	ldr	r3, [r7, #32]
 800b0b8:	e853 3f00 	ldrex	r3, [r3]
 800b0bc:	61fb      	str	r3, [r7, #28]
   return(result);
 800b0be:	69fa      	ldr	r2, [r7, #28]
 800b0c0:	4b1e      	ldr	r3, [pc, #120]	; (800b13c <UART_EndRxTransfer+0xc8>)
 800b0c2:	4013      	ands	r3, r2
 800b0c4:	64bb      	str	r3, [r7, #72]	; 0x48
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	3308      	adds	r3, #8
 800b0cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b0ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b0d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b0d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0d6:	e841 2300 	strex	r3, r2, [r1]
 800b0da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d1e5      	bne.n	800b0ae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0e6:	2b01      	cmp	r3, #1
 800b0e8:	d118      	bne.n	800b11c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	e853 3f00 	ldrex	r3, [r3]
 800b0f6:	60bb      	str	r3, [r7, #8]
   return(result);
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	f023 0310 	bic.w	r3, r3, #16
 800b0fe:	647b      	str	r3, [r7, #68]	; 0x44
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	461a      	mov	r2, r3
 800b106:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b108:	61bb      	str	r3, [r7, #24]
 800b10a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b10c:	6979      	ldr	r1, [r7, #20]
 800b10e:	69ba      	ldr	r2, [r7, #24]
 800b110:	e841 2300 	strex	r3, r2, [r1]
 800b114:	613b      	str	r3, [r7, #16]
   return(result);
 800b116:	693b      	ldr	r3, [r7, #16]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d1e6      	bne.n	800b0ea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2220      	movs	r2, #32
 800b120:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2200      	movs	r2, #0
 800b128:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2200      	movs	r2, #0
 800b12e:	671a      	str	r2, [r3, #112]	; 0x70
}
 800b130:	bf00      	nop
 800b132:	3754      	adds	r7, #84	; 0x54
 800b134:	46bd      	mov	sp, r7
 800b136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13a:	4770      	bx	lr
 800b13c:	effffffe 	.word	0xeffffffe

0800b140 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b084      	sub	sp, #16
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b14c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	2200      	movs	r2, #0
 800b152:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	2200      	movs	r2, #0
 800b15a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b15e:	68f8      	ldr	r0, [r7, #12]
 800b160:	f7fe ff50 	bl	800a004 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b164:	bf00      	nop
 800b166:	3710      	adds	r7, #16
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}

0800b16c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b088      	sub	sp, #32
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	e853 3f00 	ldrex	r3, [r3]
 800b180:	60bb      	str	r3, [r7, #8]
   return(result);
 800b182:	68bb      	ldr	r3, [r7, #8]
 800b184:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b188:	61fb      	str	r3, [r7, #28]
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	461a      	mov	r2, r3
 800b190:	69fb      	ldr	r3, [r7, #28]
 800b192:	61bb      	str	r3, [r7, #24]
 800b194:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b196:	6979      	ldr	r1, [r7, #20]
 800b198:	69ba      	ldr	r2, [r7, #24]
 800b19a:	e841 2300 	strex	r3, r2, [r1]
 800b19e:	613b      	str	r3, [r7, #16]
   return(result);
 800b1a0:	693b      	ldr	r3, [r7, #16]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d1e6      	bne.n	800b174 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2220      	movs	r2, #32
 800b1aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f7fe ff1b 	bl	8009ff0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b1ba:	bf00      	nop
 800b1bc:	3720      	adds	r7, #32
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}

0800b1c2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b1c2:	b480      	push	{r7}
 800b1c4:	b083      	sub	sp, #12
 800b1c6:	af00      	add	r7, sp, #0
 800b1c8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b1ca:	bf00      	nop
 800b1cc:	370c      	adds	r7, #12
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d4:	4770      	bx	lr

0800b1d6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b1d6:	b480      	push	{r7}
 800b1d8:	b083      	sub	sp, #12
 800b1da:	af00      	add	r7, sp, #0
 800b1dc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b1de:	bf00      	nop
 800b1e0:	370c      	adds	r7, #12
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e8:	4770      	bx	lr

0800b1ea <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b1ea:	b480      	push	{r7}
 800b1ec:	b083      	sub	sp, #12
 800b1ee:	af00      	add	r7, sp, #0
 800b1f0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b1f2:	bf00      	nop
 800b1f4:	370c      	adds	r7, #12
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fc:	4770      	bx	lr

0800b1fe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b1fe:	b480      	push	{r7}
 800b200:	b085      	sub	sp, #20
 800b202:	af00      	add	r7, sp, #0
 800b204:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b20c:	2b01      	cmp	r3, #1
 800b20e:	d101      	bne.n	800b214 <HAL_UARTEx_DisableFifoMode+0x16>
 800b210:	2302      	movs	r3, #2
 800b212:	e027      	b.n	800b264 <HAL_UARTEx_DisableFifoMode+0x66>
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2201      	movs	r2, #1
 800b218:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2224      	movs	r2, #36	; 0x24
 800b220:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	681a      	ldr	r2, [r3, #0]
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	f022 0201 	bic.w	r2, r2, #1
 800b23a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b242:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2200      	movs	r2, #0
 800b248:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	68fa      	ldr	r2, [r7, #12]
 800b250:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	2220      	movs	r2, #32
 800b256:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2200      	movs	r2, #0
 800b25e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b262:	2300      	movs	r3, #0
}
 800b264:	4618      	mov	r0, r3
 800b266:	3714      	adds	r7, #20
 800b268:	46bd      	mov	sp, r7
 800b26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26e:	4770      	bx	lr

0800b270 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b084      	sub	sp, #16
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b280:	2b01      	cmp	r3, #1
 800b282:	d101      	bne.n	800b288 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b284:	2302      	movs	r3, #2
 800b286:	e02d      	b.n	800b2e4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2201      	movs	r2, #1
 800b28c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2224      	movs	r2, #36	; 0x24
 800b294:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	681a      	ldr	r2, [r3, #0]
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	f022 0201 	bic.w	r2, r2, #1
 800b2ae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	689b      	ldr	r3, [r3, #8]
 800b2b6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	683a      	ldr	r2, [r7, #0]
 800b2c0:	430a      	orrs	r2, r1
 800b2c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f000 f84f 	bl	800b368 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	68fa      	ldr	r2, [r7, #12]
 800b2d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2220      	movs	r2, #32
 800b2d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2200      	movs	r2, #0
 800b2de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b2e2:	2300      	movs	r3, #0
}
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	3710      	adds	r7, #16
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd80      	pop	{r7, pc}

0800b2ec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b084      	sub	sp, #16
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
 800b2f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b2fc:	2b01      	cmp	r3, #1
 800b2fe:	d101      	bne.n	800b304 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b300:	2302      	movs	r3, #2
 800b302:	e02d      	b.n	800b360 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2201      	movs	r2, #1
 800b308:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2224      	movs	r2, #36	; 0x24
 800b310:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	681a      	ldr	r2, [r3, #0]
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	f022 0201 	bic.w	r2, r2, #1
 800b32a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	689b      	ldr	r3, [r3, #8]
 800b332:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	683a      	ldr	r2, [r7, #0]
 800b33c:	430a      	orrs	r2, r1
 800b33e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f000 f811 	bl	800b368 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	68fa      	ldr	r2, [r7, #12]
 800b34c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2220      	movs	r2, #32
 800b352:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2200      	movs	r2, #0
 800b35a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b35e:	2300      	movs	r3, #0
}
 800b360:	4618      	mov	r0, r3
 800b362:	3710      	adds	r7, #16
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}

0800b368 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b368:	b480      	push	{r7}
 800b36a:	b085      	sub	sp, #20
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b374:	2b00      	cmp	r3, #0
 800b376:	d108      	bne.n	800b38a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2201      	movs	r2, #1
 800b37c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2201      	movs	r2, #1
 800b384:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b388:	e031      	b.n	800b3ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b38a:	2310      	movs	r3, #16
 800b38c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b38e:	2310      	movs	r3, #16
 800b390:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	689b      	ldr	r3, [r3, #8]
 800b398:	0e5b      	lsrs	r3, r3, #25
 800b39a:	b2db      	uxtb	r3, r3
 800b39c:	f003 0307 	and.w	r3, r3, #7
 800b3a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	689b      	ldr	r3, [r3, #8]
 800b3a8:	0f5b      	lsrs	r3, r3, #29
 800b3aa:	b2db      	uxtb	r3, r3
 800b3ac:	f003 0307 	and.w	r3, r3, #7
 800b3b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b3b2:	7bbb      	ldrb	r3, [r7, #14]
 800b3b4:	7b3a      	ldrb	r2, [r7, #12]
 800b3b6:	4911      	ldr	r1, [pc, #68]	; (800b3fc <UARTEx_SetNbDataToProcess+0x94>)
 800b3b8:	5c8a      	ldrb	r2, [r1, r2]
 800b3ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b3be:	7b3a      	ldrb	r2, [r7, #12]
 800b3c0:	490f      	ldr	r1, [pc, #60]	; (800b400 <UARTEx_SetNbDataToProcess+0x98>)
 800b3c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b3c4:	fb93 f3f2 	sdiv	r3, r3, r2
 800b3c8:	b29a      	uxth	r2, r3
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b3d0:	7bfb      	ldrb	r3, [r7, #15]
 800b3d2:	7b7a      	ldrb	r2, [r7, #13]
 800b3d4:	4909      	ldr	r1, [pc, #36]	; (800b3fc <UARTEx_SetNbDataToProcess+0x94>)
 800b3d6:	5c8a      	ldrb	r2, [r1, r2]
 800b3d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b3dc:	7b7a      	ldrb	r2, [r7, #13]
 800b3de:	4908      	ldr	r1, [pc, #32]	; (800b400 <UARTEx_SetNbDataToProcess+0x98>)
 800b3e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b3e2:	fb93 f3f2 	sdiv	r3, r3, r2
 800b3e6:	b29a      	uxth	r2, r3
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b3ee:	bf00      	nop
 800b3f0:	3714      	adds	r7, #20
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f8:	4770      	bx	lr
 800b3fa:	bf00      	nop
 800b3fc:	0800b530 	.word	0x0800b530
 800b400:	0800b538 	.word	0x0800b538

0800b404 <round>:
 800b404:	ee10 1a90 	vmov	r1, s1
 800b408:	f3c1 500a 	ubfx	r0, r1, #20, #11
 800b40c:	f2a0 32ff 	subw	r2, r0, #1023	; 0x3ff
 800b410:	2a13      	cmp	r2, #19
 800b412:	b510      	push	{r4, lr}
 800b414:	ee10 3a10 	vmov	r3, s0
 800b418:	dc19      	bgt.n	800b44e <round+0x4a>
 800b41a:	2a00      	cmp	r2, #0
 800b41c:	da09      	bge.n	800b432 <round+0x2e>
 800b41e:	3201      	adds	r2, #1
 800b420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800b424:	d103      	bne.n	800b42e <round+0x2a>
 800b426:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800b42a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800b42e:	2000      	movs	r0, #0
 800b430:	e026      	b.n	800b480 <round+0x7c>
 800b432:	4816      	ldr	r0, [pc, #88]	; (800b48c <round+0x88>)
 800b434:	4110      	asrs	r0, r2
 800b436:	ea01 0400 	and.w	r4, r1, r0
 800b43a:	4323      	orrs	r3, r4
 800b43c:	d00e      	beq.n	800b45c <round+0x58>
 800b43e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b442:	fa43 f202 	asr.w	r2, r3, r2
 800b446:	4411      	add	r1, r2
 800b448:	ea21 0100 	bic.w	r1, r1, r0
 800b44c:	e7ef      	b.n	800b42e <round+0x2a>
 800b44e:	2a33      	cmp	r2, #51	; 0x33
 800b450:	dd05      	ble.n	800b45e <round+0x5a>
 800b452:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800b456:	d101      	bne.n	800b45c <round+0x58>
 800b458:	ee30 0b00 	vadd.f64	d0, d0, d0
 800b45c:	bd10      	pop	{r4, pc}
 800b45e:	f2a0 4413 	subw	r4, r0, #1043	; 0x413
 800b462:	f04f 30ff 	mov.w	r0, #4294967295
 800b466:	40e0      	lsrs	r0, r4
 800b468:	4203      	tst	r3, r0
 800b46a:	d0f7      	beq.n	800b45c <round+0x58>
 800b46c:	2401      	movs	r4, #1
 800b46e:	f1c2 0233 	rsb	r2, r2, #51	; 0x33
 800b472:	fa04 f202 	lsl.w	r2, r4, r2
 800b476:	189b      	adds	r3, r3, r2
 800b478:	bf28      	it	cs
 800b47a:	1909      	addcs	r1, r1, r4
 800b47c:	ea23 0000 	bic.w	r0, r3, r0
 800b480:	460b      	mov	r3, r1
 800b482:	4602      	mov	r2, r0
 800b484:	ec43 2b10 	vmov	d0, r2, r3
 800b488:	e7e8      	b.n	800b45c <round+0x58>
 800b48a:	bf00      	nop
 800b48c:	000fffff 	.word	0x000fffff

0800b490 <__libc_init_array>:
 800b490:	b570      	push	{r4, r5, r6, lr}
 800b492:	4d0d      	ldr	r5, [pc, #52]	; (800b4c8 <__libc_init_array+0x38>)
 800b494:	4c0d      	ldr	r4, [pc, #52]	; (800b4cc <__libc_init_array+0x3c>)
 800b496:	1b64      	subs	r4, r4, r5
 800b498:	10a4      	asrs	r4, r4, #2
 800b49a:	2600      	movs	r6, #0
 800b49c:	42a6      	cmp	r6, r4
 800b49e:	d109      	bne.n	800b4b4 <__libc_init_array+0x24>
 800b4a0:	4d0b      	ldr	r5, [pc, #44]	; (800b4d0 <__libc_init_array+0x40>)
 800b4a2:	4c0c      	ldr	r4, [pc, #48]	; (800b4d4 <__libc_init_array+0x44>)
 800b4a4:	f000 f820 	bl	800b4e8 <_init>
 800b4a8:	1b64      	subs	r4, r4, r5
 800b4aa:	10a4      	asrs	r4, r4, #2
 800b4ac:	2600      	movs	r6, #0
 800b4ae:	42a6      	cmp	r6, r4
 800b4b0:	d105      	bne.n	800b4be <__libc_init_array+0x2e>
 800b4b2:	bd70      	pop	{r4, r5, r6, pc}
 800b4b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4b8:	4798      	blx	r3
 800b4ba:	3601      	adds	r6, #1
 800b4bc:	e7ee      	b.n	800b49c <__libc_init_array+0xc>
 800b4be:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4c2:	4798      	blx	r3
 800b4c4:	3601      	adds	r6, #1
 800b4c6:	e7f2      	b.n	800b4ae <__libc_init_array+0x1e>
 800b4c8:	0800b548 	.word	0x0800b548
 800b4cc:	0800b548 	.word	0x0800b548
 800b4d0:	0800b548 	.word	0x0800b548
 800b4d4:	0800b54c 	.word	0x0800b54c

0800b4d8 <memset>:
 800b4d8:	4402      	add	r2, r0
 800b4da:	4603      	mov	r3, r0
 800b4dc:	4293      	cmp	r3, r2
 800b4de:	d100      	bne.n	800b4e2 <memset+0xa>
 800b4e0:	4770      	bx	lr
 800b4e2:	f803 1b01 	strb.w	r1, [r3], #1
 800b4e6:	e7f9      	b.n	800b4dc <memset+0x4>

0800b4e8 <_init>:
 800b4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4ea:	bf00      	nop
 800b4ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4ee:	bc08      	pop	{r3}
 800b4f0:	469e      	mov	lr, r3
 800b4f2:	4770      	bx	lr

0800b4f4 <_fini>:
 800b4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4f6:	bf00      	nop
 800b4f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4fa:	bc08      	pop	{r3}
 800b4fc:	469e      	mov	lr, r3
 800b4fe:	4770      	bx	lr
